<haxe>
	<class path="Array" params="T" file="/usr/lib/haxe/std/Array.hx" extern="1">
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.
		
		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.
		
		The order of elements is preserved.
		
		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.
		
		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However, 
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.
		
		This operation modifies `this` Array in place.
		
		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.
		
		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.
		
		This operation modifies `this` Array in place.
		
		The offset is calculated like so:
			
		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this` 
		  Array, i.e. `this.length + pos`. If this yields a negative value, the 
		  offset is 0.
		- Otherwise, the offset is `pos`.
		
		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.
		
		This operation modifies `this` Array in place.
		
		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.
		
		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.
		
		This operation modifies `this` Array in place.
		
		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].
		
		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.
		
		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.
		
		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.
		
		This operation modifies `this` Array in place.
		
		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.
		
		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.
		
		This operation does not modify `this` Array.
		
		The elements are not copied and retain their identity.
		
		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.
		
		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.
		
		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.
		
		This operation modifies `this` Array in place.
		
		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.
		
		If `this` is the empty Array `[]`, `null` is returned and the length 
		remains 0.</haxe_doc>
		</shift>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.
		
		This operation modifies `this` Array in place.
		
		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the offset
		it was added at.
		
		This operation modifies `this` Array in place.
		
		`this.length` increases by 1.</haxe_doc>
		</push>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.
		
		This operation modifies `this` Array in place.
		
		If `this` has at least one element, `this.length` will decrease by 1.
		
		If `this` is the empty Array `[]`, null is returned and the length 
		remains 0.</haxe_doc>
		</pop>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.
		
		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`
		
		If `this` is the empty Array `[]`, the result is the empty String `""`. 
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.
		
		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.
		
		This operation does not modify `this` Array.
		
		If `a` is the empty Array `[]`, a copy of `this` Array is returned.
		
		The length of the returned Array is equal to the sum of `this.length` 
		and `a.length`.
		
		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a `List` which
	is less memory and CPU consuming, unless you really need indexed access.</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="/usr/lib/haxe/std/Class.hx">
		<this><d/></this>
		<haxe_doc>An abstract type that represents a Class.
	
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/lib/haxe/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:
		
		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`
		
		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.
		
		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.
		
		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by
	
	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.
	
	There is some extra functions available in the `DateTools` class.
	
	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="/usr/lib/haxe/std/flash/_std/EReg.hx">
		<map public="1" set="method" line="89">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>For each occurence of the pattern in the string `s`, the function `f` is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the `g` flag might cause some incorrect behavior on some platforms.</haxe_doc>
		</map>
		<replace public="1" set="method" line="85">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.
		
		If `this` EReg does not match any substring, the result is `s`.
		
		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.
		
		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.
		
		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<split public="1" set="method" line="78">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.
		
		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.
		
		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.
		
		If two matching substrings appear next to each other, the result
		contains the empty String "" between them.
		
		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.
		
		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<matchSub public="1" set="method" line="59">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.
		
		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.matchSub(s.substr(pos,len))` can be used instead.
		
		This method modifies the internal state.
		
		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<matchedPos public="1" set="method" line="54">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.
		
		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.
		
		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchedRight public="1" set="method" line="47">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.
		
		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.
		
		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.
		
		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedLeft public="1" set="method" line="41">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.
		
		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.
		
		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.
		
		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matched public="1" set="method" line="37">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.
		
		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.
		
		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.
		
		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<match public="1" set="method" line="31">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.
		
		This method modifies the internal state.
		
		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<result><c path="+Array"/></result>
		<r><c path="flash.utils.RegExp"/></r>
		<new public="1" set="method" line="27">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.
		
		This is equivalent to the shorthand syntax `~/r/opt`
		
		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.
	
	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.
	
	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier
	
	EReg instances maintain an internal state, which is affected by several of
	its methods.
	
	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/lib/haxe/std/Enum.hx">
		<this><d/></this>
		<haxe_doc>An abstract type that represents an Enum type.
	
	The corresponding enum instance type is `EnumValue`.
	
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/lib/haxe/std/EnumValue.hx">
		<this><d/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="/usr/lib/haxe/std/IntIterator.hx">
		<next public="1" set="method" line="61">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.
		
		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<hasNext public="1" set="method" line="52">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<max><x path="Int"/></max>
		<min><x path="Int"/></min>
		<new public="1" set="method" line="44">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).
		
		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.
	
	It is usually not used explicitly, but through it's special syntax:
	`min...max`
		
	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/usr/lib/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="42" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.
		
		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="54" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.
		
		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="68" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new List by applying function `f` to all elements of `it`.
		
		The order of elements is preserved.
		
		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="82" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to `f`.
		
		The order of elements is preserved.
		
		If `f` is null, the result is unspecified.</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="98" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.
		
		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.
		
		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="115" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains an element for which `f` is true.
		
		This function returns true as soon as an element is found for which a
		call to `f` returns true.
		
		If no such element is found, the result is false.
		
		If `f` is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="134" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is true for all elements of `it`.
		
		This function returns false as soon as an element is found for which a
		call to `f` returns false.
		
		If no such element is found, the result is true.
		
		In particular, this function always returns true if `it` is empty.
		
		If `f` is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="146" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls `f` on all elements of `it`, in order.
		
		If `f` is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="159" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a List containing those elements of `it` for which `f` returned
		true.
		
		If `it` is empty, the result is the empty List even if `f` is null.
		
		Otherwise if `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="179" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable `it`, using function `f` with start argument
		`first`.
		
		If `it` has no elements, the result is `first`.
		
		Otherwise the first element of `it` is passed to `f` alongside `first`.
		The result of that call is then passed to `f` with the next element of
		`it`, and so on until `it` has no more elements.
		
		If `it` or `f` are null, the result is unspecified.</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="191" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.
		
		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="206" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable `it` does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="217" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.
		
		This function uses operator `==` to check for equality.
		
		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<concat public="1" params="T" set="method" line="233" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new List containing all elements of Iterable `a` followed by
		all elements of Iterable `b`.
		
		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.
	
	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.
	
	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="List" params="T" file="/usr/lib/haxe/std/List.hx">
		<map public="1" params="X" set="method" line="259">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<filter public="1" set="method" line="243">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<join public="1" set="method" line="224">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<toString public="1" set="method" line="203">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.
		
		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="161">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="138">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `v` in `this` List.
		
		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.
		
		Otherwise, false is returned.</haxe_doc>
		</remove>
		<clear public="1" set="method" line="124">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.
		
		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<isEmpty public="1" set="method" line="114">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<pop public="1" set="method" line="100">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.
		
		The element is removed from `this` List.</haxe_doc>
		</pop>
		<last public="1" set="method" line="90">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.
		
		This function does not modify `this` List.</haxe_doc>
		</last>
		<first public="1" set="method" line="81">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.
		
		This function does not modify `this` List.</haxe_doc>
		</first>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.
		
		`this.length` increases by 1.</haxe_doc>
		</push>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.
		
		`this.length` increases by 1.</haxe_doc>
		</add>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<q><c path="Array"><d/></c></q>
		<h><c path="Array"><d/></c></h>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
	</class>
	<abstract path="Map" params="K:V" file="/usr/lib/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="Map.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="Map.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="Map.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="Map.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.
		
	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.
	
	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.
	
	Maps can also be created with `key1 => value1, key2 => value2` syntax.
	
	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"/></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map">
	<_new public="1" set="method" static="1">
		<f a=""><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Map.
		
		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:
		
		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error
			
		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
	</_new>
	<set public="1" get="inline" set="null" line="70" static="1">
		<f a="this:key:value">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Maps `key` to `value`.
		
		If `key` already has a mapping, the previous value disappears.
		
		If `key` is null, the result is unspecified.</haxe_doc>
	</set>
	<get public="1" get="inline" set="null" line="87" static="1">
		<f a="this:key">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="Map.K"/>
			<t path="Null"><c path="Map.V"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Returns the current mapping of `key`.
		
		If no such mapping exists, null is returned.
		
		Note that a check like `map.get(key) == null` can hold for two reasons:
		
		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`
		
		If it is important to distinguish these cases, `exists()` should be 
		used.
		
		If `key` is null, the result is unspecified.</haxe_doc>
	</get>
	<exists public="1" get="inline" set="null" line="94" static="1">
		<f a="this:key">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns true if `key` has a mapping, false otherwise.
		
		If `key` is null, the result is unspecified.</haxe_doc>
	</exists>
	<remove public="1" get="inline" set="null" line="102" static="1">
		<f a="this:key">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="Map.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.
		
		If `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<keys public="1" get="inline" set="null" line="109" static="1">
		<f a="this">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<t path="Iterator"><c path="Map.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the keys of `this` Map.
		
		The order of keys is undefined.</haxe_doc>
	</keys>
	<iterator public="1" get="inline" set="null" line="118" static="1">
		<f a="this">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<t path="Iterator"><c path="Map.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns an Iterator over the values of `this` Map.
		
		The order of values is undefined.</haxe_doc>
	</iterator>
	<toString public="1" get="inline" set="null" line="127" static="1">
		<f a="this">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns a String representation of `this` Map.
		
		The exact representation depends on the platform and key-type.</haxe_doc>
	</toString>
	<arrayWrite public="1" get="inline" set="null" line="131" static="1">
		<f a="this:k:v">
			<c path="IMap">
				<c path="Map.K"/>
				<c path="Map.V"/>
			</c>
			<c path="Map.K"/>
			<c path="Map.V"/>
			<c path="Map.V"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
			<m n=":noCompletion"/>
		</meta>
	</arrayWrite>
	<toStringMap get="inline" set="null" line="136" static="1">
		<f a="t">
			<c path="IMap">
				<c path="String"/>
				<c path="Map.V"/>
			</c>
			<c path="haxe.ds.StringMap"><c path="Map.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toStringMap>
	<toIntMap get="inline" set="null" line="140" static="1">
		<f a="t">
			<c path="IMap">
				<x path="Int"/>
				<c path="Map.V"/>
			</c>
			<c path="haxe.ds.IntMap"><c path="Map.V"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toIntMap>
	<toEnumValueMapMap params="K" get="inline" set="null" line="144" static="1">
		<f a="t">
			<c path="IMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="Map.V"/>
			</c>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="Map.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toEnumValueMapMap>
	<toObjectMap params="K" get="inline" set="null" line="148" static="1">
		<f a="t">
			<c path="IMap">
				<c path="toObjectMap.K"/>
				<c path="Map.V"/>
			</c>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="Map.V"/>
			</c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toObjectMap>
	<fromStringMap params="V" get="inline" set="null" line="152" static="1">
		<f a="map">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<x path="Map">
				<c path="String"/>
				<c path="fromStringMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromStringMap>
	<fromIntMap params="V" get="inline" set="null" line="156" static="1">
		<f a="map">
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<x path="Map">
				<x path="Int"/>
				<c path="fromIntMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromIntMap>
	<fromObjectMap params="K:V" get="inline" set="null" line="160" static="1">
		<f a="map">
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
			<x path="Map">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromObjectMap>
</class></impl>
	</abstract>
	<class path="_Map.Map_Impl_" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map">
		<_new public="1" set="method" static="1">
			<f a=""><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Map.
		
		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:
		
		1. if K is a `String`, `haxe.ds.StringMap` is used
		2. if K is an `Int`, `haxe.ds.IntMap` is used
		3. if K is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if K is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if K is any other type, it causes a compile-time error
			
		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="70" static="1">
			<f a="this:key:value">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps `key` to `value`.
		
		If `key` already has a mapping, the previous value disappears.
		
		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="87" static="1">
			<f a="this:key">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<t path="Null"><c path="Map.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of `key`.
		
		If no such mapping exists, null is returned.
		
		Note that a check like `map.get(key) == null` can hold for two reasons:
		
		1. the map has no mapping for `key`
		2. the map has a mapping with a value of `null`
		
		If it is important to distinguish these cases, `exists()` should be 
		used.
		
		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="94" static="1">
			<f a="this:key">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if `key` has a mapping, false otherwise.
		
		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="102" static="1">
			<f a="this:key">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of `key` and returns true if such a mapping existed,
		false otherwise.
		
		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="109" static="1">
			<f a="this">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<t path="Iterator"><c path="Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of `this` Map.
		
		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="118" static="1">
			<f a="this">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<t path="Iterator"><c path="Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of `this` Map.
		
		The order of values is undefined.</haxe_doc>
		</iterator>
		<toString public="1" get="inline" set="null" line="127" static="1">
			<f a="this">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of `this` Map.
		
		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<arrayWrite public="1" get="inline" set="null" line="131" static="1">
			<f a="this:k:v">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<c path="Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap get="inline" set="null" line="136" static="1">
			<f a="t">
				<c path="IMap">
					<c path="String"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.StringMap"><c path="Map.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap get="inline" set="null" line="140" static="1">
			<f a="t">
				<c path="IMap">
					<x path="Int"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.IntMap"><c path="Map.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K" get="inline" set="null" line="144" static="1">
			<f a="t">
				<c path="IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="Map.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K" get="inline" set="null" line="148" static="1">
			<f a="t">
				<c path="IMap">
					<c path="toObjectMap.K"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="Map.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="152" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="156" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="160" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
	</class>
	<class path="IMap" params="K:V" file="/usr/lib/haxe/std/Map.hx" module="Map" interface="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="IMap.V"/></t></f></iterator>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="IMap.K"/></t></f></keys>
		<remove public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<exists public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<set public="1" set="method"><f a="k:v">
	<c path="IMap.K"/>
	<c path="IMap.V"/>
	<x path="Void"/>
</f></set>
		<get public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<t path="Null"><c path="IMap.V"/></t>
</f></get>
	</class>
	<typedef path="_Map.Hashable" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="/usr/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.
		
		For example, this is the result of -1.0 / 0.0.
		
		Operations with NEGATIVE_INFINITY as an operand may result in
		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...
		
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.
		
		For example, this is the result of 1.0 / 0.0.
		
		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...
	
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.
		
		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).
		
		All further operations with NaN as an operand will result in NaN.
		
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.
		
		In order to test if a value is NaN, you should use Math.isNaN() function.
		
		(Php) In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, see:
			https://bugs.php.net/bug.php?id=42143</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.
		
		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.
		
		If `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is
		POSITIVE_INFINITY.
		
		If `v` is NaN, the result is NaN.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.
		
		If `a` or `b` are NaN, the result is NaN.
		
		If `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
		
		If `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.
		
		If `a` or `b` are NaN, the result is NaN.
		
		If `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of `v`.
		
		The unit of `v` is radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of `v`.
		
		The unit of `v` is radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.
		
		exp(1.0) is approximately 2.718281828459.
		
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If `v` is NEGATIVE_INFINITY, the result is 0.0.
		
		If `v` is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result is
		NaN.
		
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If `v` is 0.0, the result is NEGATIVE_INFINITY.
		
		This is the inverse operation of exp, i.e. log(exp(v)) == v always
		holds.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result is
		NaN.
		
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If `v` is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest Int value.

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.
		
		TODO: need spec</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest Int value that is not greater than `v`.
		
		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.		
		
		TODO: need spec</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest Int value that is not less than `v`.

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.
		
		TODO: need spec</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.
		
		If `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result is
		false.
		
		Otherwise the result is true.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.
		
		If `f` is NaN, the result is true.
		
		Otherwise the result is false. In particular, both POSITIVE_INFINITY and
		NEGATIVE_INFINITY are not considered NaN.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
	</class>
	<class path="Reflect" params="" file="/usr/lib/haxe/std/flash/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.
		
		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.
		
		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.
		
		If `o` is not an object or has no field named `field`, the result is
		null.
		
		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.
		
		If `field` is null, the result is unspecified.
		
		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="33" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.
		
		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.
		
		If `o` or `field` are null, the result is unspecified.
		
		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.
		
		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.
		
		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="47" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.
		
		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.
		
		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="55" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="59" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.
		
		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.
		
		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="82" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.
		
		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="86" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.
		
		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.
		
		This function is only defined if `a` and `b` are of the same type.
		
		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.
		
		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:
		
		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified
		
		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="92" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.
		
		If `f1` or `f2` are not functions, the result is unspecified.
		
		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="96" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.
		
		The result is true if `v` is one of the following:
			
		- class instance
		- structure
		- Class<T>
		- Enum<T>
			
		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="106" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.
		
		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.
		
		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="114" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.
		
		This method is only guaranteed to work on anonymous structures.
		
		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="120" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.
		
		This is only guaranteed to work on anonymous structures.
		
		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="128" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="Std" params="" file="/usr/lib/haxe/std/flash/_std/Std.hx">
		<is public="1" set="method" line="26" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="30" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="34" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="38" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="45" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="49" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Void" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.
	
	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.
	
	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="UInt" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Int"/></icast></from>
		<this><d/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>The unsigned Int type is only defined for Flash9. It's currently
	handled the same as a normal Int.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.
	
	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><d/></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.
	
	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.
		
		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.
		
		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="/usr/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.
		
		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to `endIndex`.
		
		If `startIndex` or `endIndex` are negative, 0 is used instead.
		
		If `startIndex` exceeds `endIndex`, they are swapped.
		
		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.
		
		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.
		
		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.
		
		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.
		
		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.
		
		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.
		
		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.
		
		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.
		
		If `delimiter` is null, the result is unspecified.
		
		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.
		
		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.
		
		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.
		
		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.
		
		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.
		
		If `index` is negative or exceeds `this.length`, null is returned.
		
		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.
		
		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.
		
		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.
		
		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.
	
	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.
	
	Strings can be constructed using the string literal syntax "string value".
	
	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="/usr/lib/haxe/std/StringBuf.hx">
		<toString public="1" get="inline" set="null" line="97">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.
		
		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<addSub public="1" get="inline" set="null" line="88">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of `s` to `this` StringBuf.
		
		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.add(s.substr(pos,len))` can be used instead.
		
		If `s` or `pos` are null, the result is unspecified.
		
		If `len` is omitted or null, the substring ranges from `pos` to the end
		of `s`.</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="72">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.
		
		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<add public="1" get="inline" set="null" line="62">
			<f a="x">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.
		
		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).
		
		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<get_length get="inline" set="null" line="49"><f a=""><x path="Int"/></f></get_length>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<b><c path="String"/></b>
		<new public="1" set="method" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.
		
		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.
	
	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.
	
	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
	</class>
	<class path="StringTools" params="" file="/usr/lib/haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="37" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="62" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="98" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:
			
		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;
		
		If `quotes` is true, the following characters are also replaced:
		
		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="117" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: htmlUnescape(htmlEscape(s)) == s

		The replacements follow:
			
		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="128" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is null, the result is unspecified.

		If `start` is the empty String "", the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="145" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is null, the result is unspecified.

		If `end` is the empty String "", the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="166" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String "", or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="180" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="205" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="227" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for ltrim(rtrim(s)).</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="249" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="271" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="292" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String "", `by` is inserted after each character
		of `s`. If `by` is also the empty String "", `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="314" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its length equals `digits`.</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="343" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position `index` of String `s`.

		This method is faster than String.charCodeAt() on most platforms.
		However, unlike String.charCodeAt(), the result is unspecified if
		`index` is negative or exceeds `s.length`.

		This operation is not guaranteed to work if `s` contains the \0
		character.</haxe_doc>
		</fastCodeAt>
		<isEof public="1" get="inline" set="null" line="370" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isEof>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="/usr/lib/haxe/std/flash/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="/usr/lib/haxe/std/flash/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.
		
		If `o` is null or of a different type, null is returned.
		
		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="48" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.
		
		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.
		
		If `o` is null, null is returned.
		
		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="62" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.
		
		If `c` has no super class, null is returned.
		
		If `c` is null, the result is unspecified.
		
		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="69" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.
		
		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If `c` has no package, the class name is returned.
		
		If `c` is null, the result is unspecified.
		
		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="85" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.
		
		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If `e` has no package, the enum name is returned.
		
		If `e` is null, the result is unspecified.
		
		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="89" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.
		
		If `name` is the path of an existing class, that class is returned.
		
		Otherwise null is returned.
		
		If `name` is null or the path to a different type, the result is
		unspecified.
		
		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="113" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.
		
		If `name` is the path of an existing enum, that enum is returned.
		
		Otherwise null is returned.
		
		If `name` is null the result is unspecified.
		
		If `name` is the path to a different type, null is returned.
		
		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="130" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.
		
		This function guarantees that the class constructor is called.
		
		Default values of constructors arguments are not guaranteed to be
		taken into account.
		
		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.
		
		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="151" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.
		
		This function guarantees that the class constructor is not called.
		
		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="164" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="176" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.
		
		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<describe set="method" line="182" static="1"><f a="t:fact">
	<d/>
	<x path="Bool"/>
	<c path="Array"><c path="String"/></c>
</f></describe>
		<getInstanceFields public="1" set="method" line="199" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.
		
		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.
		
		The order of the fields in the returned Array is unspecified.
		
		If `c` is null, the result is unspecified.
		
		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="203" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.
		
		This does not include static fields of parent classes.
		
		The order of the fields in the returned Array is unspecified.
		
		If `c` is null, the result is unspecified.
		
		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="210" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.
		
		The order of the constructor names in the returned Array is preserved
		from the original syntax.
		
		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="215" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.
		
		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="247" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.
		
		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.
		
		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="264" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.
		
		The result String does not contain any constructor arguments.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="268" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.
		
		If `e` has no arguments, the result is [].
		
		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="272" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.
		
		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="276" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.
		
		This may return the empty Array [] if all constructors of `e` require
		arguments.
		
		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.
	
	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="XmlType" params="" file="/usr/lib/haxe/std/flash/_std/Xml.hx" module="Xml"/>
	<class path="Xml" params="" file="/usr/lib/haxe/std/flash/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="45" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parse a String into an Xml object.</haxe_doc>
		</parse>
		<compare set="method" line="67" static="1">
			<f a="a:b">
				<c path="Xml"/>
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</compare>
		<createElement public="1" set="method" line="73" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="77" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="82" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="86" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="91" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="95" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="100" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<getNodeType set="method" line="104" static="1"><f a="node">
	<c path="flash.xml.XML"/>
	<e path="XmlType"/>
</f></getNodeType>
		<wrap set="method" line="180" static="1"><f a="node:?type">
	<c path="flash.xml.XML"/>
	<e path="XmlType"/>
	<c path="Xml"/>
</f></wrap>
		<toString public="1" set="method" line="389">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<insertChild public="1" set="method" line="377">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.</haxe_doc>
		</insertChild>
		<removeChild public="1" set="method" line="366">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<addChild public="1" set="method" line="357">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.</haxe_doc>
		</addChild>
		<firstElement public="1" set="method" line="348">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<firstChild public="1" set="method" line="339">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<elementsNamed public="1" set="method" line="314">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<elements public="1" set="method" line="298">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<iterator public="1" set="method" line="282">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<attributes public="1" set="method" line="266">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an [Iterator] on all the attribute names.</haxe_doc>
		</attributes>
		<exists public="1" set="method" line="255">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<remove public="1" set="method" line="245">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<set public="1" set="method" line="224">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<get public="1" set="method" line="207">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<getAttribNS set="method" line="194"><f a="cur:ns">
	<c path="flash.xml.XML"/>
	<c path="Array"><c path="String"/></c>
	<c path="flash.xml.XMLList"/>
</f></getAttribNS>
		<wraps set="method" line="187"><f a="xList">
	<c path="flash.xml.XMLList"/>
	<c path="Array"><c path="Xml"/></c>
</f></wraps>
		<get_parent set="method" line="175"><f a=""><c path="Xml"/></f></get_parent>
		<set_nodeValue set="method" line="149"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<get_nodeValue set="method" line="140"><f a=""><c path="String"/></f></get_nodeValue>
		<set_nodeName set="method" line="127"><f a="n">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<get_nodeName set="method" line="120"><f a=""><c path="String"/></f></get_nodeName>
		<_node><c path="flash.xml.XML"/></_node>
		<parent public="1" get="accessor" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.</haxe_doc>
		</parent>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<new set="method" line="71"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="flash.events.IEventDispatcher" params="" file="/usr/lib/haxe/std/flash/events/IEventDispatcher.hx" extern="1" interface="1">
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="/usr/lib/haxe/std/flash/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="/usr/lib/haxe/std/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.DisplayObject" params="" file="/usr/lib/haxe/std/flash/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
		<local3DToGlobal public="1" set="method">
			<f a="point3d">
				<c path="flash.geom.Vector3D"/>
				<c path="flash.geom.Point"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</local3DToGlobal>
		<hitTestPoint public="1" set="method"><f a="x:y:?shapeFlag">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></hitTestPoint>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></hitTestObject>
		<globalToLocal3D public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Vector3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</globalToLocal3D>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<z public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</z>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<width public="1"><x path="Float"/></width>
		<visible public="1"><x path="Bool"/></visible>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<stage public="1" set="null"><c path="flash.display.Stage"/></stage>
		<scrollRect public="1"><c path="flash.geom.Rectangle"/></scrollRect>
		<scaleZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</scaleZ>
		<scaleY public="1"><x path="Float"/></scaleY>
		<scaleX public="1"><x path="Float"/></scaleX>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"/></scale9Grid>
		<rotationZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationZ>
		<rotationY public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationY>
		<rotationX public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationX>
		<rotation public="1"><x path="Float"/></rotation>
		<root public="1" set="null"><c path="flash.display.DisplayObject"/></root>
		<parent public="1" set="null"><c path="flash.display.DisplayObjectContainer"/></parent>
		<opaqueBackground public="1"><t path="Null"><x path="UInt"/></t></opaqueBackground>
		<name public="1"><c path="String"/></name>
		<mouseY public="1" set="null"><x path="Float"/></mouseY>
		<mouseX public="1" set="null"><x path="Float"/></mouseX>
		<mask public="1"><c path="flash.display.DisplayObject"/></mask>
		<loaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></loaderInfo>
		<height public="1"><x path="Float"/></height>
		<filters public="1"><c path="Array"><c path="flash.filters.BitmapFilter"/></c></filters>
		<cacheAsBitmap public="1"><x path="Bool"/></cacheAsBitmap>
		<blendShader public="1" get="null">
			<c path="flash.display.Shader"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</blendShader>
		<blendMode public="1"><e path="flash.display.BlendMode"/></blendMode>
		<alpha public="1"><x path="Float"/></alpha>
		<accessibilityProperties public="1"><c path="flash.accessibility.AccessibilityProperties"/></accessibilityProperties>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="/usr/lib/haxe/std/flash/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<requestSoftKeyboard public="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestSoftKeyboard>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<tabEnabled public="1"><x path="Bool"/></tabEnabled>
		<softKeyboardInputAreaOfInterest public="1">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardInputAreaOfInterest>
		<needsSoftKeyboard public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</needsSoftKeyboard>
		<mouseEnabled public="1"><x path="Bool"/></mouseEnabled>
		<focusRect public="1"><d/></focusRect>
		<doubleClickEnabled public="1"><x path="Bool"/></doubleClickEnabled>
		<contextMenu public="1"><c path="flash.ui.ContextMenu"/></contextMenu>
		<accessibilityImplementation public="1"><c path="flash.accessibility.AccessibilityImplementation"/></accessibilityImplementation>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="/usr/lib/haxe/std/flash/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapChildrenAt>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></swapChildren>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<removeChildren public="1">
			<f a="?beginIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</removeChildren>
		<removeChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
</f></getChildIndex>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<textSnapshot public="1" set="null"><c path="flash.text.TextSnapshot"/></textSnapshot>
		<tabChildren public="1"><x path="Bool"/></tabChildren>
		<numChildren public="1" set="null"><x path="Int"/></numChildren>
		<mouseChildren public="1"><x path="Bool"/></mouseChildren>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.Sprite" params="" file="/usr/lib/haxe/std/flash/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<stopTouchDrag public="1">
			<f a="touchPointID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</stopTouchDrag>
		<stopDrag public="1" set="method"><f a=""><x path="Void"/></f></stopDrag>
		<startTouchDrag public="1">
			<f a="touchPointID:?lockCenter:?bounds">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</startTouchDrag>
		<startDrag public="1" set="method"><f a="?lockCenter:?bounds">
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></startDrag>
		<useHandCursor public="1"><x path="Bool"/></useHandCursor>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<hitArea public="1"><c path="flash.display.Sprite"/></hitArea>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<dropTarget public="1" set="null"><c path="flash.display.DisplayObject"/></dropTarget>
		<buttonMode public="1"><x path="Bool"/></buttonMode>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.MovieClip" params="" file="/usr/lib/haxe/std/flash/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<prevScene public="1" set="method"><f a=""><x path="Void"/></f></prevScene>
		<prevFrame public="1" set="method"><f a=""><x path="Void"/></f></prevFrame>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<nextScene public="1" set="method"><f a=""><x path="Void"/></f></nextScene>
		<nextFrame public="1" set="method"><f a=""><x path="Void"/></f></nextFrame>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndStop>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndPlay>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></addFrameScript>
		<trackAsMenu public="1"><x path="Bool"/></trackAsMenu>
		<totalFrames public="1" set="null"><x path="Int"/></totalFrames>
		<scenes public="1" set="null"><c path="Array"><c path="flash.display.Scene"/></c></scenes>
		<isPlaying public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</isPlaying>
		<framesLoaded public="1" set="null"><x path="Int"/></framesLoaded>
		<enabled public="1"><x path="Bool"/></enabled>
		<currentScene public="1" set="null"><c path="flash.display.Scene"/></currentScene>
		<currentLabels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></currentLabels>
		<currentLabel public="1" set="null"><c path="String"/></currentLabel>
		<currentFrameLabel public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</currentFrameLabel>
		<currentFrame public="1" set="null"><x path="Int"/></currentFrame>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Boot" params="" file="/usr/lib/haxe/std/flash/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1"><c path="flash.text.TextField"/></tf>
		<lines static="1"><c path="Array"><c path="String"/></c></lines>
		<lastError static="1"><c path="flash.errors.Error"/></lastError>
		<skip_constructor public="1" line="51" static="1"><x path="Bool"/></skip_constructor>
		<enum_to_string public="1" set="method" line="83" static="1"><f a="e">
	<a>
		<tag><c path="String"/></tag>
		<params><c path="Array"><d/></c></params>
	</a>
	<c path="String"/>
</f></enum_to_string>
		<__instanceof public="1" set="method" line="92" static="1"><f a="v:t">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__instanceof>
		<__clear_trace public="1" set="method" line="102" static="1"><f a=""><x path="Void"/></f></__clear_trace>
		<__set_trace_color public="1" set="method" line="110" static="1"><f a="rgb">
	<x path="UInt"/>
	<x path="Void"/>
</f></__set_trace_color>
		<getTrace public="1" set="method" line="116" static="1"><f a=""><c path="flash.text.TextField"/></f></getTrace>
		<__trace public="1" set="method" line="144" static="1"><f a="v:pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></__trace>
		<__string_rec public="1" set="method" line="163" static="1"><f a="v:str">
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></__string_rec>
		<__unprotect__ set="method" line="208" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unprotect__>
		<init set="method" line="79"><f a=""><x path="Void"/></f></init>
		<doInitDelay set="method" line="74"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></doInitDelay>
		<start set="method" line="53"><f a=""><x path="Void"/></f></start>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="/usr/lib/haxe/std/flash/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<new set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Lib" params="" file="/usr/lib/haxe/std/flash/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<getTimer public="1" get="inline" set="null" line="28" static="1"><f a=""><x path="Int"/></f></getTimer>
		<eval public="1" set="method" line="32" static="1"><f a="path">
	<c path="String"/>
	<d/>
</f></eval>
		<getURL public="1" set="method" line="52" static="1"><f a="url:?target">
	<c path="flash.net.URLRequest"/>
	<c path="String"/>
	<x path="Void"/>
</f></getURL>
		<fscommand public="1" set="method" line="60" static="1"><f a="cmd:?param">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></fscommand>
		<trace public="1" set="method" line="64" static="1"><f a="arg">
	<d/>
	<x path="Void"/>
</f></trace>
		<attach public="1" set="method" line="68" static="1"><f a="name">
	<c path="String"/>
	<c path="flash.display.MovieClip"/>
</f></attach>
		<as public="1" params="T" get="inline" set="null" line="73" static="1"><f a="v:c">
	<d/>
	<x path="Class"><c path="as.T"/></x>
	<t path="Null"><c path="as.T"/></t>
</f></as>
		<redirectTraces public="1" set="method" line="77" static="1"><f a=""><x path="Void"/></f></redirectTraces>
		<traceToConsole set="method" line="82" static="1"><f a="v:?inf">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></traceToConsole>
	</class>
	<class path="flash.Vector" params="T" file="/usr/lib/haxe/std/flash/Vector.hx" extern="1">
		<ofArray public="1" params="T" get="inline" set="null" line="47" static="1"><f a="v">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="flash.Vector"><c path="ofArray.T"/></c>
</f></ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="51" static="1"><f a="v">
	<c path="flash.Vector"><c path="convert.T"/></c>
	<c path="flash.Vector"><c path="convert.U"/></c>
</f></convert>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<slice public="1" set="method"><f a="?pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></unshift>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></shift>
		<reverse public="1" set="method"><f a=""><x path="Void"/></f></reverse>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
</f></push>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></pop>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<fixed public="1"><x path="Bool"/></fixed>
		<length public="1"><x path="Int"/></length>
		<new public="1" set="method"><f a="?length:?fixed">
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="/usr/lib/haxe/std/flash/accessibility/AccessibilityImplementation.hx" extern="1">
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></isLabeledBy>
		<get_selectionAnchorIndex public="1" set="method"><f a=""><d/></f></get_selectionAnchorIndex>
		<get_selectionActiveIndex public="1" set="method"><f a=""><d/></f></get_selectionActiveIndex>
		<get_accValue public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<get_accState public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accState>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accRole public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accRole>
		<get_accName public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accFocus public="1" set="method"><f a=""><x path="UInt"/></f></get_accFocus>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<accSelect public="1" set="method"><f a="operation:childID">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></accSelect>
		<accLocation public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<d/>
</f></accLocation>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="Void"/>
</f></accDoDefaultAction>
		<stub public="1"><x path="Bool"/></stub>
		<errno public="1"><x path="UInt"/></errno>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="/usr/lib/haxe/std/flash/accessibility/AccessibilityProperties.hx" extern="1">
		<silent public="1"><x path="Bool"/></silent>
		<shortcut public="1"><c path="String"/></shortcut>
		<noAutoLabeling public="1"><x path="Bool"/></noAutoLabeling>
		<name public="1"><c path="String"/></name>
		<forceSimple public="1"><x path="Bool"/></forceSimple>
		<description public="1"><c path="String"/></description>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.display.ActionScriptVersion" params="" file="/usr/lib/haxe/std/flash/display/ActionScriptVersion.hx">
		<ACTIONSCRIPT2/>
		<ACTIONSCRIPT3/>
		<meta><m n=":fakeEnum"><e>UInt</e></m></meta>
	</enum>
	<class path="flash.display.BitmapData" params="" file="/usr/lib/haxe/std/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></unlock>
		<threshold public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="String"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="UInt"/>
</f></threshold>
		<setVector public="1" set="method">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</setVector>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setPixels>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixel public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel>
		<scroll public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<pixelDissolve public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Int"/>
</f></pixelDissolve>
		<perlinNoise public="1" set="method"><f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets">
	<x path="Float"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<c path="Array"><c path="flash.geom.Point"/></c>
	<x path="Void"/>
</f></perlinNoise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></paletteMap>
		<noise public="1" set="method"><f a="randomSeed:?low:?high:?channelOptions:?grayScale">
	<x path="Int"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></noise>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></merge>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<hitTest public="1" set="method"><f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold">
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<t path="flash.utils.Object"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="Bool"/>
</f></hitTest>
		<histogram public="1" set="method">
			<f a="?hRect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><c path="flash.Vector"><x path="Float"/></c></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</histogram>
		<getVector public="1" set="method">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getVector>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getPixel32 public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel32>
		<getPixel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel>
		<getColorBoundsRect public="1" set="method"><f a="mask:color:?findColor">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
</f></getColorBoundsRect>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></floodFill>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></fillRect>
		<encode public="1">
			<f a="rect:compressor:?byteArray">
				<c path="flash.geom.Rectangle"/>
				<t path="flash.utils.Object"/>
				<c path="flash.utils.ByteArray"/>
				<c path="flash.utils.ByteArray"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</encode>
		<drawWithQuality public="1">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing:?quality">
				<c path="flash.display.IBitmapDrawable"/>
				<c path="flash.geom.Matrix"/>
				<c path="flash.geom.ColorTransform"/>
				<e path="flash.display.BlendMode"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Bool"/>
				<e path="flash.display.StageQuality"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</drawWithQuality>
		<draw public="1" set="method"><f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
	<c path="flash.display.IBitmapDrawable"/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<e path="flash.display.BlendMode"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></draw>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<copyPixelsToByteArray public="1">
			<f a="rect:data">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyPixelsToByteArray>
		<copyPixels public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></copyPixels>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></copyChannel>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<t path="flash.utils.Object"/>
</f></compare>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Void"/>
</f></applyFilter>
		<width public="1" set="null"><x path="Int"/></width>
		<transparent public="1" set="null"><x path="Bool"/></transparent>
		<rect public="1" set="null"><c path="flash.geom.Rectangle"/></rect>
		<height public="1" set="null"><x path="Int"/></height>
		<new public="1" set="method"><f a="width:height:?transparent:?fillColor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.BlendMode" params="" file="/usr/lib/haxe/std/flash/display/BlendMode.hx">
		<ADD/>
		<ALPHA/>
		<DARKEN/>
		<DIFFERENCE/>
		<ERASE/>
		<HARDLIGHT/>
		<INVERT/>
		<LAYER/>
		<LIGHTEN/>
		<MULTIPLY/>
		<NORMAL/>
		<OVERLAY/>
		<SCREEN/>
		<SHADER/>
		<SUBTRACT/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.CapsStyle" params="" file="/usr/lib/haxe/std/flash/display/CapsStyle.hx">
		<NONE/>
		<ROUND/>
		<SQUARE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.ColorCorrection" params="" file="/usr/lib/haxe/std/flash/display/ColorCorrection.hx">
		<DEFAULT/>
		<OFF/>
		<ON/>
		<meta>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrectionSupport" params="" file="/usr/lib/haxe/std/flash/display/ColorCorrectionSupport.hx">
		<DEFAULT_OFF/>
		<DEFAULT_ON/>
		<UNSUPPORTED/>
		<meta>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<class path="flash.display.FrameLabel" params="" file="/usr/lib/haxe/std/flash/display/FrameLabel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<name public="1" set="null"><c path="String"/></name>
		<frame public="1" set="null"><x path="Int"/></frame>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GradientType" params="" file="/usr/lib/haxe/std/flash/display/GradientType.hx">
		<LINEAR/>
		<RADIAL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.Graphics" params="" file="/usr/lib/haxe/std/flash/display/Graphics.hx" extern="1">
		<readGraphicsData public="1">
			<f a="?recurse">
				<x path="Bool"/>
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
			</f>
			<meta><m n=":require"><e>flash11_6</e></m></meta>
		</readGraphicsData>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<lineStyle public="1" set="method"><f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Bool"/>
	<e path="flash.display.LineScaleMode"/>
	<e path="flash.display.CapsStyle"/>
	<e path="flash.display.JointStyle"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineStyle>
		<lineShaderStyle public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineShaderStyle>
		<lineGradientStyle public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><x path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineGradientStyle>
		<lineBitmapStyle public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineBitmapStyle>
		<endFill public="1" set="method"><f a=""><x path="Void"/></f></endFill>
		<drawTriangles public="1" set="method">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><x path="Float"/></c>
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.TriangleCulling"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawTriangles>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRectComplex>
		<drawRoundRect public="1" set="method"><f a="x:y:width:height:ellipseWidth:?ellipseHeight">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRect>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRect>
		<drawPath public="1" set="method">
			<f a="commands:data:?winding">
				<c path="flash.Vector"><x path="Int"/></c>
				<c path="flash.Vector"><x path="Float"/></c>
				<e path="flash.display.GraphicsPathWinding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawPath>
		<drawGraphicsData public="1" set="method">
			<f a="graphicsData">
				<c path="flash.Vector"><c path="flash.display.IGraphicsData"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawGraphicsData>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawEllipse>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCircle>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<cubicCurveTo public="1">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<copyFrom public="1" set="method">
			<f a="sourceGraphics">
				<c path="flash.display.Graphics"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</copyFrom>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<beginShaderFill public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</beginShaderFill>
		<beginGradientFill public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><x path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginGradientFill>
		<beginFill public="1" set="method"><f a="color:?alpha">
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginFill>
		<beginBitmapFill public="1" set="method"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></beginBitmapFill>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GraphicsPathWinding" params="" file="/usr/lib/haxe/std/flash/display/GraphicsPathWinding.hx">
		<EVEN_ODD/>
		<NON_ZERO/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.IGraphicsData" params="" file="/usr/lib/haxe/std/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<enum path="flash.display.InterpolationMethod" params="" file="/usr/lib/haxe/std/flash/display/InterpolationMethod.hx">
		<LINEAR_RGB/>
		<RGB/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.JointStyle" params="" file="/usr/lib/haxe/std/flash/display/JointStyle.hx">
		<BEVEL/>
		<MITER/>
		<ROUND/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.LineScaleMode" params="" file="/usr/lib/haxe/std/flash/display/LineScaleMode.hx">
		<HORIZONTAL/>
		<NONE/>
		<NORMAL/>
		<VERTICAL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.Loader" params="" file="/usr/lib/haxe/std/flash/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<unloadAndStop public="1" set="method">
			<f a="?gc">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unloadAndStop>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></loadBytes>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></load>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<uncaughtErrorEvents public="1">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<contentLoaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></contentLoaderInfo>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="/usr/lib/haxe/std/flash/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<width public="1" set="null"><x path="Int"/></width>
		<url public="1" set="null"><c path="String"/></url>
		<uncaughtErrorEvents public="1">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<swfVersion public="1" set="null"><x path="UInt"/></swfVersion>
		<sharedEvents public="1" set="null"><c path="flash.events.EventDispatcher"/></sharedEvents>
		<sameDomain public="1" set="null"><x path="Bool"/></sameDomain>
		<parentSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</parentSandboxBridge>
		<parentAllowsChild public="1" set="null"><x path="Bool"/></parentAllowsChild>
		<parameters public="1" set="null"><d><c path="String"/></d></parameters>
		<loaderURL public="1" set="null"><c path="String"/></loaderURL>
		<loader public="1" set="null"><c path="flash.display.Loader"/></loader>
		<isURLInaccessible public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isURLInaccessible>
		<height public="1" set="null"><x path="Int"/></height>
		<frameRate public="1" set="null"><x path="Float"/></frameRate>
		<contentType public="1" set="null"><c path="String"/></contentType>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<childSandboxBridge public="1">
			<d/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</childSandboxBridge>
		<childAllowsParent public="1" set="null"><x path="Bool"/></childAllowsParent>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytes public="1" set="null"><c path="flash.utils.ByteArray"/></bytes>
		<applicationDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<actionScriptVersion public="1" set="null"><e path="flash.display.ActionScriptVersion"/></actionScriptVersion>
	</class>
	<class path="flash.display.NativeMenu" params="" file="/usr/lib/haxe/std/flash/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.display.Scene" params="" file="/usr/lib/haxe/std/flash/display/Scene.hx" extern="1">
		<numFrames public="1" set="null"><x path="Int"/></numFrames>
		<name public="1" set="null"><c path="String"/></name>
		<labels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></labels>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.Shader" params="" file="/usr/lib/haxe/std/flash/display/Shader.hx" extern="1">
		<precisionHint public="1"><e path="flash.display.ShaderPrecision"/></precisionHint>
		<data public="1"><c path="flash.display.ShaderData"/></data>
		<byteCode public="1" get="null"><c path="flash.utils.ByteArray"/></byteCode>
		<new public="1" set="method"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.ShaderData" params="" file="/usr/lib/haxe/std/flash/display/ShaderData.hx" extern="1">
		<new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.display.ShaderPrecision" params="" file="/usr/lib/haxe/std/flash/display/ShaderPrecision.hx">
		<FAST/>
		<FULL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.SpreadMethod" params="" file="/usr/lib/haxe/std/flash/display/SpreadMethod.hx">
		<PAD/>
		<REFLECT/>
		<REPEAT/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display.Stage" params="" file="/usr/lib/haxe/std/flash/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<isFocusInaccessible public="1" set="method"><f a=""><x path="Bool"/></f></isFocusInaccessible>
		<invalidate public="1" set="method"><f a=""><x path="Void"/></f></invalidate>
		<wmodeGPU public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</wmodeGPU>
		<stageWidth public="1"><x path="Int"/></stageWidth>
		<stageVideos public="1">
			<c path="flash.Vector"><c path="flash.media.StageVideo"/></c>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</stageVideos>
		<stageHeight public="1"><x path="Int"/></stageHeight>
		<stageFocusRect public="1"><x path="Bool"/></stageFocusRect>
		<stage3Ds public="1">
			<c path="flash.Vector"><c path="flash.display.Stage3D"/></c>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</stage3Ds>
		<softKeyboardRect public="1">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardRect>
		<showDefaultContextMenu public="1"><x path="Bool"/></showDefaultContextMenu>
		<scaleMode public="1"><e path="flash.display.StageScaleMode"/></scaleMode>
		<quality public="1"><e path="flash.display.StageQuality"/></quality>
		<mouseLock public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</mouseLock>
		<fullScreenWidth public="1" set="null"><x path="UInt"/></fullScreenWidth>
		<fullScreenSourceRect public="1"><c path="flash.geom.Rectangle"/></fullScreenSourceRect>
		<fullScreenHeight public="1" set="null"><x path="UInt"/></fullScreenHeight>
		<frameRate public="1"><x path="Float"/></frameRate>
		<focus public="1"><c path="flash.display.InteractiveObject"/></focus>
		<displayState public="1"><e path="flash.display.StageDisplayState"/></displayState>
		<displayContextInfo public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</displayContextInfo>
		<contentsScaleFactor public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</contentsScaleFactor>
		<colorCorrectionSupport public="1" set="null">
			<e path="flash.display.ColorCorrectionSupport"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrectionSupport>
		<colorCorrection public="1">
			<e path="flash.display.ColorCorrection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrection>
		<color public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</color>
		<allowsFullScreenInteractive public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</allowsFullScreenInteractive>
		<allowsFullScreen public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</allowsFullScreen>
		<align public="1"><e path="flash.display.StageAlign"/></align>
	</class>
	<class path="flash.display.Stage3D" params="" file="/usr/lib/haxe/std/flash/display/Stage3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<requestContext3D public="1" set="method"><f a="?context3DRenderMode:?profile">
	<c path="String"/>
	<e path="flash.display3D.Context3DProfile"/>
	<x path="Void"/>
</f></requestContext3D>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<visible public="1"><x path="Bool"/></visible>
		<context3D public="1" set="null"><c path="flash.display3D.Context3D"/></context3D>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<enum path="flash.display.StageAlign" params="" file="/usr/lib/haxe/std/flash/display/StageAlign.hx">
		<BOTTOM/>
		<BOTTOM_LEFT/>
		<BOTTOM_RIGHT/>
		<LEFT/>
		<RIGHT/>
		<TOP/>
		<TOP_LEFT/>
		<TOP_RIGHT/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.StageDisplayState" params="" file="/usr/lib/haxe/std/flash/display/StageDisplayState.hx">
		<FULL_SCREEN/>
		<FULL_SCREEN_INTERACTIVE/>
		<NORMAL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.StageQuality" params="" file="/usr/lib/haxe/std/flash/display/StageQuality.hx">
		<BEST/>
		<HIGH/>
		<HIGH_16X16/>
		<HIGH_16X16_LINEAR/>
		<HIGH_8X8/>
		<HIGH_8X8_LINEAR/>
		<LOW/>
		<MEDIUM/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.StageScaleMode" params="" file="/usr/lib/haxe/std/flash/display/StageScaleMode.hx">
		<EXACT_FIT/>
		<NO_BORDER/>
		<NO_SCALE/>
		<SHOW_ALL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display.TriangleCulling" params="" file="/usr/lib/haxe/std/flash/display/TriangleCulling.hx">
		<NEGATIVE/>
		<NONE/>
		<POSITIVE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display3D.Context3D" params="" file="/usr/lib/haxe/std/flash/display3D/Context3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<setVertexBufferAt public="1" set="method"><f a="index:buffer:?bufferOffset:?format">
	<x path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
	<x path="Int"/>
	<e path="flash.display3D.Context3DVertexBufferFormat"/>
	<x path="Void"/>
</f></setVertexBufferAt>
		<setTextureAt public="1" set="method"><f a="sampler:texture">
	<x path="Int"/>
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Void"/>
</f></setTextureAt>
		<setStencilReferenceValue public="1" set="method"><f a="referenceValue:?readMask:?writeMask">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setStencilReferenceValue>
		<setStencilActions public="1" set="method"><f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<x path="Void"/>
</f></setStencilActions>
		<setScissorRectangle public="1" set="method"><f a="rectangle">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></setScissorRectangle>
		<setSamplerStateAt public="1">
			<f a="sampler:wrap:filter:mipfilter">
				<x path="Int"/>
				<e path="flash.display3D.Context3DWrapMode"/>
				<e path="flash.display3D.Context3DTextureFilter"/>
				<e path="flash.display3D.Context3DMipFilter"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_6</e></m></meta>
		</setSamplerStateAt>
		<setRenderToTexture public="1" set="method"><f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector">
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setRenderToTexture>
		<setRenderToBackBuffer public="1" set="method"><f a=""><x path="Void"/></f></setRenderToBackBuffer>
		<setProgramConstantsFromVector public="1" set="method"><f a="programType:firstRegister:data:?numRegisters">
	<e path="flash.display3D.Context3DProgramType"/>
	<x path="Int"/>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setProgramConstantsFromVector>
		<setProgramConstantsFromMatrix public="1" set="method"><f a="programType:firstRegister:matrix:?transposedMatrix">
	<e path="flash.display3D.Context3DProgramType"/>
	<x path="Int"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setProgramConstantsFromMatrix>
		<setProgramConstantsFromByteArray public="1">
			<f a="programType:firstRegister:numRegisters:data:byteArrayOffset">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</setProgramConstantsFromByteArray>
		<setProgram public="1" set="method"><f a="program">
	<c path="flash.display3D.Program3D"/>
	<x path="Void"/>
</f></setProgram>
		<setDepthTest public="1" set="method"><f a="depthMask:passCompareMode">
	<x path="Bool"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<x path="Void"/>
</f></setDepthTest>
		<setCulling public="1" set="method"><f a="triangleFaceToCull">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<x path="Void"/>
</f></setCulling>
		<setColorMask public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setColorMask>
		<setBlendFactors public="1" set="method"><f a="sourceFactor:destinationFactor">
	<e path="flash.display3D.Context3DBlendFactor"/>
	<e path="flash.display3D.Context3DBlendFactor"/>
	<x path="Void"/>
</f></setBlendFactors>
		<present public="1" set="method"><f a=""><x path="Void"/></f></present>
		<drawTriangles public="1" set="method"><f a="indexBuffer:?firstIndex:?numTriangles">
	<c path="flash.display3D.IndexBuffer3D"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawTriangles>
		<drawToBitmapData public="1" set="method"><f a="destination">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></drawToBitmapData>
		<dispose public="1" set="method"><f a="?recreate">
	<x path="Bool"/>
	<x path="Void"/>
</f></dispose>
		<createVertexBuffer public="1" set="method"><f a="numVertices:data32PerVertex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
</f></createVertexBuffer>
		<createTexture public="1" set="method"><f a="width:height:format:optimizeForRenderToTexture:?streamingLevels">
	<x path="Int"/>
	<x path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="flash.display3D.textures.Texture"/>
</f></createTexture>
		<createProgram public="1" set="method"><f a=""><c path="flash.display3D.Program3D"/></f></createProgram>
		<createIndexBuffer public="1" set="method"><f a="numIndices">
	<x path="Int"/>
	<c path="flash.display3D.IndexBuffer3D"/>
</f></createIndexBuffer>
		<createCubeTexture public="1" set="method"><f a="size:format:optimizeForRenderToTexture:?streamingLevels">
	<x path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="flash.display3D.textures.CubeTexture"/>
</f></createCubeTexture>
		<configureBackBuffer public="1" set="method"><f a="width:height:antiAlias:?enableDepthAndStencil:?wantsBestResolution">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></configureBackBuffer>
		<clear public="1" set="method"><f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></clear>
		<enableErrorChecking public="1"><x path="Bool"/></enableErrorChecking>
		<driverInfo public="1" set="null"><c path="String"/></driverInfo>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display3D.Context3DBlendFactor" params="" file="/usr/lib/haxe/std/flash/display3D/Context3DBlendFactor.hx">
		<DESTINATION_ALPHA/>
		<DESTINATION_COLOR/>
		<ONE/>
		<ONE_MINUS_DESTINATION_ALPHA/>
		<ONE_MINUS_DESTINATION_COLOR/>
		<ONE_MINUS_SOURCE_ALPHA/>
		<ONE_MINUS_SOURCE_COLOR/>
		<SOURCE_ALPHA/>
		<SOURCE_COLOR/>
		<ZERO/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DCompareMode" params="" file="/usr/lib/haxe/std/flash/display3D/Context3DCompareMode.hx">
		<ALWAYS/>
		<EQUAL/>
		<GREATER/>
		<GREATER_EQUAL/>
		<LESS/>
		<LESS_EQUAL/>
		<NEVER/>
		<NOT_EQUAL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DMipFilter" params="" file="/usr/lib/haxe/std/flash/display3D/Context3DMipFilter.hx">
		<MIPLINEAR/>
		<MIPNEAREST/>
		<MIPNONE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DProfile" params="" file="/usr/lib/haxe/std/flash/display3D/Context3DProfile.hx">
		<BASELINE/>
		<BASELINE_CONSTRAINED/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DProgramType" params="" file="/usr/lib/haxe/std/flash/display3D/Context3DProgramType.hx">
		<FRAGMENT/>
		<VERTEX/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DStencilAction" params="" file="/usr/lib/haxe/std/flash/display3D/Context3DStencilAction.hx">
		<DECREMENT_SATURATE/>
		<DECREMENT_WRAP/>
		<INCREMENT_SATURATE/>
		<INCREMENT_WRAP/>
		<INVERT/>
		<KEEP/>
		<SET/>
		<ZERO/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFilter" params="" file="/usr/lib/haxe/std/flash/display3D/Context3DTextureFilter.hx">
		<LINEAR/>
		<NEAREST/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFormat" params="" file="/usr/lib/haxe/std/flash/display3D/Context3DTextureFormat.hx">
		<BGRA/>
		<BGRA_PACKED/>
		<BGR_PACKED/>
		<COMPRESSED/>
		<COMPRESSED_ALPHA/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DTriangleFace" params="" file="/usr/lib/haxe/std/flash/display3D/Context3DTriangleFace.hx">
		<BACK/>
		<FRONT/>
		<FRONT_AND_BACK/>
		<NONE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DVertexBufferFormat" params="" file="/usr/lib/haxe/std/flash/display3D/Context3DVertexBufferFormat.hx">
		<BYTES_4/>
		<FLOAT_1/>
		<FLOAT_2/>
		<FLOAT_3/>
		<FLOAT_4/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.display3D.Context3DWrapMode" params="" file="/usr/lib/haxe/std/flash/display3D/Context3DWrapMode.hx">
		<CLAMP/>
		<REPEAT/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.display3D.IndexBuffer3D" params="" file="/usr/lib/haxe/std/flash/display3D/IndexBuffer3D.hx" extern="1">
		<uploadFromVector public="1" set="method"><f a="data:startOffset:count">
	<c path="flash.Vector"><x path="UInt"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startOffset:count">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.Program3D" params="" file="/usr/lib/haxe/std/flash/display3D/Program3D.hx" extern="1">
		<upload public="1" set="method"><f a="vertexProgram:fragmentProgram">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></upload>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.VertexBuffer3D" params="" file="/usr/lib/haxe/std/flash/display3D/VertexBuffer3D.hx" extern="1">
		<uploadFromVector public="1" set="method"><f a="data:startVertex:numVertices">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startVertex:numVertices">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.TextureBase" params="" file="/usr/lib/haxe/std/flash/display3D/textures/TextureBase.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.CubeTexture" params="" file="/usr/lib/haxe/std/flash/display3D/textures/CubeTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:side:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:side:?miplevel">
	<c path="flash.display.BitmapData"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?async">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.Texture" params="" file="/usr/lib/haxe/std/flash/display3D/textures/Texture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:?miplevel">
	<c path="flash.display.BitmapData"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?async">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.errors.Error" params="" file="/usr/lib/haxe/std/flash/errors/Error.hx" extern="1">
		<length public="1" static="1"><x path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<x path="Class"><d/></x>
	<x path="UInt"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<name public="1"><d/></name>
		<message public="1"><d/></message>
		<errorID public="1" set="null"><x path="Int"/></errorID>
		<new public="1" set="method"><f a="?message:?id">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.errors.TypeError" params="" file="/usr/lib/haxe/std/flash/errors/TypeError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="flash.events.Event" params="" file="/usr/lib/haxe/std/flash/events/Event.hx" extern="1">
		<ACTIVATE public="1" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" static="1"><c path="String"/></ADDED_TO_STAGE>
		<CANCEL public="1" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" static="1"><c path="String"/></CHANGE>
		<CHANNEL_MESSAGE public="1" static="1"><c path="String"/></CHANNEL_MESSAGE>
		<CHANNEL_STATE public="1" static="1"><c path="String"/></CHANNEL_STATE>
		<CLEAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CLEAR>
		<CLOSE public="1" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" static="1"><c path="String"/></CONNECT>
		<CONTEXT3D_CREATE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</CONTEXT3D_CREATE>
		<COPY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</COPY>
		<CUT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CUT>
		<DEACTIVATE public="1" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" static="1"><c path="String"/></ENTER_FRAME>
		<EXIT_FRAME public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</EXIT_FRAME>
		<FRAME_CONSTRUCTED public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</FRAME_CONSTRUCTED>
		<FRAME_LABEL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</FRAME_LABEL>
		<FULLSCREEN public="1" static="1"><c path="String"/></FULLSCREEN>
		<ID3 public="1" static="1"><c path="String"/></ID3>
		<INIT public="1" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE public="1" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" static="1"><c path="String"/></OPEN>
		<PASTE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</PASTE>
		<REMOVED public="1" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" static="1"><c path="String"/></SELECT>
		<SELECT_ALL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</SELECT_ALL>
		<SOUND_COMPLETE public="1" static="1"><c path="String"/></SOUND_COMPLETE>
		<SUSPEND public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</SUSPEND>
		<TAB_CHILDREN_CHANGE public="1" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<TEXTURE_READY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</TEXTURE_READY>
		<TEXT_INTERACTION_MODE_CHANGE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD public="1" static="1"><c path="String"/></UNLOAD>
		<VIDEO_FRAME public="1" static="1"><c path="String"/></VIDEO_FRAME>
		<WORKER_STATE public="1" static="1"><c path="String"/></WORKER_STATE>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<stopPropagation public="1" set="method"><f a=""><x path="Void"/></f></stopPropagation>
		<stopImmediatePropagation public="1" set="method"><f a=""><x path="Void"/></f></stopImmediatePropagation>
		<preventDefault public="1" set="method"><f a=""><x path="Void"/></f></preventDefault>
		<isDefaultPrevented public="1" set="method"><f a=""><x path="Bool"/></f></isDefaultPrevented>
		<formatToString public="1" set="method"><f a="className:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></formatToString>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<type public="1" set="null"><c path="String"/></type>
		<target public="1" set="null"><d/></target>
		<eventPhase public="1" set="null"><e path="flash.events.EventPhase"/></eventPhase>
		<currentTarget public="1" set="null"><d/></currentTarget>
		<cancelable public="1" set="null"><x path="Bool"/></cancelable>
		<bubbles public="1" set="null"><x path="Bool"/></bubbles>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.TextEvent" params="" file="/usr/lib/haxe/std/flash/events/TextEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<LINK public="1" static="1"><c path="String"/></LINK>
		<TEXT_INPUT public="1" static="1"><c path="String"/></TEXT_INPUT>
		<text public="1"><c path="String"/></text>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.ErrorEvent" params="" file="/usr/lib/haxe/std/flash/events/ErrorEvent.hx" extern="1">
		<extends path="flash.events.TextEvent"/>
		<ERROR public="1" static="1"><c path="String"/></ERROR>
		<errorID public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</errorID>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.events.EventPhase" params="" file="/usr/lib/haxe/std/flash/events/EventPhase.hx">
		<AT_TARGET/>
		<BUBBLING_PHASE/>
		<CAPTURING_PHASE/>
		<meta><m n=":fakeEnum"><e>UInt</e></m></meta>
	</enum>
	<class path="flash.events.IOErrorEvent" params="" file="/usr/lib/haxe/std/flash/events/IOErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<DISK_ERROR public="1" static="1"><c path="String"/></DISK_ERROR>
		<IO_ERROR public="1" static="1"><c path="String"/></IO_ERROR>
		<NETWORK_ERROR public="1" static="1"><c path="String"/></NETWORK_ERROR>
		<VERIFY_ERROR public="1" static="1"><c path="String"/></VERIFY_ERROR>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.ProgressEvent" params="" file="/usr/lib/haxe/std/flash/events/ProgressEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<PROGRESS public="1" static="1"><c path="String"/></PROGRESS>
		<SOCKET_DATA public="1" static="1"><c path="String"/></SOCKET_DATA>
		<bytesTotal public="1"><x path="Float"/></bytesTotal>
		<bytesLoaded public="1"><x path="Float"/></bytesLoaded>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?bytesLoaded:?bytesTotal">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.SecurityErrorEvent" params="" file="/usr/lib/haxe/std/flash/events/SecurityErrorEvent.hx" extern="1">
		<extends path="flash.events.ErrorEvent"/>
		<SECURITY_ERROR public="1" static="1"><c path="String"/></SECURITY_ERROR>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.UncaughtErrorEvents" params="" file="/usr/lib/haxe/std/flash/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.external.ExternalInterface" params="" file="/usr/lib/haxe/std/flash/external/ExternalInterface.hx" extern="1">
		<available public="1" set="null" static="1"><x path="Bool"/></available>
		<marshallExceptions public="1" static="1"><x path="Bool"/></marshallExceptions>
		<objectID public="1" set="null" static="1"><c path="String"/></objectID>
		<addCallback public="1" set="method" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="/usr/lib/haxe/std/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="/usr/lib/haxe/std/flash/geom/ColorTransform.hx" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<redOffset public="1"><x path="Float"/></redOffset>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<color public="1"><x path="UInt"/></color>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<new public="1" set="method"><f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix" params="" file="/usr/lib/haxe/std/flash/geom/Matrix.hx" extern="1">
		<translate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<setTo public="1">
			<f a="aa:ba:ca:da:txa:tya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<invert public="1" set="method"><f a=""><x path="Void"/></f></invert>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<createGradientBox public="1" set="method"><f a="width:height:?rotation:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createGradientBox>
		<createBox public="1" set="method"><f a="scaleX:scaleY:?rotation:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createBox>
		<copyRowTo public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyRowFrom public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyFrom public="1">
			<f a="sourceMatrix">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyColumnTo public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyColumnFrom public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<ty public="1"><x path="Float"/></ty>
		<tx public="1"><x path="Float"/></tx>
		<d public="1"><x path="Float"/></d>
		<c public="1"><x path="Float"/></c>
		<b public="1"><x path="Float"/></b>
		<a public="1"><x path="Float"/></a>
		<new public="1" set="method"><f a="?a:?b:?c:?d:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix3D" params="" file="/usr/lib/haxe/std/flash/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" set="method" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<transpose public="1" set="method"><f a=""><x path="Void"/></f></transpose>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<c path="flash.Vector"><x path="Float"/></c>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></transformVectors>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
	<e path="flash.geom.Orientation3D"/>
	<x path="Bool"/>
</f></recompose>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependTranslation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependScale>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></prependRotation>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></prepend>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></pointAt>
		<invert public="1" set="method"><f a=""><x path="Bool"/></f></invert>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<x path="Void"/>
</f></interpolateTo>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<e path="flash.geom.Orientation3D"/>
	<c path="flash.Vector"><c path="flash.geom.Vector3D"/></c>
</f></decompose>
		<copyToMatrix3D public="1">
			<f a="dest">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyToMatrix3D>
		<copyRowTo public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyRowFrom public="1">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRawDataTo public="1">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataTo>
		<copyRawDataFrom public="1">
			<f a="vector:?index:?transpose">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataFrom>
		<copyFrom public="1">
			<f a="sourceMatrix3D">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyColumnTo public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyColumnFrom public="1">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendTranslation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendScale>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></appendRotation>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></append>
		<rawData public="1"><c path="flash.Vector"><x path="Float"/></c></rawData>
		<position public="1"><c path="flash.geom.Vector3D"/></position>
		<determinant public="1" set="null"><x path="Float"/></determinant>
		<new public="1" set="method"><f a="?v">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<enum path="flash.geom.Orientation3D" params="" file="/usr/lib/haxe/std/flash/geom/Orientation3D.hx">
		<AXIS_ANGLE/>
		<EULER_ANGLES/>
		<QUATERNION/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.geom.PerspectiveProjection" params="" file="/usr/lib/haxe/std/flash/geom/PerspectiveProjection.hx" extern="1">
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<projectionCenter public="1"><c path="flash.geom.Point"/></projectionCenter>
		<focalLength public="1"><x path="Float"/></focalLength>
		<fieldOfView public="1"><x path="Float"/></fieldOfView>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Point" params="" file="/usr/lib/haxe/std/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<setTo public="1">
			<f a="xa:ya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<normalize public="1" set="method"><f a="thickness">
	<x path="Float"/>
	<x path="Void"/>
</f></normalize>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></equals>
		<copyFrom public="1">
			<f a="sourcePoint">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<length public="1" set="null"><x path="Float"/></length>
		<new public="1" set="method"><f a="?x:?y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="/usr/lib/haxe/std/flash/geom/Rectangle.hx" extern="1">
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<setTo public="1">
			<f a="xa:ya:widtha:heighta">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<setEmpty public="1" set="method"><f a=""><x path="Void"/></f></setEmpty>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></offsetPoint>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></intersects>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></inflatePoint>
		<inflate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></inflate>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></equals>
		<copyFrom public="1">
			<f a="sourceRect">
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></containsRect>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></containsPoint>
		<contains public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<width public="1"><x path="Float"/></width>
		<topLeft public="1"><c path="flash.geom.Point"/></topLeft>
		<top public="1"><x path="Float"/></top>
		<size public="1"><c path="flash.geom.Point"/></size>
		<right public="1"><x path="Float"/></right>
		<left public="1"><x path="Float"/></left>
		<height public="1"><x path="Float"/></height>
		<bottomRight public="1"><c path="flash.geom.Point"/></bottomRight>
		<bottom public="1"><x path="Float"/></bottom>
		<new public="1" set="method"><f a="?x:?y:?width:?height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Transform" params="" file="/usr/lib/haxe/std/flash/geom/Transform.hx" extern="1">
		<getRelativeMatrix3D public="1" set="method">
			<f a="relativeTo">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Matrix3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getRelativeMatrix3D>
		<pixelBounds public="1" set="null"><c path="flash.geom.Rectangle"/></pixelBounds>
		<perspectiveProjection public="1">
			<c path="flash.geom.PerspectiveProjection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</perspectiveProjection>
		<matrix3D public="1">
			<c path="flash.geom.Matrix3D"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</matrix3D>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<concatenatedMatrix public="1" set="null"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<concatenatedColorTransform public="1" set="null"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Vector3D" params="" file="/usr/lib/haxe/std/flash/geom/Vector3D.hx" extern="1">
		<X_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" set="method" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></angleBetween>
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></distance>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<setTo public="1">
			<f a="xa:ya:za">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<scaleBy public="1" set="method"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<project public="1" set="method"><f a=""><x path="Void"/></f></project>
		<normalize public="1" set="method"><f a=""><x path="Float"/></f></normalize>
		<negate public="1" set="method"><f a=""><x path="Void"/></f></negate>
		<nearEquals public="1" set="method"><f a="toCompare:tolerance:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></nearEquals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<equals public="1" set="method"><f a="toCompare:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></equals>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<copyFrom public="1">
			<f a="sourceVector3D">
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<z public="1"><x path="Float"/></z>
		<y public="1"><x path="Float"/></y>
		<x public="1"><x path="Float"/></x>
		<w public="1"><x path="Float"/></w>
		<lengthSquared public="1" set="null"><x path="Float"/></lengthSquared>
		<length public="1" set="null"><x path="Float"/></length>
		<new public="1" set="method"><f a="?x:?y:?z:?w">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.media.AVCaptionStyle" params="" file="/usr/lib/haxe/std/flash/media/AVCaptionStyle.hx" extern="1">
		<BLACK public="1" static="1"><c path="String"/></BLACK>
		<BLUE public="1" static="1"><c path="String"/></BLUE>
		<BRIGHT_BLUE public="1" static="1"><c path="String"/></BRIGHT_BLUE>
		<BRIGHT_CYAN public="1" static="1"><c path="String"/></BRIGHT_CYAN>
		<BRIGHT_GREEN public="1" static="1"><c path="String"/></BRIGHT_GREEN>
		<BRIGHT_MAGENTA public="1" static="1"><c path="String"/></BRIGHT_MAGENTA>
		<BRIGHT_RED public="1" static="1"><c path="String"/></BRIGHT_RED>
		<BRIGHT_WHITE public="1" static="1"><c path="String"/></BRIGHT_WHITE>
		<BRIGHT_YELLOW public="1" static="1"><c path="String"/></BRIGHT_YELLOW>
		<CASUAL public="1" static="1"><c path="String"/></CASUAL>
		<CURSIVE public="1" static="1"><c path="String"/></CURSIVE>
		<CYAN public="1" static="1"><c path="String"/></CYAN>
		<DARK_BLUE public="1" static="1"><c path="String"/></DARK_BLUE>
		<DARK_CYAN public="1" static="1"><c path="String"/></DARK_CYAN>
		<DARK_GREEN public="1" static="1"><c path="String"/></DARK_GREEN>
		<DARK_MAGENTA public="1" static="1"><c path="String"/></DARK_MAGENTA>
		<DARK_RED public="1" static="1"><c path="String"/></DARK_RED>
		<DARK_YELLOW public="1" static="1"><c path="String"/></DARK_YELLOW>
		<DEFAULT public="1" static="1"><c path="String"/></DEFAULT>
		<DEPRESSED public="1" static="1"><c path="String"/></DEPRESSED>
		<GRAY public="1" static="1"><c path="String"/></GRAY>
		<GREEN public="1" static="1"><c path="String"/></GREEN>
		<LARGE public="1" static="1"><c path="String"/></LARGE>
		<LEFT_DROP_SHADOW public="1" static="1"><c path="String"/></LEFT_DROP_SHADOW>
		<MAGENTA public="1" static="1"><c path="String"/></MAGENTA>
		<MEDIUM public="1" static="1"><c path="String"/></MEDIUM>
		<MONOSPACED_WITHOUT_SERIFS public="1" static="1"><c path="String"/></MONOSPACED_WITHOUT_SERIFS>
		<MONOSPACE_WITH_SERIFS public="1" static="1"><c path="String"/></MONOSPACE_WITH_SERIFS>
		<NONE public="1" static="1"><c path="String"/></NONE>
		<PROPORTIONAL_WITHOUT_SERIFS public="1" static="1"><c path="String"/></PROPORTIONAL_WITHOUT_SERIFS>
		<PROPORTIONAL_WITH_SERIFS public="1" static="1"><c path="String"/></PROPORTIONAL_WITH_SERIFS>
		<RAISED public="1" static="1"><c path="String"/></RAISED>
		<RED public="1" static="1"><c path="String"/></RED>
		<RIGHT_DROP_SHADOW public="1" static="1"><c path="String"/></RIGHT_DROP_SHADOW>
		<SMALL public="1" static="1"><c path="String"/></SMALL>
		<SMALL_CAPITALS public="1" static="1"><c path="String"/></SMALL_CAPITALS>
		<UNIFORM public="1" static="1"><c path="String"/></UNIFORM>
		<WHITE public="1" static="1"><c path="String"/></WHITE>
		<YELLOW public="1" static="1"><c path="String"/></YELLOW>
		<size public="1"><c path="String"/></size>
		<fontOpacity public="1"><c path="String"/></fontOpacity>
		<fontEdge public="1"><c path="String"/></fontEdge>
		<fontColor public="1"><c path="String"/></fontColor>
		<font public="1"><c path="String"/></font>
		<fillOpacity public="1"><c path="String"/></fillOpacity>
		<fillColor public="1"><c path="String"/></fillColor>
		<edgeColor public="1"><c path="String"/></edgeColor>
		<backgroundOpacity public="1"><c path="String"/></backgroundOpacity>
		<backgroundColor public="1"><c path="String"/></backgroundColor>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVPlayState" params="" file="/usr/lib/haxe/std/flash/media/AVPlayState.hx" extern="1">
		<BUFFERING public="1" static="1"><x path="Int"/></BUFFERING>
		<EOF public="1" static="1"><x path="Int"/></EOF>
		<PAUSED public="1" static="1"><x path="Int"/></PAUSED>
		<PLAYING public="1" static="1"><x path="Int"/></PLAYING>
		<READY public="1" static="1"><x path="Int"/></READY>
		<SUSPENDED public="1" static="1"><x path="Int"/></SUSPENDED>
		<UNINITIALIZED public="1" static="1"><x path="Int"/></UNINITIALIZED>
		<UNRECOVERABLE_ERROR public="1" static="1"><x path="Int"/></UNRECOVERABLE_ERROR>
		<state public="1" set="null"><x path="Int"/></state>
		<new public="1" set="method"><f a="state">
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVResult" params="" file="/usr/lib/haxe/std/flash/media/AVResult.hx" extern="1">
		<ASYNC_OPERATION_IN_PROGRESS public="1" static="1"><x path="Int"/></ASYNC_OPERATION_IN_PROGRESS>
		<BAD_MANIFEST_SIGNATURE public="1" static="1"><x path="Int"/></BAD_MANIFEST_SIGNATURE>
		<BAD_MEDIA_INTERLEAVING public="1" static="1"><x path="Int"/></BAD_MEDIA_INTERLEAVING>
		<CALLED_FROM_WRONG_THREAD public="1" static="1"><x path="Int"/></CALLED_FROM_WRONG_THREAD>
		<CANNOT_FAIL_OVER public="1" static="1"><x path="Int"/></CANNOT_FAIL_OVER>
		<CANNOT_LOAD_PLAY_LIST public="1" static="1"><x path="Int"/></CANNOT_LOAD_PLAY_LIST>
		<CODEC_NOT_SUPPORTED public="1" static="1"><x path="Int"/></CODEC_NOT_SUPPORTED>
		<COMPONENT_CREATION_FAILURE public="1" static="1"><x path="Int"/></COMPONENT_CREATION_FAILURE>
		<CONTAINER_NOT_SUPPORTED public="1" static="1"><x path="Int"/></CONTAINER_NOT_SUPPORTED>
		<CONTENT_LENGTH_MISMATCH public="1" static="1"><x path="Int"/></CONTENT_LENGTH_MISMATCH>
		<CURRENT_PERIOD_EXPIRED public="1" static="1"><x path="Int"/></CURRENT_PERIOD_EXPIRED>
		<DECODER_FAILED public="1" static="1"><x path="Int"/></DECODER_FAILED>
		<DEVICE_OPEN_ERROR public="1" static="1"><x path="Int"/></DEVICE_OPEN_ERROR>
		<DRM_INIT_ERROR public="1" static="1"><x path="Int"/></DRM_INIT_ERROR>
		<DRM_NOT_AVAILABLE public="1" static="1"><x path="Int"/></DRM_NOT_AVAILABLE>
		<EOF public="1" static="1"><x path="Int"/></EOF>
		<FILE_NOT_FOUND public="1" static="1"><x path="Int"/></FILE_NOT_FOUND>
		<FILE_STRUCTURE_INVALID public="1" static="1"><x path="Int"/></FILE_STRUCTURE_INVALID>
		<FRAGMENT_READ_ERROR public="1" static="1"><x path="Int"/></FRAGMENT_READ_ERROR>
		<GENERIC_ERROR public="1" static="1"><x path="Int"/></GENERIC_ERROR>
		<HTTP_TIME_OUT public="1" static="1"><x path="Int"/></HTTP_TIME_OUT>
		<INVALID_OPERATION public="1" static="1"><x path="Int"/></INVALID_OPERATION>
		<INVALID_PARAMETER public="1" static="1"><x path="Int"/></INVALID_PARAMETER>
		<INVALID_REPLACE_DURATION public="1" static="1"><x path="Int"/></INVALID_REPLACE_DURATION>
		<INVALID_SEEK_TIME public="1" static="1"><x path="Int"/></INVALID_SEEK_TIME>
		<INVALID_WITH_AUDIO_ONLY_FILE public="1" static="1"><x path="Int"/></INVALID_WITH_AUDIO_ONLY_FILE>
		<IRRECOVERABLE_ERROR public="1" static="1"><x path="Int"/></IRRECOVERABLE_ERROR>
		<LIVE_HOLD public="1" static="1"><x path="Int"/></LIVE_HOLD>
		<LIVE_WINDOW_MOVED_BACKWARD public="1" static="1"><x path="Int"/></LIVE_WINDOW_MOVED_BACKWARD>
		<LOST_CONNECTION_RECOVERABLE public="1" static="1"><x path="Int"/></LOST_CONNECTION_RECOVERABLE>
		<NETWORK_DOWN public="1" static="1"><x path="Int"/></NETWORK_DOWN>
		<NETWORK_ERROR public="1" static="1"><x path="Int"/></NETWORK_ERROR>
		<NETWORK_UNAVAILABLE public="1" static="1"><x path="Int"/></NETWORK_UNAVAILABLE>
		<NOT_IMPLEMENTED public="1" static="1"><x path="Int"/></NOT_IMPLEMENTED>
		<NO_FIXED_SIZE public="1" static="1"><x path="Int"/></NO_FIXED_SIZE>
		<NO_USEABLE_BITRATE_PROFILE public="1" static="1"><x path="Int"/></NO_USEABLE_BITRATE_PROFILE>
		<ONLY_ALLOWED_IN_PAUSED_STATE public="1" static="1"><x path="Int"/></ONLY_ALLOWED_IN_PAUSED_STATE>
		<OPERATION_ABORTED public="1" static="1"><x path="Int"/></OPERATION_ABORTED>
		<OUT_OF_MEMORY public="1" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<OVERFLOW public="1" static="1"><x path="Int"/></OVERFLOW>
		<PARSE_ERROR public="1" static="1"><x path="Int"/></PARSE_ERROR>
		<PERIOD_HOLD public="1" static="1"><x path="Int"/></PERIOD_HOLD>
		<PERIOD_NOT_LOADED public="1" static="1"><x path="Int"/></PERIOD_NOT_LOADED>
		<PLAYBACK_NOT_ENABLED public="1" static="1"><x path="Int"/></PLAYBACK_NOT_ENABLED>
		<PREVIOUS_STEP_SEEK_IN_PROGRESS public="1" static="1"><x path="Int"/></PREVIOUS_STEP_SEEK_IN_PROGRESS>
		<RANGE_ERROR public="1" static="1"><x path="Int"/></RANGE_ERROR>
		<REPLACEMENT_FAILED public="1" static="1"><x path="Int"/></REPLACEMENT_FAILED>
		<RESOURCE_NOT_SPECIFIED public="1" static="1"><x path="Int"/></RESOURCE_NOT_SPECIFIED>
		<SEEK_FAILED public="1" static="1"><x path="Int"/></SEEK_FAILED>
		<SIZE_UNKNOWN public="1" static="1"><x path="Int"/></SIZE_UNKNOWN>
		<SUCCESS public="1" static="1"><x path="Int"/></SUCCESS>
		<SWITCH_TO_ASYMMETRIC_PROFILE public="1" static="1"><x path="Int"/></SWITCH_TO_ASYMMETRIC_PROFILE>
		<UNDERFLOW public="1" static="1"><x path="Int"/></UNDERFLOW>
		<UNSUPPORTED_CONFIGURATION public="1" static="1"><x path="Int"/></UNSUPPORTED_CONFIGURATION>
		<UNSUPPORTED_HLS_VERSION public="1" static="1"><x path="Int"/></UNSUPPORTED_HLS_VERSION>
		<UNSUPPORTED_OPERATION public="1" static="1"><x path="Int"/></UNSUPPORTED_OPERATION>
		<VIDEO_PROFILE_NOT_SUPPORTED public="1" static="1"><x path="Int"/></VIDEO_PROFILE_NOT_SUPPORTED>
		<WAITING_FOR_INIT public="1" static="1"><x path="Int"/></WAITING_FOR_INIT>
		<result public="1" set="null"><x path="Int"/></result>
		<new public="1" set="method"><f a="inResult">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVSource" params="" file="/usr/lib/haxe/std/flash/media/AVSource.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVStream" params="" file="/usr/lib/haxe/std/flash/media/AVStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<HARDWARE public="1" static="1"><c path="String"/></HARDWARE>
		<SOFTWARE public="1" static="1"><c path="String"/></SOFTWARE>
		<UNDEFINED public="1" static="1"><c path="String"/></UNDEFINED>
		<step public="1" set="method"><f a="frames">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></step>
		<seekToLocalTime public="1" set="method"><f a="periodIndex:time">
	<x path="Int"/>
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></seekToLocalTime>
		<seekToLivePoint public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></seekToLivePoint>
		<seek public="1" set="method"><f a="offset:?inBufferSeek">
	<x path="Float"/>
	<x path="Bool"/>
	<c path="flash.media.AVResult"/>
</f></seek>
		<resume public="1" set="method"><f a=""><x path="Bool"/></f></resume>
		<play public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></play>
		<pause public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></pause>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<volume public="1"><x path="Float"/></volume>
		<useHardwareDecoder public="1"><x path="Bool"/></useHardwareDecoder>
		<time public="1" set="null"><x path="Float"/></time>
		<renderType public="1" set="null"><c path="String"/></renderType>
		<playState public="1" set="null"><c path="flash.media.AVPlayState"/></playState>
		<initialBufferTime public="1" get="null"><x path="Float"/></initialBufferTime>
		<frameTime public="1" set="null"><x path="Float"/></frameTime>
		<droppedFrames public="1" set="null"><x path="Int"/></droppedFrames>
		<decoderType public="1" set="null"><c path="String"/></decoderType>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<captionsEnabled public="1"><x path="Bool"/></captionsEnabled>
		<captionStyle public="1" get="null"><c path="flash.media.AVCaptionStyle"/></captionStyle>
		<bufferTime public="1" get="null"><x path="Float"/></bufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<backBufferTime public="1" get="null"><x path="Float"/></backBufferTime>
		<backBufferLength public="1" set="null"><x path="Float"/></backBufferLength>
		<new public="1" set="method"><f a="source">
	<c path="flash.media.AVSource"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.Camera" params="" file="/usr/lib/haxe/std/flash/media/Camera.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<_scanHardware public="1" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<setMotionLevel public="1" set="method"><f a="motionLevel:?timeout">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setMotionLevel>
		<setMode public="1" set="method"><f a="width:height:fps:?favorArea">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setMode>
		<setLoopback public="1" set="method"><f a="?compress">
	<x path="Bool"/>
	<x path="Void"/>
</f></setLoopback>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setCursor public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></setCursor>
		<drawToBitmapData public="1">
			<f a="destination">
				<c path="flash.display.BitmapData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</drawToBitmapData>
		<copyToVector public="1">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.Vector"><x path="UInt"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToVector>
		<copyToByteArray public="1">
			<f a="rect:destination">
				<c path="flash.geom.Rectangle"/>
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</copyToByteArray>
		<width public="1" set="null"><x path="Int"/></width>
		<quality public="1" set="null"><x path="Int"/></quality>
		<position public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</position>
		<name public="1" set="null"><c path="String"/></name>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<motionTimeout public="1" set="null"><x path="Int"/></motionTimeout>
		<motionLevel public="1" set="null"><x path="Int"/></motionLevel>
		<loopback public="1" set="null"><x path="Bool"/></loopback>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<index public="1" set="null"><x path="Int"/></index>
		<height public="1" set="null"><x path="Int"/></height>
		<fps public="1" set="null"><x path="Float"/></fps>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.Microphone" params="" file="/usr/lib/haxe/std/flash/media/Microphone.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<getEnhancedMicrophone public="1" static="1">
			<f a="?index">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1"><f a="?index">
	<x path="Int"/>
	<c path="flash.media.Microphone"/>
</f></getMicrophone>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<x path="Bool"/>
	<x path="Void"/>
</f></setUseEchoSuppression>
		<setSilenceLevel public="1" set="method"><f a="silenceLevel:?timeout">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSilenceLevel>
		<setLoopBack public="1" set="method"><f a="?state">
	<x path="Bool"/>
	<x path="Void"/>
</f></setLoopBack>
		<useEchoSuppression public="1" set="null"><x path="Bool"/></useEchoSuppression>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<silenceTimeout public="1" set="null"><x path="Int"/></silenceTimeout>
		<silenceLevel public="1" set="null"><x path="Float"/></silenceLevel>
		<rate public="1"><x path="Int"/></rate>
		<noiseSuppressionLevel public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</noiseSuppressionLevel>
		<name public="1" set="null"><c path="String"/></name>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<index public="1" set="null"><x path="Int"/></index>
		<gain public="1"><x path="Float"/></gain>
		<framesPerPacket public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</framesPerPacket>
		<enhancedOptions public="1">
			<c path="flash.media.MicrophoneEnhancedOptions"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</enhancedOptions>
		<encodeQuality public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</encodeQuality>
		<enableVAD public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</enableVAD>
		<codec public="1">
			<e path="flash.media.SoundCodec"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</codec>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.media.MicrophoneEnhancedMode" params="" file="/usr/lib/haxe/std/flash/media/MicrophoneEnhancedMode.hx">
		<FULL_DUPLEX/>
		<HALF_DUPLEX/>
		<HEADSET/>
		<OFF/>
		<SPEAKER_MUTE/>
		<meta>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</enum>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="/usr/lib/haxe/std/flash/media/MicrophoneEnhancedOptions.hx" extern="1">
		<nonLinearProcessing public="1"><x path="Bool"/></nonLinearProcessing>
		<mode public="1"><e path="flash.media.MicrophoneEnhancedMode"/></mode>
		<isVoiceDetected public="1"><x path="Int"/></isVoiceDetected>
		<echoPath public="1"><x path="Int"/></echoPath>
		<autoGain public="1"><x path="Bool"/></autoGain>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</class>
	<enum path="flash.media.SoundCodec" params="" file="/usr/lib/haxe/std/flash/media/SoundCodec.hx">
		<NELLYMOSER/>
		<PCMA/>
		<PCMU/>
		<SPEEX/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.media.SoundTransform" params="" file="/usr/lib/haxe/std/flash/media/SoundTransform.hx" extern="1">
		<volume public="1"><x path="Float"/></volume>
		<rightToRight public="1"><x path="Float"/></rightToRight>
		<rightToLeft public="1"><x path="Float"/></rightToLeft>
		<pan public="1"><x path="Float"/></pan>
		<leftToRight public="1"><x path="Float"/></leftToRight>
		<leftToLeft public="1"><x path="Float"/></leftToLeft>
		<new public="1" set="method"><f a="?vol:?panning">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.StageVideo" params="" file="/usr/lib/haxe/std/flash/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<attachCamera public="1">
			<f a="theCamera">
				<c path="flash.media.Camera"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</attachCamera>
		<attachAVStream public="1">
			<f a="avStream">
				<c path="flash.media.AVStream"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_7</e></m></meta>
		</attachAVStream>
		<zoom public="1"><c path="flash.geom.Point"/></zoom>
		<viewPort public="1"><c path="flash.geom.Rectangle"/></viewPort>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<pan public="1"><c path="flash.geom.Point"/></pan>
		<depth public="1"><x path="Int"/></depth>
		<colorSpaces public="1" set="null"><c path="flash.Vector"><c path="String"/></c></colorSpaces>
		<new public="1"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.media.VideoStreamSettings" params="" file="/usr/lib/haxe/std/flash/media/VideoStreamSettings.hx" extern="1">
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<setMode public="1" set="method"><f a="width:height:fps">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setMode>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<width public="1" set="null"><x path="Int"/></width>
		<quality public="1" set="null"><x path="Int"/></quality>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<height public="1" set="null"><x path="Int"/></height>
		<fps public="1" set="null"><x path="Float"/></fps>
		<codec public="1" set="null"><c path="String"/></codec>
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetConnection" params="" file="/usr/lib/haxe/std/flash/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<connect public="1" set="method"><f a="command:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></connect>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<call public="1" set="method"><f a="command:responder:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></call>
		<addHeader public="1" set="method"><f a="operation:?mustUnderstand:?param">
	<c path="String"/>
	<x path="Bool"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></addHeader>
		<usingTLS public="1" set="null"><x path="Bool"/></usingTLS>
		<uri public="1" set="null"><c path="String"/></uri>
		<unconnectedPeerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unconnectedPeerStreams>
		<proxyType public="1"><c path="String"/></proxyType>
		<protocol public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</protocol>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<nearID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearID>
		<maxPeerConnections public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPeerConnections>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<connectedProxyType public="1" set="null"><c path="String"/></connectedProxyType>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<client public="1"><d/></client>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStream" params="" file="/usr/lib/haxe/std/flash/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</DIRECT_CONNECTIONS>
		<togglePause public="1" set="method"><f a=""><x path="Void"/></f></togglePause>
		<step public="1">
			<f a="frames">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</step>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></send>
		<seek public="1" set="method"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></seek>
		<resume public="1" set="method"><f a=""><x path="Void"/></f></resume>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<x path="Float"/>
	<x path="Void"/>
</f></receiveVideoFPS>
		<receiveVideo public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveVideo>
		<receiveAudio public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveAudio>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></publish>
		<play2 public="1" set="method">
			<f a="param">
				<c path="flash.net.NetStreamPlayOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</play2>
		<play public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></play>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<onPeerConnect public="1" set="method">
			<f a="subscriber">
				<c path="flash.net.NetStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</onPeerConnect>
		<dispose public="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</dispose>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<attachCamera public="1" set="method"><f a="theCamera:?snapshotMilliseconds">
	<c path="flash.media.Camera"/>
	<x path="Int"/>
	<x path="Void"/>
</f></attachCamera>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<x path="Void"/>
</f></attachAudio>
		<attach public="1">
			<f a="connection">
				<c path="flash.net.NetConnection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</attach>
		<appendBytesAction public="1">
			<f a="netStreamAppendBytesAction">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytesAction>
		<appendBytes public="1">
			<f a="bytes">
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytes>
		<videoStreamSettings public="1">
			<c path="flash.media.VideoStreamSettings"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</videoStreamSettings>
		<videoSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoSampleAccess>
		<videoReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoReliable>
		<videoCodec public="1" set="null"><x path="UInt"/></videoCodec>
		<useJitterBuffer public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</useJitterBuffer>
		<useHardwareDecoder public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</useHardwareDecoder>
		<time public="1" set="null"><x path="Float"/></time>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<peerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</peerStreams>
		<objectEncoding public="1" set="null"><x path="UInt"/></objectEncoding>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<multicastWindowDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastWindowDuration>
		<multicastRelayMarginDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastRelayMarginDuration>
		<multicastPushNeighborLimit public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastPushNeighborLimit>
		<multicastInfo public="1">
			<c path="flash.net.NetStreamMulticastInfo"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastInfo>
		<multicastFetchPeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastFetchPeriod>
		<multicastAvailabilityUpdatePeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilityUpdatePeriod>
		<multicastAvailabilitySendToAll public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilitySendToAll>
		<maxPauseBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPauseBufferTime>
		<liveDelay public="1" set="null"><x path="Float"/></liveDelay>
		<info public="1" set="null">
			<c path="flash.net.NetStreamInfo"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</info>
		<inBufferSeek public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</inBufferSeek>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<decodedFrames public="1" set="null"><x path="UInt"/></decodedFrames>
		<dataReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</dataReliable>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<client public="1"><d/></client>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bufferTimeMax public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</bufferTimeMax>
		<bufferTime public="1"><x path="Float"/></bufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<backBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferTime>
		<backBufferLength public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferLength>
		<audioSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioSampleAccess>
		<audioReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioReliable>
		<audioCodec public="1" set="null"><x path="UInt"/></audioCodec>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.NetStreamInfo" params="" file="/usr/lib/haxe/std/flash/net/NetStreamInfo.hx" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<xmpData public="1" set="null"><d/></xmpData>
		<videoLossRate public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoLossRate>
		<videoBytesPerSecond public="1" set="null"><x path="Float"/></videoBytesPerSecond>
		<videoByteCount public="1" set="null"><x path="Float"/></videoByteCount>
		<videoBufferLength public="1" set="null"><x path="Float"/></videoBufferLength>
		<videoBufferByteLength public="1" set="null"><x path="Float"/></videoBufferByteLength>
		<uri public="1" set="null"><c path="String"/></uri>
		<resourceName public="1" set="null"><c path="String"/></resourceName>
		<playbackBytesPerSecond public="1" set="null"><x path="Float"/></playbackBytesPerSecond>
		<metaData public="1" set="null"><d/></metaData>
		<maxBytesPerSecond public="1" set="null"><x path="Float"/></maxBytesPerSecond>
		<isLive public="1" set="null"><x path="Bool"/></isLive>
		<droppedFrames public="1" set="null"><x path="Float"/></droppedFrames>
		<dataBytesPerSecond public="1" set="null"><x path="Float"/></dataBytesPerSecond>
		<dataByteCount public="1" set="null"><x path="Float"/></dataByteCount>
		<dataBufferLength public="1" set="null"><x path="Float"/></dataBufferLength>
		<dataBufferByteLength public="1" set="null"><x path="Float"/></dataBufferByteLength>
		<currentBytesPerSecond public="1" set="null"><x path="Float"/></currentBytesPerSecond>
		<byteCount public="1" set="null"><x path="Float"/></byteCount>
		<audioLossRate public="1" set="null"><x path="Float"/></audioLossRate>
		<audioBytesPerSecond public="1" set="null"><x path="Float"/></audioBytesPerSecond>
		<audioByteCount public="1" set="null"><x path="Float"/></audioByteCount>
		<audioBufferLength public="1" set="null"><x path="Float"/></audioBufferLength>
		<audioBufferByteLength public="1" set="null"><x path="Float"/></audioBufferByteLength>
		<SRTT public="1" set="null"><x path="Float"/></SRTT>
		<new public="1" set="method"><f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<d/>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="/usr/lib/haxe/std/flash/net/NetStreamMulticastInfo.hx" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<sendDataBytesPerSecond public="1" set="null"><x path="Float"/></sendDataBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" set="null"><x path="Float"/></sendControlBytesPerSecondToServer>
		<sendControlBytesPerSecond public="1" set="null"><x path="Float"/></sendControlBytesPerSecond>
		<receiveDataBytesPerSecondFromServer public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromServer>
		<receiveDataBytesPerSecondFromIPMulticast public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecond public="1" set="null"><x path="Float"/></receiveDataBytesPerSecond>
		<receiveControlBytesPerSecond public="1" set="null"><x path="Float"/></receiveControlBytesPerSecond>
		<fragmentsRequestedFromPeers public="1" set="null"><x path="Float"/></fragmentsRequestedFromPeers>
		<fragmentsRequestedByPeers public="1" set="null"><x path="Float"/></fragmentsRequestedByPeers>
		<fragmentsReceivedFromServer public="1" set="null"><x path="Float"/></fragmentsReceivedFromServer>
		<fragmentsReceivedFromIPMulticast public="1" set="null"><x path="Float"/></fragmentsReceivedFromIPMulticast>
		<fragmentsPushedToPeers public="1" set="null"><x path="Float"/></fragmentsPushedToPeers>
		<fragmentsPushedFromPeers public="1" set="null"><x path="Float"/></fragmentsPushedFromPeers>
		<bytesRequestedFromPeers public="1" set="null"><x path="Float"/></bytesRequestedFromPeers>
		<bytesRequestedByPeers public="1" set="null"><x path="Float"/></bytesRequestedByPeers>
		<bytesReceivedFromServer public="1" set="null"><x path="Float"/></bytesReceivedFromServer>
		<bytesReceivedFromIPMulticast public="1" set="null"><x path="Float"/></bytesReceivedFromIPMulticast>
		<bytesPushedToPeers public="1" set="null"><x path="Float"/></bytesPushedToPeers>
		<bytesPushedFromPeers public="1" set="null"><x path="Float"/></bytesPushedFromPeers>
		<new public="1"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="/usr/lib/haxe/std/flash/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<transition public="1"><c path="String"/></transition>
		<streamName public="1"><c path="String"/></streamName>
		<start public="1"><x path="Float"/></start>
		<oldStreamName public="1"><c path="String"/></oldStreamName>
		<offset public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</offset>
		<len public="1"><x path="Float"/></len>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.net.Responder" params="" file="/usr/lib/haxe/std/flash/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<x path="Void"/>
</f></new></class>
	<class path="flash.utils.IDataInput" params="" file="/usr/lib/haxe/std/flash/utils/IDataInput.hx" extern="1" interface="1">
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></readBytes>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
	</class>
	<class path="flash.utils.IDataOutput" params="" file="/usr/lib/haxe/std/flash/utils/IDataOutput.hx" extern="1" interface="1">
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></writeBytes>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
	</class>
	<class path="flash.net.Socket" params="" file="/usr/lib/haxe/std/flash/net/Socket.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.utils.IDataInput"/>
		<implements path="flash.utils.IDataOutput"/>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></writeBytes>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></readBytes>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
		<connect public="1" set="method"><f a="host:port">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<timeout public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</timeout>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<bytesPending public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</bytesPending>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<new public="1" set="method"><f a="?host:?port">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.URLRequest" params="" file="/usr/lib/haxe/std/flash/net/URLRequest.hx" extern="1">
		<url public="1"><c path="String"/></url>
		<requestHeaders public="1"><c path="Array"><c path="flash.net.URLRequestHeader"/></c></requestHeaders>
		<method public="1"><c path="String"/></method>
		<digest public="1"><c path="String"/></digest>
		<data public="1"><d/></data>
		<contentType public="1"><c path="String"/></contentType>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="/usr/lib/haxe/std/flash/net/URLRequestHeader.hx" extern="1">
		<value public="1"><c path="String"/></value>
		<name public="1"><c path="String"/></name>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="/usr/lib/haxe/std/flash/system/ApplicationDomain.hx" extern="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" set="null" static="1"><c path="flash.system.ApplicationDomain"/></currentDomain>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDefinition>
		<getQualifiedDefinitionNames public="1">
			<f a=""><c path="flash.Vector"><c path="String"/></c></f>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</getQualifiedDefinitionNames>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getDefinition>
		<parentDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></parentDomain>
		<domainMemory public="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</domainMemory>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.Capabilities" params="" file="/usr/lib/haxe/std/flash/system/Capabilities.hx" extern="1">
		<_internal public="1" set="null" static="1"><x path="UInt"/></_internal>
		<avHardwareDisable public="1" set="null" static="1"><x path="Bool"/></avHardwareDisable>
		<cpuArchitecture public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</cpuArchitecture>
		<hasAccessibility public="1" set="null" static="1"><x path="Bool"/></hasAccessibility>
		<hasAudio public="1" set="null" static="1"><x path="Bool"/></hasAudio>
		<hasAudioEncoder public="1" set="null" static="1"><x path="Bool"/></hasAudioEncoder>
		<hasEmbeddedVideo public="1" set="null" static="1"><x path="Bool"/></hasEmbeddedVideo>
		<hasIME public="1" set="null" static="1"><x path="Bool"/></hasIME>
		<hasMP3 public="1" set="null" static="1"><x path="Bool"/></hasMP3>
		<hasPrinting public="1" set="null" static="1"><x path="Bool"/></hasPrinting>
		<hasScreenBroadcast public="1" set="null" static="1"><x path="Bool"/></hasScreenBroadcast>
		<hasScreenPlayback public="1" set="null" static="1"><x path="Bool"/></hasScreenPlayback>
		<hasStreamingAudio public="1" set="null" static="1"><x path="Bool"/></hasStreamingAudio>
		<hasStreamingVideo public="1" set="null" static="1"><x path="Bool"/></hasStreamingVideo>
		<hasTLS public="1" set="null" static="1"><x path="Bool"/></hasTLS>
		<hasVideoEncoder public="1" set="null" static="1"><x path="Bool"/></hasVideoEncoder>
		<isDebugger public="1" set="null" static="1"><x path="Bool"/></isDebugger>
		<isEmbeddedInAcrobat public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isEmbeddedInAcrobat>
		<language public="1" set="null" static="1"><c path="String"/></language>
		<localFileReadDisable public="1" set="null" static="1"><x path="Bool"/></localFileReadDisable>
		<manufacturer public="1" set="null" static="1"><c path="String"/></manufacturer>
		<maxLevelIDC public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxLevelIDC>
		<os public="1" set="null" static="1"><c path="String"/></os>
		<pixelAspectRatio public="1" set="null" static="1"><x path="Float"/></pixelAspectRatio>
		<playerType public="1" set="null" static="1"><c path="String"/></playerType>
		<screenColor public="1" set="null" static="1"><c path="String"/></screenColor>
		<screenDPI public="1" set="null" static="1"><x path="Float"/></screenDPI>
		<screenResolutionX public="1" set="null" static="1"><x path="Float"/></screenResolutionX>
		<screenResolutionY public="1" set="null" static="1"><x path="Float"/></screenResolutionY>
		<serverString public="1" set="null" static="1"><c path="String"/></serverString>
		<supports32BitProcesses public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</supports32BitProcesses>
		<supports64BitProcesses public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</supports64BitProcesses>
		<touchscreenType public="1" static="1">
			<e path="flash.system.TouchscreenType"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</touchscreenType>
		<version public="1" set="null" static="1"><c path="String"/></version>
		<hasMultiChannelAudio public="1" static="1">
			<f a="type">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</hasMultiChannelAudio>
	</class>
	<enum path="flash.system.ImageDecodingPolicy" params="" file="/usr/lib/haxe/std/flash/system/ImageDecodingPolicy.hx">
		<ON_DEMAND/>
		<ON_LOAD/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.system.LoaderContext" params="" file="/usr/lib/haxe/std/flash/system/LoaderContext.hx" extern="1">
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<requestedContentParent public="1">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestedContentParent>
		<parameters public="1">
			<d/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</parameters>
		<imageDecodingPolicy public="1">
			<e path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</imageDecodingPolicy>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<allowLoadBytesCodeExecution public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowLoadBytesCodeExecution>
		<allowCodeImport public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowCodeImport>
		<new public="1" set="method"><f a="?checkPolicyFile:?applicationDomain:?securityDomain">
	<x path="Bool"/>
	<c path="flash.system.ApplicationDomain"/>
	<c path="flash.system.SecurityDomain"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="/usr/lib/haxe/std/flash/system/SecurityDomain.hx" extern="1">
		<currentDomain public="1" set="null" static="1"><c path="flash.system.SecurityDomain"/></currentDomain>
		<domainID public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_3</e></m></meta>
		</domainID>
	</class>
	<enum path="flash.system.TouchscreenType" params="" file="/usr/lib/haxe/std/flash/system/TouchscreenType.hx">
		<FINGER/>
		<NONE/>
		<STYLUS/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.AntiAliasType" params="" file="/usr/lib/haxe/std/flash/text/AntiAliasType.hx">
		<ADVANCED/>
		<NORMAL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.GridFitType" params="" file="/usr/lib/haxe/std/flash/text/GridFitType.hx">
		<NONE/>
		<PIXEL/>
		<SUBPIXEL/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.text.StyleSheet" params="" file="/usr/lib/haxe/std/flash/text/StyleSheet.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<transform public="1" set="method"><f a="formatObject">
	<t path="flash.utils.Object"/>
	<c path="flash.text.TextFormat"/>
</f></transform>
		<setStyle public="1" set="method"><f a="styleName:styleObject">
	<c path="String"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></setStyle>
		<parseCSS public="1" set="method"><f a="CSSText">
	<c path="String"/>
	<x path="Void"/>
</f></parseCSS>
		<getStyle public="1" set="method"><f a="styleName">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getStyle>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<styleNames public="1" set="null"><c path="Array"><d/></c></styleNames>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.text.TextField" params="" file="/usr/lib/haxe/std/flash/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<isFontCompatible public="1" set="method" static="1">
			<f a="fontName:fontStyle">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isFontCompatible>
		<setTextFormat public="1" set="method"><f a="format:?beginIndex:?endIndex">
	<c path="flash.text.TextFormat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setTextFormat>
		<setSelection public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSelection>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceText>
		<replaceSelectedText public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></replaceSelectedText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<x path="Bool"/>
</f></pasteRichText>
		<insertXMLText public="1" set="method"><f a="beginIndex:endIndex:richText:?pasting">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></insertXMLText>
		<getXMLText public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getXMLText>
		<getTextRuns public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRuns>
		<getTextFormat public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.TextFormat"/>
</f></getTextFormat>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getParagraphLength public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getParagraphLength>
		<getLineText public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getLineOffset public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineOffset>
		<getLineMetrics public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineLength public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineLength>
		<getLineIndexOfChar public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineIndexOfChar>
		<getLineIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getLineIndexAtPoint>
		<getImageReference public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getImageReference>
		<getFirstCharInParagraph public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getFirstCharInParagraph>
		<getCharIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getCharIndexAtPoint>
		<getCharBoundaries public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getCharBoundaries>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<appendText public="1" set="method"><f a="newText">
	<c path="String"/>
	<x path="Void"/>
</f></appendText>
		<wordWrap public="1"><x path="Bool"/></wordWrap>
		<useRichTextClipboard public="1"><x path="Bool"/></useRichTextClipboard>
		<type public="1"><e path="flash.text.TextFieldType"/></type>
		<thickness public="1"><x path="Float"/></thickness>
		<textWidth public="1" set="null"><x path="Float"/></textWidth>
		<textInteractionMode public="1">
			<e path="flash.text.TextInteractionMode"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</textInteractionMode>
		<textHeight public="1" set="null"><x path="Float"/></textHeight>
		<textColor public="1"><x path="UInt"/></textColor>
		<text public="1"><c path="String"/></text>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<sharpness public="1"><x path="Float"/></sharpness>
		<selectionEndIndex public="1" set="null"><x path="Int"/></selectionEndIndex>
		<selectionBeginIndex public="1" set="null"><x path="Int"/></selectionBeginIndex>
		<selectedText public="1" set="null"><c path="String"/></selectedText>
		<selectable public="1"><x path="Bool"/></selectable>
		<scrollV public="1"><x path="Int"/></scrollV>
		<scrollH public="1"><x path="Int"/></scrollH>
		<restrict public="1"><c path="String"/></restrict>
		<numLines public="1" set="null"><x path="Int"/></numLines>
		<multiline public="1"><x path="Bool"/></multiline>
		<mouseWheelEnabled public="1"><x path="Bool"/></mouseWheelEnabled>
		<maxScrollV public="1" set="null"><x path="Int"/></maxScrollV>
		<maxScrollH public="1" set="null"><x path="Int"/></maxScrollH>
		<maxChars public="1"><x path="Int"/></maxChars>
		<length public="1" set="null"><x path="Int"/></length>
		<htmlText public="1"><c path="String"/></htmlText>
		<gridFitType public="1"><e path="flash.text.GridFitType"/></gridFitType>
		<embedFonts public="1"><x path="Bool"/></embedFonts>
		<displayAsPassword public="1"><x path="Bool"/></displayAsPassword>
		<defaultTextFormat public="1"><c path="flash.text.TextFormat"/></defaultTextFormat>
		<condenseWhite public="1"><x path="Bool"/></condenseWhite>
		<caretIndex public="1" set="null"><x path="Int"/></caretIndex>
		<bottomScrollV public="1" set="null"><x path="Int"/></bottomScrollV>
		<borderColor public="1"><x path="UInt"/></borderColor>
		<border public="1"><x path="Bool"/></border>
		<backgroundColor public="1"><x path="UInt"/></backgroundColor>
		<background public="1"><x path="Bool"/></background>
		<autoSize public="1"><e path="flash.text.TextFieldAutoSize"/></autoSize>
		<antiAliasType public="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<alwaysShowSelection public="1"><x path="Bool"/></alwaysShowSelection>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.text.TextFieldAutoSize" params="" file="/usr/lib/haxe/std/flash/text/TextFieldAutoSize.hx">
		<CENTER/>
		<LEFT/>
		<NONE/>
		<RIGHT/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.TextFieldType" params="" file="/usr/lib/haxe/std/flash/text/TextFieldType.hx">
		<DYNAMIC/>
		<INPUT/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.text.TextFormat" params="" file="/usr/lib/haxe/std/flash/text/TextFormat.hx" extern="1">
		<url public="1"><c path="String"/></url>
		<underline public="1"><t path="Null"><x path="Bool"/></t></underline>
		<target public="1"><c path="String"/></target>
		<tabStops public="1"><c path="Array"><x path="UInt"/></c></tabStops>
		<size public="1"><t path="Null"><x path="Float"/></t></size>
		<rightMargin public="1"><t path="Null"><x path="Float"/></t></rightMargin>
		<letterSpacing public="1"><t path="Null"><x path="Float"/></t></letterSpacing>
		<leftMargin public="1"><t path="Null"><x path="Float"/></t></leftMargin>
		<leading public="1"><t path="Null"><x path="Float"/></t></leading>
		<kerning public="1"><t path="Null"><x path="Bool"/></t></kerning>
		<italic public="1"><t path="Null"><x path="Bool"/></t></italic>
		<indent public="1"><t path="Null"><x path="Float"/></t></indent>
		<font public="1"><c path="String"/></font>
		<display public="1"><e path="flash.text.TextFormatDisplay"/></display>
		<color public="1"><t path="Null"><x path="UInt"/></t></color>
		<bullet public="1"><t path="Null"><x path="Bool"/></t></bullet>
		<bold public="1"><t path="Null"><x path="Bool"/></t></bold>
		<blockIndent public="1"><t path="Null"><x path="Float"/></t></blockIndent>
		<align public="1"><e path="flash.text.TextFormatAlign"/></align>
		<new public="1" set="method"><f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="flash.text.TextFormatAlign"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.TextFormatAlign" params="" file="/usr/lib/haxe/std/flash/text/TextFormatAlign.hx">
		<CENTER/>
		<END/>
		<JUSTIFY/>
		<LEFT/>
		<RIGHT/>
		<START/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.TextFormatDisplay" params="" file="/usr/lib/haxe/std/flash/text/TextFormatDisplay.hx">
		<BLOCK/>
		<INLINE/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="flash.text.TextInteractionMode" params="" file="/usr/lib/haxe/std/flash/text/TextInteractionMode.hx">
		<NORMAL/>
		<SELECTION/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="flash.text.TextLineMetrics" params="" file="/usr/lib/haxe/std/flash/text/TextLineMetrics.hx" extern="1">
		<x public="1"><x path="Float"/></x>
		<width public="1"><x path="Float"/></width>
		<leading public="1"><x path="Float"/></leading>
		<height public="1"><x path="Float"/></height>
		<descent public="1"><x path="Float"/></descent>
		<ascent public="1"><x path="Float"/></ascent>
		<new public="1" set="method"><f a="x:width:height:ascent:descent:leading">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="/usr/lib/haxe/std/flash/text/TextSnapshot.hx" extern="1">
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setSelected>
		<setSelectColor public="1" set="method"><f a="?hexColor">
	<x path="UInt"/>
	<x path="Void"/>
</f></setSelectColor>
		<hitTestTextNearPos public="1" set="method"><f a="x:y:?maxDistance">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></hitTestTextNearPos>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<getText public="1" set="method"><f a="beginIndex:endIndex:?includeLineEndings">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="String"/>
</f></getText>
		<getSelectedText public="1" set="method"><f a="?includeLineEndings">
	<x path="Bool"/>
	<c path="String"/>
</f></getSelectedText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></getSelected>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></findText>
		<charCount public="1" set="null"><x path="Int"/></charCount>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenu" params="" file="/usr/lib/haxe/std/flash/ui/ContextMenu.hx" extern="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<hideBuiltInItems public="1" set="method"><f a=""><x path="Void"/></f></hideBuiltInItems>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<link public="1">
			<c path="flash.net.URLRequest"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</link>
		<customItems public="1"><c path="Array"><d/></c></customItems>
		<clipboardMenu public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardMenu>
		<clipboardItems public="1">
			<c path="flash.ui.ContextMenuClipboardItems"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardItems>
		<builtInItems public="1"><c path="flash.ui.ContextMenuBuiltInItems"/></builtInItems>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="/usr/lib/haxe/std/flash/ui/ContextMenuBuiltInItems.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<zoom public="1"><x path="Bool"/></zoom>
		<save public="1"><x path="Bool"/></save>
		<rewind public="1"><x path="Bool"/></rewind>
		<quality public="1"><x path="Bool"/></quality>
		<print public="1"><x path="Bool"/></print>
		<play public="1"><x path="Bool"/></play>
		<loop public="1"><x path="Bool"/></loop>
		<forwardAndBack public="1"><x path="Bool"/></forwardAndBack>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="/usr/lib/haxe/std/flash/ui/ContextMenuClipboardItems.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<selectAll public="1"><x path="Bool"/></selectAll>
		<paste public="1"><x path="Bool"/></paste>
		<cut public="1"><x path="Bool"/></cut>
		<copy public="1"><x path="Bool"/></copy>
		<clear public="1"><x path="Bool"/></clear>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.utils.IDataInput2" params="" file="/usr/lib/haxe/std/flash/utils/IDataInput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataInput"/></class>
	<class path="flash.utils.IDataOutput2" params="" file="/usr/lib/haxe/std/flash/utils/IDataOutput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataOutput"/></class>
	<class path="flash.utils.ByteArray" params="" file="/usr/lib/haxe/std/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput2"/>
		<implements path="flash.utils.IDataOutput2"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></writeBytes>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<uncompress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></uncompress>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></readBytes>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<inflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</inflate>
		<deflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</deflate>
		<compress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></compress>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clear>
		<atomicCompareAndSwapLength public="1">
			<f a="expectedLength:newLength">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapLength>
		<atomicCompareAndSwapIntAt public="1">
			<f a="byteIndex:expectedValue:newValue">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</atomicCompareAndSwapIntAt>
		<shareable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_4</e></m></meta>
		</shareable>
		<position public="1"><x path="UInt"/></position>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<length public="1"><x path="UInt"/></length>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.utils.CompressionAlgorithm" params="" file="/usr/lib/haxe/std/flash/utils/CompressionAlgorithm.hx">
		<DEFLATE/>
		<LZMA/>
		<ZLIB/>
		<meta>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
	</enum>
	<class path="flash.utils.Dictionary" params="" file="/usr/lib/haxe/std/flash/utils/Dictionary.hx" extern="1">
		<new public="1" set="method"><f a="?weakKeys">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.utils.Endian" params="" file="/usr/lib/haxe/std/flash/utils/Endian.hx">
		<BIG_ENDIAN/>
		<LITTLE_ENDIAN/>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<typedef path="flash.utils.Function" params="" file="/usr/lib/haxe/std/flash/utils/Function.hx"><d/></typedef>
	<class path="flash.utils.Namespace" params="" file="/usr/lib/haxe/std/flash/utils/Namespace.hx" extern="1">
		<uri public="1" set="null"><c path="String"/></uri>
		<prefix public="1" set="null"><d/></prefix>
		<new public="1" set="method"><f a="?prefix:?uri">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="flash.utils.Object" params="" file="/usr/lib/haxe/std/flash/utils/Object.hx"><d/></typedef>
	<class path="flash.utils.QName" params="" file="/usr/lib/haxe/std/flash/utils/QName.hx" extern="1">
		<uri public="1" set="null"><d/></uri>
		<localName public="1" set="null"><c path="String"/></localName>
		<new public="1" set="method"><f a="?namespace:?name">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.utils.RegExp" params="" file="/usr/lib/haxe/std/flash/utils/RegExp.hx" extern="1">
		<test public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</test>
		<exec public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</exec>
		<source public="1" set="null"><c path="String"/></source>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<global public="1" set="null"><x path="Bool"/></global>
		<extended public="1" set="null"><x path="Bool"/></extended>
		<dotall public="1" set="null"><x path="Bool"/></dotall>
		<new public="1" set="method"><f a="?pattern:?options">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.xml.XML" params="" file="/usr/lib/haxe/std/flash/xml/XML.hx" extern="1">
		<ignoreComments public="1" static="1"><x path="Bool"/></ignoreComments>
		<ignoreProcessingInstructions public="1" static="1"><x path="Bool"/></ignoreProcessingInstructions>
		<ignoreWhitespace public="1" static="1"><x path="Bool"/></ignoreWhitespace>
		<prettyIndent public="1" static="1"><x path="Int"/></prettyIndent>
		<prettyPrinting public="1" static="1"><x path="Bool"/></prettyPrinting>
		<defaultSettings public="1" set="method" static="1"><f a=""><d/></f></defaultSettings>
		<setSettings public="1" set="method" static="1"><f a="?o">
	<d/>
	<x path="Void"/>
</f></setSettings>
		<settings public="1" set="method" static="1"><f a=""><d/></f></settings>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></valueOf>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toJSON public="1">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<setNotification public="1" set="method"><f a="f">
	<t path="flash.utils.Function"/>
	<d/>
</f></setNotification>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<notification public="1" set="method"><f a=""><t path="flash.utils.Function"/></f></notification>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></normalize>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></copy>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><c path="flash.xml.XMLList"/></haxe_dynamic>
	</class>
	<class path="flash.xml.XMLList" params="" file="/usr/lib/haxe/std/flash/xml/XMLList.hx" extern="1">
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></valueOf>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toJSON public="1">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></normalize>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></copy>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.
		
		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If `e` has no package, the enum name is returned.
		
		If `e` is null, the result is unspecified.
		
		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.
		
		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.
		
		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.
		
		This may return the empty Array [] if all constructors of `e` require
		arguments.
		
		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.
		
		The order of the constructor names in the returned Array is preserved
		from the original syntax.
		
		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.
		
		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.
		
		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.
		
		The result String does not contain any constructor arguments.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.
		
		If `e` has no arguments, the result is [].
		
		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.
		
		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.
		
		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Log" params="" file="/usr/lib/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<clear public="1" set="dynamic" line="104" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears the trace output.</haxe_doc>
		</clear>
		<setColor public="1" set="dynamic" line="117" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the color of the trace output to `rgb`.</haxe_doc>
		</setColor>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.
	
	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.
	
	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Serializer" params="" file="/usr/lib/haxe/std/haxe/Serializer.hx">
		<USE_CACHE public="1" line="55" static="1">
			<x path="Bool"/>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set USE_CACHE to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of Serializer by
		setting their useCache field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" line="67" static="1">
			<x path="Bool"/>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of Serializer by
		setting their useEnumIndex field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 line="69" static="1"><c path="String"/></BASE64>
		<run public="1" set="method" line="521" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

		This is a convenience function for creating a new instance of
		Serializer, serialize `v` into it and obtain the result through a call
		to toString().</haxe_doc>
		</run>
		<serializeException public="1" set="method" line="498"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<serialize public="1" set="method" line="224">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

		All haxe-defined values and objects with the exception of functions can
		be serialized. Serialization of external/native objects is not
		guaranteed to work.

		The values of `this.useCache` and `this.useEnumIndex` may affect
		serialization output.</haxe_doc>
		</serialize>
		<serializeFields set="method" line="206"><f a="v">
	<unknown/>
	<x path="Void"/>
</f></serializeFields>
		<serializeClassFields set="method" line="192"><f a="v:c">
	<a><hasOwnProperty set="null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></hasOwnProperty></a>
	<x path="Class"><d/></x>
	<x path="Void"/>
</f></serializeClassFields>
		<serializeRef set="method" line="169"><f a="v">
	<unknown/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeString set="method" line="150"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<toString public="1" set="method" line="115">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		http://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See USE_ENUM_INDEX for a complete description.</haxe_doc>
		</useEnumIndex>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See USE_CACHE for a complete description.</haxe_doc>
		</useCache>
		<scount><x path="Int"/></scount>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<cache><c path="Array"><d/></c></cache>
		<buf><c path="StringBuf"/></buf>
		<new public="1" set="method" line="100">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each Serializer instance maintains its own cache if this.useCache` is
		true.</haxe_doc>
		</new>
		<haxe_doc>The Serializer class can be used to encode values and objects into a String,
	from which the Unserializer class can recreate the original representation.

	This class can be used in two ways:
	
	- create a new Serializer() instance, call its serialize() method with
		any argument and finally retrieve the String representation from
		toString()
	- call Serializer.run() to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	`http://haxe.org/manual/serialization/format`</haxe_doc>
	</class>
	<class path="haxe.Unserializer" params="" file="/usr/lib/haxe/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" line="60" static="1">
			<t path="haxe.TypeResolver"/>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a Class or Enum instance from a given String. By
		default, the haxe Type Api is used.

		A type resolver must provide two methods:
		
		1. resolveClass(name:String):Class<Dynamic> is called to determine a
				Class from a class name
		2. resolveEnum(name:String):Enum<Dynamic> is called to determine an
				Enum from an enum name

		This value is applied when a new Unserializer instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 line="62" static="1"><c path="String"/></BASE64>
		<CODES line="65" static="1"><c path="flash.utils.ByteArray"/></CODES>
		<initCodes set="method" line="67" static="1"><f a=""><c path="flash.utils.ByteArray"/></f></initCodes>
		<run public="1" set="method" line="433" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its unserialize() method
		once.</haxe_doc>
		</run>
		<unserialize public="1" set="method" line="219">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from Type.createEmptyInstance, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<unserializeEnum set="method" line="187"><f a="edecl:tag">
	<x path="Enum"><unknown/></x>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserializeObject set="method" line="172"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<readDigits set="method" line="147"><f a=""><x path="Int"/></f></readDigits>
		<get get="inline" set="null" line="143"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<getResolver public="1" set="method" line="139">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of `this` Unserializer instance.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</getResolver>
		<setResolver public="1" set="method" line="124">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is null, a special resolver is used which returns null for all
		input values.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</setResolver>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<scache><c path="Array"><c path="String"/></c></scache>
		<cache><c path="Array"><d/></c></cache>
		<length><x path="Int"/></length>
		<pos><x path="Int"/></pos>
		<buf><c path="String"/></buf>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc>The Unserializer class is the complement to the Serializer class. It parses
	a serialization String and creates objects from the contained data.

	This class can be used in two ways:
	
	- create a new Unserializer() instance with a given serialization
		String, then call its unserialize() method until all values are
		extracted
	- call Unserializer.run() to unserialize a single value from a given
		String</haxe_doc>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/usr/lib/haxe/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<nbits><x path="Int"/></nbits>
		<base><c path="haxe.io.Bytes"/></base>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows to encode/decode String and bytes using a power of two base dictionnary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="/usr/lib/haxe/std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="26" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="36" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="104" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bytes2blks set="method" line="121" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<hex set="method" line="168"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<kt set="method" line="158">
			<f a="t">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the appropriate additive constant for the current iteration</haxe_doc>
		</kt>
		<ft set="method" line="148">
			<f a="t:b:c:d">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Perform the appropriate triplet combination function for the current iteration</haxe_doc>
		</ft>
		<rol get="inline" set="null" line="141">
			<f a="num:cnt">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotate a 32-bit number to the left</haxe_doc>
		</rol>
		<doEncode set="method" line="58"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="55"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/usr/lib/haxe/std/haxe/ds/BalancedTree.hx">
		<toString public="1" set="method" line="205"><f a=""><c path="String"/></f></toString>
		<compare set="method" line="201"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<balance set="method" line="187"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<removeMinBinding set="method" line="182"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<minBinding set="method" line="176"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<merge set="method" line="169"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<keysLoop set="method" line="161"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<iteratorLoop set="method" line="153"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<removeLoop set="method" line="145"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<setLoop set="method" line="132"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<keys public="1" set="method" line="126">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.
		
		This operation is performed in-order.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="115">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.
		
		This operation is performed in-order.</haxe_doc>
		</iterator>
		<exists public="1" set="method" line="99">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.
		
		This method returns true even if `key` is bound to null.
		
		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" set="method" line="82">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.
		
		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.
		
		Otherwise the binding of `key` is removed and true is returned.
		
		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
			</f>
			<haxe_doc>Returns the value `key` is bound to.
		
		If `key` is not bound to any value, `null` is returned.
		
		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.
		
		If `key` is already bound to a value, that binding disappears.
		
		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.
	
	Operations have a logarithmic average and worst-case cost.
	
	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/usr/lib/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<toString public="1" set="method" line="233"><f a=""><c path="String"/></f></toString>
		<get_height public="1" get="inline" set="null" line="231">
			<f a=""><x path="Int"/></f>
			<meta><m n=":extern"/></meta>
		</get_height>
		<_height><x path="Int"/></_height>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<new public="1" set="method" line="220"><f a="l:k:v:r:?h">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/usr/lib/haxe/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compareArgs set="method" line="42"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compare set="method" line="33" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.
	
	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
	<_new public="1" set="method" line="25" static="1">
		<f a=""><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></f>
		<meta><m n=":impl"/></meta>
	</_new>
	<set public="1" get="inline" set="null" line="28" static="1">
		<f a="this:k:v">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<c path="haxe.ds.HashMap.K"/>
			<c path="haxe.ds.HashMap.V"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="32" static="1">
		<f a="this:k">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<c path="haxe.ds.HashMap.K"/>
			<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</get>
	<exists public="1" get="inline" set="null" line="35" static="1">
		<f a="this:k">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</exists>
	<remove public="1" get="inline" set="null" line="38" static="1">
		<f a="this:k">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<c path="haxe.ds.HashMap.K"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</remove>
	<keys public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</keys>
	<iterator public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<a>
				<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
				<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
			</a>
			<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
</class></impl>
	</abstract>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<_new public="1" set="method" line="25" static="1">
			<f a=""><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></f>
			<meta><m n=":impl"/></meta>
		</_new>
		<set public="1" get="inline" set="null" line="28" static="1">
			<f a="this:k:v">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="32" static="1">
			<f a="this:k">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</get>
		<exists public="1" get="inline" set="null" line="35" static="1">
			<f a="this:k">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</exists>
		<remove public="1" get="inline" set="null" line="38" static="1">
			<f a="this:k">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</remove>
		<keys public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</keys>
		<iterator public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/usr/lib/haxe/std/flash/_std/haxe/ds/IntMap.hx">
		<implements path="IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<toString public="1" set="method" line="63">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<exists public="1" set="method" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<get public="1" set="method" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" set="method" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<h><c path="flash.utils.Dictionary"/></h>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.
	
	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/usr/lib/haxe/std/flash/_std/haxe/ds/ObjectMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<toString public="1" set="method" line="52">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="46">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="42">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<remove public="1" set="method" line="22">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<exists public="1" get="inline" set="null" line="18">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<set public="1" get="inline" set="null" line="14">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="10">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<new public="1" set="method" line="6">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.
	
	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.
	
	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._ObjectMap.NativePropertyIterator" params="" file="/usr/lib/haxe/std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<iterator public="1" get="inline" set="null" line="68" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._ObjectMap.NativePropertyIterator"/>
</f></iterator>
		<next public="1" get="inline" set="null" line="85"><f a=""><d/></f></next>
		<hasNext public="1" get="inline" set="null" line="76"><f a=""><x path="Bool"/></f></hasNext>
		<index><x path="Int"/></index>
		<collection><d/></collection>
		<new set="method" line="74"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds._ObjectMap.NativeValueIterator" params="" file="/usr/lib/haxe/std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<iterator public="1" get="inline" set="null" line="97" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._ObjectMap.NativeValueIterator"/>
</f></iterator>
		<next public="1" get="inline" set="null" line="114"><f a=""><d/></f></next>
		<hasNext public="1" get="inline" set="null" line="105"><f a=""><x path="Bool"/></f></hasNext>
		<index><x path="Int"/></index>
		<collection><d/></collection>
		<new set="method" line="103"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/usr/lib/haxe/std/flash/_std/haxe/ds/StringMap.hx">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<toString public="1" set="method" line="64">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="55">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="51">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<remove public="1" set="method" line="44">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<exists public="1" set="method" line="40">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<get public="1" set="method" line="36">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<set public="1" set="method" line="32">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<h><c path="flash.utils.Dictionary"/></h>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.
	
	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/usr/lib/haxe/std/flash/_std/haxe/ds/WeakMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<toString public="1" set="method" line="52">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="46">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="42">
			<f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<remove public="1" set="method" line="22">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<exists public="1" get="inline" set="null" line="18">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<set public="1" get="inline" set="null" line="14">
			<f a="key:value">
				<c path="haxe.ds.WeakMap.K"/>
				<c path="haxe.ds.WeakMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="10">
			<f a="key">
				<c path="haxe.ds.WeakMap.K"/>
				<t path="Null"><c path="haxe.ds.WeakMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<new public="1" set="method" line="6">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new WeakMap.</haxe_doc>
		</new>
		<haxe_doc>WeakMap allows mapping of object keys to arbitrary values.
	
	The keys are considered to be weak references on static targets.
	
	See `Map` for documentation details.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds._WeakMap.NativePropertyIterator" params="" file="/usr/lib/haxe/std/flash/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<iterator public="1" get="inline" set="null" line="68" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._WeakMap.NativePropertyIterator"/>
</f></iterator>
		<next public="1" get="inline" set="null" line="85"><f a=""><d/></f></next>
		<hasNext public="1" get="inline" set="null" line="76"><f a=""><x path="Bool"/></f></hasNext>
		<index><x path="Int"/></index>
		<collection><d/></collection>
		<new set="method" line="74"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds._WeakMap.NativeValueIterator" params="" file="/usr/lib/haxe/std/flash/_std/haxe/ds/WeakMap.hx" private="1" module="haxe.ds.WeakMap">
		<iterator public="1" get="inline" set="null" line="97" static="1"><f a="collection">
	<d/>
	<c path="haxe.ds._WeakMap.NativeValueIterator"/>
</f></iterator>
		<next public="1" get="inline" set="null" line="114"><f a=""><d/></f></next>
		<hasNext public="1" get="inline" set="null" line="105"><f a=""><x path="Bool"/></f></hasNext>
		<index><x path="Int"/></index>
		<collection><d/></collection>
		<new set="method" line="103"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.io.Bytes" params="" file="/usr/lib/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="250" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="275" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="324" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<fastGet public="1" get="inline" set="null" line="342" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<getData public="1" get="inline" set="null" line="246"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<toHex public="1" set="method" line="232"><f a=""><c path="String"/></f></toHex>
		<toString public="1" set="method" line="211"><f a=""><c path="String"/></f></toString>
		<readString public="1" set="method" line="163"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<compare public="1" set="method" line="125"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<sub public="1" set="method" line="99"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<blit public="1" set="method" line="68"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<set public="1" get="inline" set="null" line="50"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<get public="1" get="inline" set="null" line="34"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<b><t path="haxe.io.BytesData"/></b>
		<length public="1" set="null"><x path="Int"/></length>
		<new set="method" line="29"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx"><c path="flash.utils.ByteArray"/></typedef>
	<enum path="haxe.io.Error" params="" file="/usr/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<typedef path="haxe.macro.Position" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<enum path="haxe.macro.Constant" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v"><c path="String"/></CInt>
		<CFloat a="f"><c path="String"/></CFloat>
		<CString a="s"><c path="String"/></CString>
		<CIdent a="s"><c path="String"/></CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd/>
		<OpMult/>
		<OpDiv/>
		<OpSub/>
		<OpAssign/>
		<OpEq/>
		<OpNotEq/>
		<OpGt/>
		<OpGte/>
		<OpLt/>
		<OpLte/>
		<OpAnd/>
		<OpOr/>
		<OpXor/>
		<OpBoolAnd/>
		<OpBoolOr/>
		<OpShl/>
		<OpShr/>
		<OpUShr/>
		<OpMod/>
		<OpAssignOp a="op"><e path="haxe.macro.Binop"/></OpAssignOp>
		<OpInterval/>
		<OpArrow/>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement/>
		<OpDecrement/>
		<OpNot/>
		<OpNeg/>
		<OpNegBits/>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EVars a="vars"><c path="Array"><t path="haxe.macro.Var"/></c></EVars>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
		</EFunction>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
		</ETry>
		<EReturn a="?e"><t path="haxe.macro.Expr"/></EReturn>
		<EBreak/>
		<EContinue/>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EDisplay>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
		</EMeta>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TExtend a="p:fields">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TOptional a="t"><e path="haxe.macro.ComplexType"/></TOptional>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params><c path="Array"><e path="haxe.macro.TypeParam"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.Expr"/></c></params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<enum path="haxe.macro.Access" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic/>
		<APrivate/>
		<AStatic/>
		<AOverride/>
		<ADynamic/>
		<AInline/>
		<AMacro/>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
		</FVar>
		<FFun a="f"><t path="haxe.macro.Function"/></FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
		</FProp>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern><x path="Bool"/></isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDEnum/>
		<TDStructure/>
		<TDClass a="?superClass:?interfaces:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
		</TDClass>
		<TDAlias a="t"><e path="haxe.macro.ComplexType"/></TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		</TDAbstract>
	</enum>
	<class path="haxe.macro.Error" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<toString set="method" line="239"><f a=""><c path="String"/></f></toString>
		<pos public="1"><t path="haxe.macro.Position"/></pos>
		<message public="1"><c path="String"/></message>
		<new public="1" set="method" line="235"><f a="m:p">
	<c path="String"/>
	<t path="haxe.macro.Position"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<class path="haxe.remoting.AsyncConnection" params="" file="/usr/lib/haxe/std/haxe/remoting/AsyncConnection.hx" interface="1">
		<setErrorHandler public="1" set="method"><f a="error">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method"><f a="params:?result">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.Context" params="" file="/usr/lib/haxe/std/haxe/remoting/Context.hx">
		<share public="1" set="method" line="55" static="1"><f a="name:obj">
	<c path="String"/>
	<a/>
	<c path="haxe.remoting.Context"/>
</f></share>
		<call public="1" set="method" line="36"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<addObject public="1" set="method" line="32"><f a="name:obj:?recursive">
	<c path="String"/>
	<a/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addObject>
		<objects><c path="haxe.ds.StringMap"><a>
	<rec><x path="Bool"/></rec>
	<obj><d/></obj>
</a></c></objects>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="jabber.Attention" params="" file="../../jabber/Attention.hx">
		<capture public="1" set="method" line="33" static="1">
			<f a="stream:jid:message">
				<c path="jabber.Stream"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends a message packet to the given entity inluding a property to get attention</haxe_doc>
		</capture>
		<haxe_doc>Extension for getting the attention of another user.
	XEP 224 - Attention: http://www.xmpp.org/extensions/xep-0224.html</haxe_doc>
	</class>
	<class path="jabber.EntityCapabilities" params="" file="../../jabber/EntityCapabilities.hx">
		<requestDiscoInfo set="method" line="131"><f a="jid:?node">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></requestDiscoInfo>
		<handleInfoResponse set="method" line="114"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleInfoResponse>
		<handlePresence set="method" line="105"><f a="p">
	<c path="xmpp.Presence"/>
	<x path="Void"/>
</f></handlePresence>
		<dispose public="1" set="method" line="100"><f a=""><x path="Void"/></f></dispose>
		<interceptPacket public="1" set="method" line="84"><f a="p">
	<c path="xmpp.Packet"/>
	<c path="xmpp.Packet"/>
</f></interceptPacket>
		<createVerificationString public="1" set="method" line="80">
			<f a="identities:features:?dataform">
				<c path="Array"><t path="xmpp.disco.Identity"/></c>
				<t path="Iterable"><c path="String"/></t>
				<c path="xmpp.DataForm"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create/Recreate the verification string
		Call if your stream changes features</haxe_doc>
		</createVerificationString>
		<x><c path="Xml"/></x>
		<collector><c path="jabber.PacketCollector"/></collector>
		<ver public="1" set="null">
			<c path="String"/>
			<haxe_doc>My own verification string</haxe_doc>
		</ver>
		<node public="1" set="null">
			<c path="String"/>
			<haxe_doc>A URI that uniquely identifies a software application,
		typically a URL at the website of the project or company that produces the software</haxe_doc>
		</node>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onError public="1" set="dynamic" line="39"><f a="e">
	<c path="jabber.XMPPError"/>
	<x path="Void"/>
</f></onError>
		<onInfo public="1" set="dynamic" line="37">
			<f a="jid:info:?ver">
				<c path="String"/>
				<c path="xmpp.disco.Info"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Fired when a new entity capability got discovered</haxe_doc>
		</onInfo>
		<onCaps public="1" set="dynamic" line="34">
			<f a="jid:caps:cb">
				<c path="String"/>
				<c path="xmpp.Caps"/>
				<f a="">
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Callback to application for checking if caps already exist (in cache)</haxe_doc>
		</onCaps>
		<new public="1" set="method" line="57"><f a="stream:node:identities:?ext">
	<c path="jabber.Stream"/>
	<c path="String"/>
	<c path="Array"><t path="xmpp.disco.Identity"/></c>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Extension for broadcasting and dynamically discovering client, device, or generic entity capabilities.

	XEP-0085: Entity Capabilities: http://xmpp.org/extensions/xep-0115.html</haxe_doc>
	</class>
	<class path="jabber.EntityTime" params="" file="../../jabber/EntityTime.hx">
		<handleLoad set="method" line="49"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleLoad>
		<load public="1" set="method" line="43">
			<f a="jid">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Request the local time of another jabber entity.</haxe_doc>
		</load>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onError public="1" set="dynamic" line="32"><f a="e">
	<c path="jabber.XMPPError"/>
	<x path="Void"/>
</f></onError>
		<onLoad public="1" set="dynamic" line="31"><f a="jid:t">
	<c path="String"/>
	<c path="xmpp.EntityTime"/>
	<x path="Void"/>
</f></onLoad>
		<new public="1" set="method" line="36"><f a="s">
	<c path="jabber.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Extension for requesting the local time of an entity.

	XEP 202 - EntityTime: http://www.xmpp.org/extensions/xep-0202.html</haxe_doc>
	</class>
	<class path="jabber.EntityTimeListener" params="" file="../../jabber/EntityTimeListener.hx">
		<handleRequest set="method" line="49"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleRequest>
		<dispose public="1" set="method" line="44"><f a=""><x path="Void"/></f></dispose>
		<c><c path="jabber.PacketCollector"/></c>
		<time public="1" set="null"><c path="xmpp.EntityTime"/></time>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<new public="1" set="method" line="36"><f a="stream:?tzo">
	<c path="jabber.Stream"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Listens/Answers entity time requests.

	XEP 202 - EntityTime http://www.xmpp.org/extensions/xep-0202.html</haxe_doc>
	</class>
	<class path="jabber.JID" params="" file="../../jabber/JID.hx">
		<toString public="1" set="method" line="79"><f a=""><c path="String"/></f></toString>
		<copy public="1" set="method" line="71"><f a=""><c path="jabber.JID"/></f></copy>
		<get_s get="inline" set="null" line="69"><f a=""><c path="String"/></f></get_s>
		<get_bare set="method" line="65"><f a=""><c path="String"/></f></get_bare>
		<s public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Just a shortcut for toString()</haxe_doc>
		</s>
		<bare public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>JID without resource</haxe_doc>
		</bare>
		<resource public="1">
			<c path="String"/>
			<haxe_doc>Resourcepart, uniquely identifies a specific connection (e.g., a device or location)</haxe_doc>
		</resource>
		<domain public="1">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</domain>
		<node public="1">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</node>
		<new public="1" set="method" line="55"><f a="?t">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Unique Jabber-ID.

	A JID is made up of a node (generally a username), a domain, and a resource.

		jid             = [ node "@" ] domain [ "/" resource ]
		domain          = fqdn / address-literal
		fqdn            = (sub-domain 1*("." sub-domain))
		sub-domain      = (internationalized domain label)
		address-literal = IPv4address / IPv6address

	Each allowable portion of a JID (node, domain, and resource) must not be more than 1023 bytes in length,
	resulting in a maximum total size (including the '@' and '/' separators) of 3071 bytes.</haxe_doc>
	</class>
	<class path="jabber.JIDUtil" params="" file="../../jabber/JIDUtil.hx">
		<MIN_LENGTH public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></MIN_LENGTH>
		<MAX_PARTSIZE public="1" get="inline" set="null" line="30" static="1"><x path="Int"/></MAX_PARTSIZE>
		<MAX_SIZE public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></MAX_SIZE>
		<EREG public="1" line="38" static="1">
			<c path="EReg"/>
			<haxe_doc>Regular expression matching a valid JID</haxe_doc>
		</EREG>
		<isValid public="1" set="method" line="57" static="1">
			<f a="t">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@returns True if the given JID is valid formed.</haxe_doc>
		</isValid>
		<node public="1" get="inline" set="null" line="74" static="1">
			<f a="t">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@returns The node of the given JID.</haxe_doc>
		</node>
		<domain public="1" set="method" line="81" static="1">
			<f a="t">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@returns The domain of the given JID.</haxe_doc>
		</domain>
		<resource public="1" set="method" line="90" static="1">
			<f a="t">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>@returns The resource of the given JID.</haxe_doc>
		</resource>
		<bare public="1" set="method" line="98" static="1">
			<f a="t">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes The resource from a JID.</haxe_doc>
		</bare>
		<hasResource public="1" get="inline" set="null" line="106" static="1">
			<f a="t">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>@returns True if the given JID has a valid resource.</haxe_doc>
		</hasResource>
		<parts public="1" set="method" line="113" static="1">
			<f a="jid">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>@returns A String array with parsed node, domain and resource.</haxe_doc>
		</parts>
		<splitBare public="1" set="method" line="122" static="1">
			<f a="jid">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits the given JID into parts and returns it as array excluding the resource.</haxe_doc>
		</splitBare>
		<compare public="1" set="method" line="130" static="1">
			<f a="a:b">
				<c path="jabber.JID"/>
				<c path="jabber.JID"/>
				<x path="Bool"/>
			</f>
			<haxe_doc></haxe_doc>
		</compare>
		<escapeNode public="1" set="method" line="145" static="1">
			<f a="n">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escapes the node portion of a JID according to "JID Escaping" (XEP-0106).
	    Escaping replaces characters prohibited by node-prep with escape sequences.

	    Typically, escaping is performed only by a client that is processing information
	    provided by a human user in unescaped form, or by a gateway to some external system
	    (e.g., email or LDAP) that needs to generate a JID.</haxe_doc>
		</escapeNode>
		<unescapeNode public="1" set="method" line="169" static="1">
			<f a="n">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Un-escapes the node portion of a JID according to XEP-0106:JID Escaping (http://www.xmpp.org/extensions/xep-0106.html).
     	Escaping replaces characters prohibited by node-prep with escape sequences.

     	Typically, unescaping is performed only by a client that wants to display JIDs
     	containing escaped characters to a human user, or by a gateway to some
     	external system (e.g., email or LDAP) that needs to generate identifiers
     	for foreign systems.</haxe_doc>
		</unescapeNode>
		<haxe_doc>Static methods for jabber-id validation and manipulation.</haxe_doc>
	</class>
	<class path="jabber.LastActivity" params="" file="../../jabber/LastActivity.hx">
		<handleLoad set="method" line="49"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleLoad>
		<request public="1" set="method" line="43">
			<f a="jid">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Requests the given entity for their last activity.<br/>
		Given a bare jid will be handled by the server on roster subscription basis.<br/>
		Otherwise the request will be fowarded to the resource of the client entity.<br/>]]></haxe_doc>
		</request>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onError public="1" set="dynamic" line="30"><f a="e">
	<c path="jabber.XMPPError"/>
	<x path="Void"/>
</f></onError>
		<onLoad public="1" set="dynamic" line="29"><f a="entity:secs">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onLoad>
		<new public="1" set="method" line="34"><f a="stream">
	<c path="jabber.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XEP-0012: Last Activity: http://xmpp.org/extensions/xep-0012.html</haxe_doc>
	</class>
	<class path="jabber.LastActivityListener" params="" file="../../jabber/LastActivityListener.hx">
		<handleRequest set="method" line="51"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleRequest>
		<dispose public="1" set="method" line="43"><f a=""><x path="Void"/></f></dispose>
		<c><c path="jabber.PacketCollector"/></c>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<time public="1">
			<x path="Int"/>
			<haxe_doc>Seconds passed after last user activity</haxe_doc>
		</time>
		<new public="1" set="method" line="35"><f a="stream:?time">
	<c path="jabber.Stream"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XEP-0012: Last Activity: http://xmpp.org/extensions/xep-0012.html</haxe_doc>
	</class>
	<class path="jabber.MUCUtil" params="" file="../../jabber/MUCUtil.hx">
		<EREG public="1" line="30" static="1">
			<c path="EReg"/>
			<haxe_doc>Regular expression matching a valid MUC address</haxe_doc>
		</EREG>
		<isValid public="1" set="method" line="36" static="1">
			<f a="t:?nick">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the given string is a valid muchat address.
		The 'nick' parameter indicates if a full adress (including nickname) is expected.</haxe_doc>
		</isValid>
		<getRoom public="1" get="inline" set="null" line="45" static="1">
			<f a="t">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the room of the muc jid.</haxe_doc>
		</getRoom>
		<getHost public="1" get="inline" set="null" line="52" static="1">
			<f a="t">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the host of the muc jid.</haxe_doc>
		</getHost>
		<getNick public="1" set="method" line="59" static="1">
			<f a="t">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the occupant name of the muc jid.</haxe_doc>
		</getNick>
		<getParts public="1" set="method" line="67" static="1">
			<f a="t">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns array existing of roomname[0], host[1] and (optional) occupantname[2] of the given muc address.</haxe_doc>
		</getParts>
		<haxe_doc>Static methods for parsing of mutliuser chat addresses.</haxe_doc>
	</class>
	<class path="jabber.PacketListener" params="T" file="../../jabber/PacketListener.hx">
		<handlePacket set="method" line="53"><f a="p">
	<c path="jabber.PacketListener.T"/>
	<x path="Void"/>
</f></handlePacket>
		<set_listen set="method" line="47"><f a="v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_listen>
		<collector><c path="jabber.PacketCollector"/></collector>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<listen public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Activates/Deactivates packet collecting</haxe_doc>
		</listen>
		<onPacket public="1" set="dynamic" line="30">
			<f a="p">
				<c path="jabber.PacketListener.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Packet recieved callback</haxe_doc>
		</onPacket>
		<new set="method" line="38"><f a="stream:handler:type:listen">
	<c path="jabber.Stream"/>
	<f a="">
		<c path="jabber.PacketListener.T"/>
		<x path="Void"/>
	</f>
	<e path="xmpp.PacketType"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Abstract base for top level packet listeners (jabber.PresenceListener, jabber.MessageListener).</haxe_doc>
	</class>
	<class path="jabber.MessageListener" params="" file="../../jabber/MessageListener.hx">
		<extends path="jabber.PacketListener"><c path="xmpp.Message"/></extends>
		<new public="1" set="method" line="34"><f a="stream:handler:?listen">
	<c path="jabber.Stream"/>
	<f a="">
		<c path="xmpp.Message"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Utility (shortcut) to listen/report incoming message packets.

	Usage:
	var l = new MessageListener( stream, function(m){
		trace("Received message: "+m);
	});</haxe_doc>
	</class>
	<class path="jabber.PacketCollector" params="" file="../../jabber/PacketCollector.hx">
		<deliver public="1" set="method" line="68">
			<f a="p">
				<c path="xmpp.Packet"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Delivers the given packet to all registerd handlers.</haxe_doc>
		</deliver>
		<accept public="1" set="method" line="58">
			<f a="p">
				<c path="xmpp.Packet"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the given XMPP packet passes through all filters.</haxe_doc>
		</accept>
		<block public="1">
			<x path="Bool"/>
			<haxe_doc>Block remaining collectors</haxe_doc>
		</block>
		<permanent public="1">
			<x path="Bool"/>
			<haxe_doc>Indicates if the the collector should get removed from the stream after collecting.</haxe_doc>
		</permanent>
		<handlers public="1">
			<c path="Array"><f a="">
	<c path="xmpp.Packet"/>
	<x path="Void"/>
</f></c>
			<haxe_doc>Callbacks to which collected packets get delivered to.</haxe_doc>
		</handlers>
		<filters public="1" set="null">
			<c path="jabber._PacketCollector.FilterList"/>
			<haxe_doc>This collectors filters</haxe_doc>
		</filters>
		<new public="1" set="method" line="44"><f a="filters:handler:?permanent:?block">
	<t path="Iterable"><t path="xmpp.PacketFilter"/></t>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Default XMPP packet collector implementation.</haxe_doc>
	</class>
	<class path="jabber._PacketCollector.FilterList" params="" file="../../jabber/PacketCollector.hx" private="1" module="jabber.PacketCollector">
		<remove public="1" get="inline" set="null" line="108"><f a="_f">
	<t path="xmpp.PacketFilter"/>
	<x path="Bool"/>
</f></remove>
		<unshift public="1" get="inline" set="null" line="104"><f a="_f">
	<t path="xmpp.PacketFilter"/>
	<x path="Void"/>
</f></unshift>
		<push public="1" get="inline" set="null" line="100"><f a="_f">
	<t path="xmpp.PacketFilter"/>
	<x path="Void"/>
</f></push>
		<addFilter public="1" get="inline" set="null" line="96"><f a="_f">
	<t path="xmpp.PacketFilter"/>
	<x path="Void"/>
</f></addFilter>
		<addIDFilter public="1" get="inline" set="null" line="92"><f a="_f">
	<c path="xmpp.filter.PacketIDFilter"/>
	<x path="Void"/>
</f></addIDFilter>
		<iterator public="1" get="inline" set="null" line="88"><f a=""><t path="Iterator"><t path="xmpp.PacketFilter"/></t></f></iterator>
		<clear public="1" get="inline" set="null" line="83"><f a=""><x path="Void"/></f></clear>
		<f><c path="Array"><t path="xmpp.PacketFilter"/></c></f>
		<fid><c path="Array"><t path="xmpp.PacketFilter"/></c></fid>
		<new public="1" set="method" line="79"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="jabber.PacketInterceptor" params="" file="../../jabber/PacketInterceptor.hx">
		<a><interceptPacket set="method">
	<f a="p">
		<c path="xmpp.Packet"/>
		<c path="xmpp.Packet"/>
	</f>
	<haxe_doc>Intercepts outgoing XMPP packet before sending.</haxe_doc>
</interceptPacket></a>
		<haxe_doc>Modifies XMPP packets and/or runs additional processes before sending.</haxe_doc>
	</typedef>
	<class path="jabber.PersonalEvent" params="" file="../../jabber/PersonalEvent.hx">
		<sendIQ set="method" line="58"><f a="e:x:h">
	<c path="xmpp.PersonalEvent"/>
	<c path="Xml"/>
	<f a="">
		<c path="xmpp.PersonalEvent"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></sendIQ>
		<disable public="1" set="method" line="54">
			<f a="e">
				<c path="xmpp.PersonalEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Disable publishing.</haxe_doc>
		</disable>
		<publish public="1" set="method" line="45">
			<f a="e">
				<c path="xmpp.PersonalEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Publish a personal event.</haxe_doc>
		</publish>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onError public="1" set="dynamic" line="33"><f a="e">
	<c path="jabber.XMPPError"/>
	<x path="Void"/>
</f></onError>
		<onDisable public="1" set="dynamic" line="32"><f a="e">
	<c path="xmpp.PersonalEvent"/>
	<x path="Void"/>
</f></onDisable>
		<onPublish public="1" set="dynamic" line="31"><f a="e">
	<c path="xmpp.PersonalEvent"/>
	<x path="Void"/>
</f></onPublish>
		<new public="1" set="method" line="38"><f a="stream">
	<c path="jabber.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Send personal updates or "events" to other users, who are typically contacts in the user's roster.
	
	XEP-0163: Personal Eventing Protocol: http://xmpp.org/extensions/xep-0163.html</haxe_doc>
	</class>
	<typedef path="jabber._PersonalEventListener.Listener" params="" file="../../jabber/PersonalEventListener.hx" private="1" module="jabber.PersonalEventListener"><a>
	<xmlns><c path="String"/></xmlns>
	<type><x path="Class"><c path="xmpp.PersonalEvent"/></x></type>
	<handler><f a=":">
	<c path="xmpp.Message"/>
	<c path="Xml"/>
	<x path="Void"/>
</f></handler>
</a></typedef>
	<class path="jabber.PersonalEventListener" params="" file="../../jabber/PersonalEventListener.hx">
		<handlePersonalEvent set="method" line="100"><f a="m">
	<c path="xmpp.Message"/>
	<x path="Void"/>
</f></handlePersonalEvent>
		<getListener public="1" set="method" line="93">
			<f a="type">
				<x path="Class"><c path="xmpp.PersonalEvent"/></x>
				<t path="jabber._PersonalEventListener.Listener"/>
			</f>
			<haxe_doc>Returns the listeners for the given type.</haxe_doc>
		</getListener>
		<clear public="1" set="method" line="86">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear all listeners.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="76">
			<f a="type">
				<x path="Class"><c path="xmpp.PersonalEvent"/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Remove listener for the given type.</haxe_doc>
		</remove>
		<add public="1" set="method" line="59">
			<f a="t:h">
				<x path="Class"><c path="xmpp.PersonalEvent"/></x>
				<f a=":">
					<c path="xmpp.Message"/>
					<c path="Xml"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Add listener for the given type.</haxe_doc>
		</add>
		<iterator public="1" get="inline" set="null" line="52"><f a=""><t path="Iterator"><t path="jabber._PersonalEventListener.Listener"/></t></f></iterator>
		<listeners><c path="List"><t path="jabber._PersonalEventListener.Listener"/></c></listeners>
		<stream public="1" set="null">
			<c path="jabber.Stream"/>
			<haxe_doc>Optional to collect ALL events</haxe_doc>
		</stream>
		<new public="1" set="method" line="44"><f a="stream">
	<c path="jabber.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Listener for incoming personal events from other entities.
	XEP-0163: Personal Eventing Protocol: http://xmpp.org/extensions/xep-0163.html</haxe_doc>
	</class>
	<class path="jabber.Pong" params="" file="../../jabber/Pong.hx">
		<handlePing set="method" line="52"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handlePing>
		<dispose public="1" set="method" line="44"><f a=""><x path="Void"/></f></dispose>
		<c><c path="jabber.PacketCollector"/></c>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onPong public="1" set="dynamic" line="31">
			<f a="jid">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Informational callback on ping-pong</haxe_doc>
		</onPong>
		<new public="1" set="method" line="37"><f a="stream">
	<c path="jabber.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Listens for incoming ping messages and automaticly responds with a pong.
	XEP 199 - XMPP Ping: http://www.xmpp.org/extensions/xep-0199.html</haxe_doc>
	</class>
	<class path="jabber.PrivacyLists" params="" file="../../jabber/PrivacyLists.hx">
		<handleListPush set="method" line="144"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleListPush>
		<sendRequest set="method" line="126"><f a="iqType:resultHandler:?active:?_default:?list">
	<e path="xmpp.IQType"/>
	<f a="">
		<c path="xmpp.IQ"/>
		<x path="Void"/>
	</f>
	<c path="String"/>
	<c path="String"/>
	<c path="xmpp.PrivacyList"/>
	<x path="Void"/>
</f></sendRequest>
		<_update set="method" line="118"><f a="list">
	<c path="xmpp.PrivacyList"/>
	<x path="Void"/>
</f></_update>
		<remove public="1" set="method" line="109"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></remove>
		<add public="1" set="method" line="105"><f a="list">
	<c path="xmpp.PrivacyList"/>
	<x path="Void"/>
</f></add>
		<update public="1" set="method" line="101"><f a="list">
	<c path="xmpp.PrivacyList"/>
	<x path="Void"/>
</f></update>
		<changeDefault public="1" set="method" line="84"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></changeDefault>
		<deactivate public="1" set="method" line="77"><f a=""><x path="Void"/></f></deactivate>
		<activate public="1" set="method" line="69"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></activate>
		<load public="1" set="method" line="61"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></load>
		<loadLists public="1" set="method" line="53"><f a=""><x path="Void"/></f></loadLists>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onError public="1" set="dynamic" line="39"><f a="e">
	<c path="jabber.XMPPError"/>
	<x path="Void"/>
</f></onError>
		<onDefaultChange public="1" set="dynamic" line="38"><f a="l">
	<c path="String"/>
	<x path="Void"/>
</f></onDefaultChange>
		<onDeactivate public="1" set="dynamic" line="37"><f a=""><x path="Void"/></f></onDeactivate>
		<onActivate public="1" set="dynamic" line="36"><f a="l">
	<c path="String"/>
	<x path="Void"/>
</f></onActivate>
		<onRemoved public="1" set="dynamic" line="35"><f a="l">
	<c path="xmpp.PrivacyList"/>
	<x path="Void"/>
</f></onRemoved>
		<onUpdate public="1" set="dynamic" line="34"><f a="l">
	<c path="xmpp.PrivacyList"/>
	<x path="Void"/>
</f></onUpdate>
		<onInfo public="1" set="dynamic" line="33"><f a="l">
	<c path="xmpp.PrivacyList"/>
	<x path="Void"/>
</f></onInfo>
		<onLists public="1" set="dynamic" line="32"><f a="l">
	<c path="xmpp.PrivacyLists"/>
	<x path="Void"/>
</f></onLists>
		<new public="1" set="method" line="43"><f a="stream">
	<c path="jabber.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Extension for blocking communication with unknown or undesirable entities.
	Depricated! Use jabber.ComBlock instead.

	XEP-0016: Privacy Lists: http://xmpp.org/extensions/xep-0016.html</haxe_doc>
	</class>
	<class path="jabber.PrivateStorage" params="" file="../../jabber/PrivateStorage.hx">
		<store public="1" set="method" line="59">
			<f a="name:namespace:data">
				<c path="String"/>
				<c path="String"/>
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Store private data.</haxe_doc>
		</store>
		<load public="1" set="method" line="43">
			<f a="name:namespace">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Load private data.</haxe_doc>
		</load>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onError public="1" set="dynamic" line="32"><f a="e">
	<c path="jabber.XMPPError"/>
	<x path="Void"/>
</f></onError>
		<onStored public="1" set="dynamic" line="31"><f a="s">
	<c path="xmpp.PrivateStorage"/>
	<x path="Void"/>
</f></onStored>
		<onLoad public="1" set="dynamic" line="30"><f a="s">
	<c path="xmpp.PrivateStorage"/>
	<x path="Void"/>
</f></onLoad>
		<new public="1" set="method" line="36"><f a="stream">
	<c path="jabber.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Extension to store any arbitrary XML on the server side.
	XEP-0049: Private XML Storage: http://xmpp.org/extensions/xep-0049.html</haxe_doc>
	</class>
	<class path="jabber.PubSub" params="" file="../../jabber/PubSub.hx">
		<sendIQ set="method" line="264"><f a="iq:h">
	<c path="xmpp.IQ"/>
	<f a="">
		<c path="xmpp.IQ"/>
		<x path="Void"/>
	</f>
	<c path="xmpp.IQ"/>
</f></sendIQ>
		<publish public="1" set="method" line="241">
			<f a="node:item:?options">
				<c path="String"/>
				<c path="xmpp.pubsub.Item"/>
				<c path="xmpp.DataForm"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Publish an item to a node.</haxe_doc>
		</publish>
		<purge public="1" set="method" line="226">
			<f a="node">
				<c path="String"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Remove all items from the persistent store, with the exception of the last published item, which MAY be cached.
		(This is a optional feature for a pubsub service).</haxe_doc>
		</purge>
		<retract public="1" set="method" line="210">
			<f a="retract">
				<c path="xmpp.pubsub.Retract"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Publisher deletes an item once it has been published to a node that supports persistent items.</haxe_doc>
		</retract>
		<loadItems public="1" set="method" line="186">
			<f a="node:?subid:?maxItems:?ids">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Load (all) items from the given node.</haxe_doc>
		</loadItems>
		<loadAffiliations public="1" set="method" line="170">
			<f a=""><c path="xmpp.IQ"/></f>
			<haxe_doc>Load list of affiliations for all nodes at the service.</haxe_doc>
		</loadAffiliations>
		<unsubscribe public="1" set="method" line="141">
			<f a="node:?jid:?subid">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Unsubscribe from given pubsub node.</haxe_doc>
		</unsubscribe>
		<subscribe public="1" set="method" line="123">
			<f a="node:?jid">
				<c path="String"/>
				<c path="String"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc><![CDATA[Subscribe to given pubsub node.
		The 'jid' attribute specifying the exact XMPP address to be used as the subscribed JID.
		Often a bare JID (<localpart@domain.tld> or <domain.tld>)
		or full JID <localpart@domain.tld/resource>
		or <domain.tld/resource>.]]></haxe_doc>
		</subscribe>
		<loadSubscriptions public="1" set="method" line="104">
			<f a="?node">
				<c path="String"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Load list of current subscriptions.</haxe_doc>
		</loadSubscriptions>
		<deleteNode public="1" set="method" line="73">
			<f a="name">
				<c path="String"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Delete pubsub node with given name (http://xmpp.org/extensions/xep-0060.html#owner-delete")</haxe_doc>
		</deleteNode>
		<createNode public="1" set="method" line="59">
			<f a="name:?config">
				<c path="String"/>
				<c path="xmpp.DataForm"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Create a pubsub node with the given name (http://xmpp.org/extensions/xep-0060.html#owner-create).</haxe_doc>
		</createNode>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<service public="1" set="null">
			<c path="String"/>
			<haxe_doc>Name of the pubsub service</haxe_doc>
		</service>
		<onPurge public="1" set="dynamic" line="45"><f a="node">
	<c path="String"/>
	<x path="Void"/>
</f></onPurge>
		<onRetract public="1" set="dynamic" line="44"><f a="r">
	<c path="xmpp.pubsub.Retract"/>
	<x path="Void"/>
</f></onRetract>
		<onAffiliations public="1" set="dynamic" line="43"><f a="a">
	<c path="xmpp.pubsub.Affiliations"/>
	<x path="Void"/>
</f></onAffiliations>
		<onItems public="1" set="dynamic" line="42"><f a="items">
	<c path="xmpp.pubsub.Items"/>
	<x path="Void"/>
</f></onItems>
		<onPublish public="1" set="dynamic" line="41"><f a="node:item">
	<c path="String"/>
	<c path="xmpp.pubsub.Item"/>
	<x path="Void"/>
</f></onPublish>
		<onUnsubscribe public="1" set="dynamic" line="40"><f a="node">
	<c path="String"/>
	<x path="Void"/>
</f></onUnsubscribe>
		<onSubscribe public="1" set="dynamic" line="39"><f a="sub">
	<c path="xmpp.pubsub.Subscription"/>
	<x path="Void"/>
</f></onSubscribe>
		<onSubscriptions public="1" set="dynamic" line="38"><f a="subs">
	<c path="xmpp.pubsub.Subscriptions"/>
	<x path="Void"/>
</f></onSubscriptions>
		<onNodeDelete public="1" set="dynamic" line="37"><f a="node">
	<c path="String"/>
	<x path="Void"/>
</f></onNodeDelete>
		<onNodeCreate public="1" set="dynamic" line="35"><f a="node">
	<c path="String"/>
	<x path="Void"/>
</f></onNodeCreate>
		<onError public="1" set="dynamic" line="34"><f a="e">
	<c path="jabber.XMPPError"/>
	<x path="Void"/>
</f></onError>
		<new public="1" set="method" line="51"><f a="stream:service">
	<c path="jabber.Stream"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[PubSub client extension.

	http://xmpp.org/extensions/xep-0060.html">XEP-0060: Publish-Subscribe]]></haxe_doc>
	</class>
	<class path="jabber.PubSubListener" params="" file="../../jabber/PubSubListener.hx">
		<handlePubSubEvent set="method" line="62"><f a="m">
	<c path="xmpp.Message"/>
	<x path="Void"/>
</f></handlePubSubEvent>
		<dispose public="1" set="method" line="58"><f a=""><x path="Void"/></f></dispose>
		<c><c path="jabber.PacketCollector"/></c>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onSubscription public="1" set="dynamic" line="44">
			<f a="service:subscription">
				<c path="String"/>
				<c path="xmpp.pubsub.Subscription"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Subscription action notification</haxe_doc>
		</onSubscription>
		<onPurge public="1" set="dynamic" line="42">
			<f a="service:node">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Node got purged</haxe_doc>
		</onPurge>
		<onDelete public="1" set="dynamic" line="40">
			<f a="service:node">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Node got deleted</haxe_doc>
		</onDelete>
		<onConfig public="1" set="dynamic" line="38">
			<f a="service:config">
				<c path="String"/>
				<a>
					<node><c path="String"/></node>
					<form><c path="xmpp.DataForm"/></form>
				</a>
				<x path="Void"/>
			</f>
			<haxe_doc>Configuration got changed</haxe_doc>
		</onConfig>
		<onItems public="1" set="dynamic" line="36">
			<f a="service:items">
				<c path="String"/>
				<c path="xmpp.pubsub.Items"/>
				<x path="Void"/>
			</f>
			<haxe_doc>New pubsub item(s) recieved</haxe_doc>
		</onItems>
		<onMessage public="1" set="dynamic" line="31">
			<f a="m">
				<c path="xmpp.Message"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Every(!) full pubsub event message</haxe_doc>
		</onMessage>
		<new public="1" set="method" line="50"><f a="stream:service">
	<c path="jabber.Stream"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Listens for incoming pubsub events from a given service.
	XEP-0060: Publish-Subscribe: http://xmpp.org/extensions/xep-0060.html</haxe_doc>
	</class>
	<class path="jabber.ServiceDiscovery" params="" file="../../jabber/ServiceDiscovery.hx">
		<handleItems set="method" line="99"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleItems>
		<handleInfo set="method" line="75"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleInfo>
		<items public="1" set="method" line="65">
			<f a="?jid:?node">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Query entity for items.</haxe_doc>
		</items>
		<info public="1" set="method" line="52">
			<f a="?jid:?node">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Query entity for information.</haxe_doc>
		</info>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onError public="1" set="dynamic" line="41"><f a="e">
	<c path="jabber.XMPPError"/>
	<x path="Void"/>
</f></onError>
		<onItems public="1" set="dynamic" line="40"><f a="jid:items">
	<c path="String"/>
	<c path="xmpp.disco.Items"/>
	<x path="Void"/>
</f></onItems>
		<onInfo public="1" set="dynamic" line="39"><f a="jid:info">
	<c path="String"/>
	<c path="xmpp.disco.Info"/>
	<x path="Void"/>
</f></onInfo>
		<new public="1" set="method" line="45"><f a="stream">
	<c path="jabber.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Manages discovery of services from XMPP entities.
	Two kinds of information can be discovered:
		The identity and capabilities of an entity, including the protocols and features it supports.
		The items associated with an entity, such as the list of rooms hosted at a multi-user chat service.

	XEP 30 - ServiceDiscovery: http://www.xmpp.org/extensions/xep-0030.html</haxe_doc>
	</class>
	<class path="jabber.ServiceDiscoveryListener" params="" file="../../jabber/ServiceDiscoveryListener.hx">
		<defaultIdentity public="1" line="33" static="1"><a>
	<type><c path="String"/></type>
	<name><c path="String"/></name>
	<category><c path="String"/></category>
</a></defaultIdentity>
		<handleItemsQuery set="method" line="90"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleItemsQuery>
		<handleInfoQuery set="method" line="68"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleInfoQuery>
		<dispose public="1" set="method" line="63">
			<f a=""><x path="Void"/></f>
			<haxe_doc></haxe_doc>
		</dispose>
		<c_items><c path="jabber.PacketCollector"/></c_items>
		<c_info><c path="jabber.PacketCollector"/></c_info>
		<onItemsQuery public="1">
			<f a="">
				<c path="xmpp.IQ"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Custom items request handler relay</haxe_doc>
		</onItemsQuery>
		<onInfoQuery public="1">
			<f a="">
				<c path="xmpp.IQ"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Custom info request handler relay</haxe_doc>
		</onInfoQuery>
		<identities public="1">
			<c path="Array"><t path="xmpp.disco.Identity"/></c>
			<haxe_doc></haxe_doc>
		</identities>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<new public="1" set="method" line="49"><f a="stream:?identities">
	<c path="jabber.Stream"/>
	<c path="Array"><t path="xmpp.disco.Identity"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Listens/Answers incoming service discovery requests.
	XEP 30 - ServiceDiscovery: http://www.xmpp.org/extensions/xep-0030.html</haxe_doc>
	</class>
	<typedef path="jabber.SocketConnection" params="" file="../../jabber/SocketConnection.hx"><c path="jabber.net.SocketConnection_fl"/></typedef>
	<class path="jabber.SoftwareVersion" params="" file="../../jabber/SoftwareVersion.hx">
		<load public="1" set="method" line="41">
			<f a="jid">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Requests the software version of the given entity.</haxe_doc>
		</load>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onError public="1" set="dynamic" line="30"><f a="e">
	<c path="jabber.XMPPError"/>
	<x path="Void"/>
</f></onError>
		<onLoad public="1" set="dynamic" line="29"><f a="jid:sv">
	<c path="String"/>
	<c path="xmpp.SoftwareVersion"/>
	<x path="Void"/>
</f></onLoad>
		<new public="1" set="method" line="34"><f a="stream">
	<c path="jabber.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XEP 0092 - Software Version: http://www.xmpp.org/extensions/xep-0092.html</haxe_doc>
	</class>
	<class path="jabber.SoftwareVersionListener" params="" file="../../jabber/SoftwareVersionListener.hx">
		<handleQuery set="method" line="60"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleQuery>
		<dispose public="1" set="method" line="55"><f a=""><x path="Void"/></f></dispose>
		<c><c path="jabber.PacketCollector"/></c>
		<os public="1">
			<c path="String"/>
			<haxe_doc>The operating system of the queried entity (optional)</haxe_doc>
		</os>
		<version public="1">
			<c path="String"/>
			<haxe_doc>The specific version of the software</haxe_doc>
		</version>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The natural-language name of the software</haxe_doc>
		</name>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<new public="1" set="method" line="45"><f a="stream:name:version:?os">
	<c path="jabber.Stream"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Extension for retrieving information about the software application associated with an XMPP entity
	XEP 0092 - Software Version: http://www.xmpp.org/extensions/xep-0092.html</haxe_doc>
	</class>
	<typedef path="jabber._Stream.Server" params="" file="../../jabber/Stream.hx" private="1" module="jabber.Stream"><a><features><x path="Map">
	<c path="String"/>
	<c path="Xml"/>
</x></features></a></typedef>
	<class path="jabber._Stream.StreamFeatures" params="" file="../../jabber/Stream.hx" private="1" module="jabber.Stream">
		<toString public="1" get="inline" set="null" line="70"><f a=""><c path="String"/></f></toString>
		<clear public="1" get="inline" set="null" line="65"><f a="f">
	<c path="String"/>
	<x path="Void"/>
</f></clear>
		<remove public="1" get="inline" set="null" line="61"><f a="f">
	<c path="String"/>
	<x path="Bool"/>
</f></remove>
		<has public="1" get="inline" set="null" line="57"><f a="f">
	<c path="String"/>
	<x path="Bool"/>
</f></has>
		<add public="1" set="method" line="51"><f a="f">
	<c path="String"/>
	<x path="Bool"/>
</f></add>
		<iterator public="1" get="inline" set="null" line="47"><f a=""><t path="Iterator"><c path="String"/></t></f></iterator>
		<l><c path="Array"><c path="String"/></c></l>
		<new public="1" set="method" line="43"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="jabber.Stream" params="" file="../../jabber/Stream.hx">
		<defaultPacketIdLength public="1" line="81" static="1"><x path="Int"/></defaultPacketIdLength>
		<defaultMaxBufSize public="1" line="82" static="1"><x path="Int"/></defaultMaxBufSize>
		<cleanup set="method" line="596"><f a=""><x path="Void"/></f></cleanup>
		<handleStreamClose set="method" line="590"><f a="?e">
	<c path="String"/>
	<x path="Void"/>
</f></handleStreamClose>
		<handleStreamOpen set="method" line="586"><f a=""><x path="Void"/></f></handleStreamOpen>
		<handleDisconnect set="method" line="581"><f a="?e">
	<c path="String"/>
	<x path="Void"/>
</f></handleDisconnect>
		<handleConnect set="method" line="575"><f a=""><x path="Void"/></f></handleConnect>
		<processStreamInit set="method" line="571"><f a="t">
	<c path="String"/>
	<x path="Bool"/>
</f></processStreamInit>
		<resetBuffer set="method" line="548"><f a=""><x path="Void"/></f></resetBuffer>
		<buffer set="method" line="543"><f a="t">
	<c path="String"/>
	<x path="Void"/>
</f></buffer>
		<handlePacket public="1" set="method" line="479">
			<f a="p">
				<c path="xmpp.Packet"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Handles incoming XMPP packets.
		Returns true if the packet got handled.</haxe_doc>
		</handlePacket>
		<handleXml public="1" set="method" line="465">
			<f a="x">
				<c path="Xml"/>
				<c path="Array"><c path="xmpp.Packet"/></c>
			</f>
			<haxe_doc>Inject incoming XML data.
		Returns array of handled XMPP packets.</haxe_doc>
		</handleXml>
		<handleString public="1" set="method" line="377">
			<f a="t">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc></haxe_doc>
		</handleString>
		<handleData public="1" set="method" line="366">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
			</f>
			<haxe_doc></haxe_doc>
		</handleData>
		<removeInterceptor public="1" set="method" line="360">
			<f a="i">
				<t path="jabber.PacketInterceptor"/>
				<x path="Bool"/>
			</f>
			<haxe_doc></haxe_doc>
		</removeInterceptor>
		<addInterceptor public="1" set="method" line="351">
			<f a="i">
				<t path="jabber.PacketInterceptor"/>
				<x path="Bool"/>
			</f>
			<haxe_doc></haxe_doc>
		</addInterceptor>
		<removeCollector public="1" set="method" line="342">
			<f a="c">
				<c path="jabber.PacketCollector"/>
				<x path="Bool"/>
			</f>
			<haxe_doc></haxe_doc>
		</removeCollector>
		<addCollector public="1" set="method" line="333">
			<f a="c">
				<c path="jabber.PacketCollector"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Adds a XMPP packet collector to this stream and starts the timeout if not null.</haxe_doc>
		</addCollector>
		<addIDCollector public="1" set="method" line="324">
			<f a="id:handler">
				<c path="String"/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<c path="jabber.PacketCollector"/>
			</f>
			<haxe_doc>Adds an packet collector which filters XMPP packets by ids.
		These collectors get processed before any other.</haxe_doc>
		</addIDCollector>
		<collect public="1" set="method" line="315">
			<f a="filters:handler:?permanent">
				<t path="Iterable"><t path="xmpp.PacketFilter"/></t>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<c path="jabber.PacketCollector"/>
			</f>
			<haxe_doc>Creates, adds and returns a XMPP packet collector.</haxe_doc>
		</collect>
		<interceptPacket public="1" set="method" line="307">
			<f a="p">
				<c path="xmpp.Packet"/>
				<c path="xmpp.Packet"/>
			</f>
			<haxe_doc>Runs the XMPP packet interceptor on the given packet.</haxe_doc>
		</interceptPacket>
		<sendBytes public="1" set="method" line="296"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></sendBytes>
		<sendData public="1" set="method" line="275">
			<f a="t">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Send raw string.</haxe_doc>
		</sendData>
		<sendPacket public="1" params="T" set="method" line="264">
			<f a="p:?intercept">
				<c path="sendPacket.T"/>
				<x path="Bool"/>
				<c path="sendPacket.T"/>
			</f>
			<haxe_doc>Intercept/Send/Return XMPP packet.</haxe_doc>
		</sendPacket>
		<sendIQResult public="1" get="inline" set="null" line="257">
			<f a="iq">
				<c path="xmpp.IQ"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create and send the resulting iq for given request</haxe_doc>
		</sendIQResult>
		<sendIQ public="1" set="method" line="239">
			<f a="iq:?handler">
				<c path="xmpp.IQ"/>
				<f a="">
					<c path="xmpp.IQ"/>
					<x path="Void"/>
				</f>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Send an IQ packet and forwards the response to the given handler function.</haxe_doc>
		</sendIQ>
		<sendPresenceTo public="1" get="inline" set="null" line="230">
			<f a="jid:?show:?status:?priority:?type">
				<c path="String"/>
				<e path="xmpp.PresenceShow"/>
				<c path="String"/>
				<x path="Int"/>
				<e path="xmpp.PresenceType"/>
				<c path="xmpp.Presence"/>
			</f>
			<haxe_doc>Send directed presence</haxe_doc>
		</sendPresenceTo>
		<sendPresence public="1" set="method" line="223">
			<f a="?show:?status:?priority:?type">
				<e path="xmpp.PresenceShow"/>
				<c path="String"/>
				<x path="Int"/>
				<e path="xmpp.PresenceType"/>
				<c path="xmpp.Presence"/>
			</f>
			<haxe_doc>Send a presence packet.</haxe_doc>
		</sendPresence>
		<sendMessage public="1" set="method" line="216">
			<f a="to:body:?subject:?type:?thread:?from">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<e path="xmpp.MessageType"/>
				<c path="String"/>
				<c path="String"/>
				<c path="xmpp.Message"/>
			</f>
			<haxe_doc>Send a message packet (default type is 'chat').</haxe_doc>
		</sendMessage>
		<close public="1" set="method" line="201">
			<f a="?disconnect">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Closes the XMPP stream.<br/>
		Passed argument indicates if the data connection to the server should also get disconnected.]]></haxe_doc>
		</close>
		<open public="1" set="method" line="185">
			<f a="jid">
				<c path="jabber.JID"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Open the XMPP stream.</haxe_doc>
		</open>
		<nextID public="1" set="method" line="173">
			<f a=""><c path="String"/></f>
			<haxe_doc>Create/Returns the next unique id for this XMPP stream</haxe_doc>
		</nextID>
		<set_cnx set="method" line="146"><f a="c">
	<c path="jabber.StreamConnection"/>
	<c path="jabber.StreamConnection"/>
</f></set_cnx>
		<set_jid set="method" line="140"><f a="j">
	<c path="jabber.JID"/>
	<c path="jabber.JID"/>
</f></set_jid>
		<numPacketsSent><x path="Int"/></numPacketsSent>
		<interceptors><c path="Array"><t path="jabber.PacketInterceptor"/></c></interceptors>
		<collectors><c path="Array"><c path="jabber.PacketCollector"/></c></collectors>
		<collectors_id><c path="Array"><c path="jabber.PacketCollector"/></c></collectors_id>
		<buf><c path="StringBuf"/></buf>
		<maxBufSize public="1">
			<x path="Int"/>
			<haxe_doc></haxe_doc>
		</maxBufSize>
		<bufSize public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Incoming data buffer size</haxe_doc>
		</bufSize>
		<dataInterceptors public="1" set="null">
			<c path="Array"><t path="jabber.StreamDataInterceptor"/></c>
			<haxe_doc></haxe_doc>
		</dataInterceptors>
		<dataFilters public="1" set="null">
			<c path="Array"><t path="jabber.StreamDataFilter"/></c>
			<haxe_doc></haxe_doc>
		</dataFilters>
		<jid public="1" set="accessor">
			<c path="jabber.JID"/>
			<haxe_doc>Jabber-id of this entity</haxe_doc>
		</jid>
		<lang public="1" set="null">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</lang>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>Stream-id</haxe_doc>
		</id>
		<server public="1" set="null">
			<t path="jabber._Stream.Server"/>
			<haxe_doc></haxe_doc>
		</server>
		<features public="1" set="null">
			<c path="jabber._Stream.StreamFeatures"/>
			<haxe_doc>Clients stream features</haxe_doc>
		</features>
		<cnx public="1" set="accessor">
			<c path="jabber.StreamConnection"/>
			<haxe_doc>The connection used to transport xmpp data</haxe_doc>
		</cnx>
		<status public="1">
			<e path="jabber.StreamStatus"/>
			<haxe_doc>Current status of the XMPP stream</haxe_doc>
		</status>
		<onClose public="1" set="dynamic" line="92">
			<f a="?e">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when the XMPP stream closes, optionally reporting stream errors if occured</haxe_doc>
		</onClose>
		<onOpen public="1" set="dynamic" line="87">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the XMPP stream is opened and ready to exchange XMPP data</haxe_doc>
		</onOpen>
		<new set="method" line="133"><f a="cnx:?maxBufSize">
	<c path="jabber.StreamConnection"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Abstract base class for handling a XMPP data stream to and from another entity.
	
	See: http://xmpp.org/rfcs/rfc6120.html#streams</haxe_doc>
	</class>
	<class path="jabber.StreamConnection" params="" file="../../jabber/StreamConnection.hx">
		<writeBytes public="1" set="method" line="111">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Send raw bytes, returns true on succeess</haxe_doc>
		</writeBytes>
		<write public="1" set="method" line="103">
			<f a="t">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Send a string, returns true on succeess</haxe_doc>
		</write>
		<read public="1" set="method" line="95">
			<f a="?yes">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Starts/Stops reading data input, returns true if successfully started</haxe_doc>
		</read>
		<setSecure public="1" set="method" line="88">
			<f a=""><x path="Void"/></f>
			<haxe_doc></haxe_doc>
		</setSecure>
		<disconnect public="1" set="method" line="82">
			<f a=""><x path="Void"/></f>
			<haxe_doc></haxe_doc>
		</disconnect>
		<connect public="1" set="method" line="76">
			<f a=""><x path="Void"/></f>
			<haxe_doc></haxe_doc>
		</connect>
		<set_host set="method" line="68"><f a="t">
	<c path="String"/>
	<c path="String"/>
</f></set_host>
		<http public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if this data connection is a HTTP (BOSH) connection (default is false)</haxe_doc>
		</http>
		<secured public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if TLS is negotiation is complete and data transfered is encrypted</haxe_doc>
		</secured>
		<secure public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if this is a secure connection (TLS negotiation complete)</haxe_doc>
		</secure>
		<connected public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if connected and ready to read and write.</haxe_doc>
		</connected>
		<host public="1" set="accessor">
			<c path="String"/>
			<haxe_doc>Hostname or IP address of the XMPP server.</haxe_doc>
		</host>
		<__onSecured public="1">
			<f a="">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>TLS negotiation complete callback</haxe_doc>
		</__onSecured>
		<__onString public="1">
			<f a="">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>String recieved callback</haxe_doc>
		</__onString>
		<__onData public="1">
			<f a="">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Bytes recieved callback</haxe_doc>
		</__onData>
		<__onDisconnect public="1">
			<f a="">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Disconnected callback. Parameter is an optional error message</haxe_doc>
		</__onDisconnect>
		<__onConnect public="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Succesfully connected callback</haxe_doc>
		</__onConnect>
		<new set="method" line="61"><f a="host:secure:?http">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Abstract base class for XMPP stream connections.</haxe_doc>
	</class>
	<typedef path="jabber.StreamDataFilter" params="" file="../../jabber/StreamDataFilter.hx"><a><filterData set="method">
	<f a="data">
		<c path="haxe.io.Bytes"/>
		<c path="haxe.io.Bytes"/>
	</f>
	<haxe_doc>Filter raw incoming data before processing</haxe_doc>
</filterData></a></typedef>
	<typedef path="jabber.StreamDataInterceptor" params="" file="../../jabber/StreamDataInterceptor.hx"><a><interceptData set="method">
	<f a="data">
		<c path="haxe.io.Bytes"/>
		<c path="haxe.io.Bytes"/>
	</f>
	<haxe_doc>Modify raw outgoing XMPP data before sending</haxe_doc>
</interceptData></a></typedef>
	<enum path="jabber.StreamStatus" params="" file="../../jabber/StreamStatus.hx">
		<closed><haxe_doc>XMPP stream is inactive.</haxe_doc></closed>
		<pending><haxe_doc>Request to open XMPP stream sent but no response so far.</haxe_doc></pending>
		<starttls><haxe_doc>TLS negotiation in progress.</haxe_doc></starttls>
		<open><haxe_doc>XMPP stream is open and ready to exchange data.</haxe_doc></open>
	</enum>
	<class path="jabber.UserSearch" params="" file="../../jabber/UserSearch.hx">
		<sendIQ set="method" line="56"><f a="iq:h">
	<c path="xmpp.IQ"/>
	<f a=":">
		<c path="String"/>
		<c path="xmpp.UserSearch"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></sendIQ>
		<search public="1" set="method" line="46"><f a="jid:item">
	<c path="String"/>
	<t path="xmpp.UserSearchItem"/>
	<x path="Void"/>
</f></search>
		<requestFields public="1" set="method" line="39"><f a="jid">
	<c path="String"/>
	<x path="Void"/>
</f></requestFields>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onError public="1" set="dynamic" line="31"><f a="e">
	<c path="jabber.XMPPError"/>
	<x path="Void"/>
</f></onError>
		<onResult public="1" set="dynamic" line="30"><f a="jid:l">
	<c path="String"/>
	<c path="xmpp.UserSearch"/>
	<x path="Void"/>
</f></onResult>
		<onFields public="1" set="dynamic" line="29"><f a="jid:l">
	<c path="String"/>
	<c path="xmpp.UserSearch"/>
	<x path="Void"/>
</f></onFields>
		<new public="1" set="method" line="35"><f a="stream">
	<c path="jabber.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XEP-0055: Search: http://xmpp.org/extensions/xep-0055.html</haxe_doc>
	</class>
	<class path="jabber.XMPPDebug" params="" file="../../jabber/XMPPDebug.hx">
		<active public="1" line="80" static="1">
			<x path="Bool"/>
			<haxe_doc>Activate/Deactivate output.
		Default is true.</haxe_doc>
		</active>
		<lastPrintWasOutgoing public="1" set="null" line="83" static="1">
			<x path="Bool"/>
			<haxe_doc></haxe_doc>
		</lastPrintWasOutgoing>
		<beautify public="1" line="91" static="1">
			<x path="Bool"/>
			<haxe_doc>Indicates if the XMPP debug output should get formatted/beautified.
		Mind: If active, it is not ensured that the formatted string matches exactly the sent/recieved ones!
		Default value is false.
		Currently only supported in terminal targets.</haxe_doc>
		</beautify>
		<showDate public="1" line="96" static="1">
			<x path="Bool"/>
			<haxe_doc>Toggle print the current date in meta information</haxe_doc>
		</showDate>
		<showTime public="1" line="101" static="1">
			<x path="Bool"/>
			<haxe_doc>Toggle print the current time in meta information</haxe_doc>
		</showTime>
		<i public="1" get="inline" set="null" line="106" static="1">
			<f a="t">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print incoming XMPP data</haxe_doc>
		</i>
		<o public="1" get="inline" set="null" line="113" static="1">
			<f a="t">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print outgoing XMPP data</haxe_doc>
		</o>
		<print public="1" set="method" line="124" static="1">
			<f a="t:out:?level">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print manually to console</haxe_doc>
		</print>
		<useConsole public="1" static="1">
			<x path="Bool"/>
			<haxe_doc>Indicates if the XMPP transfer should get printed to the browser console</haxe_doc>
		</useConsole>
		<prefixClient public="1" line="190" static="1"><c path="String"/></prefixClient>
		<prefixServer public="1" line="191" static="1"><c path="String"/></prefixServer>
		<currentGroup static="1"><c path="String"/></currentGroup>
		<__print public="1" set="method" line="195" static="1"><f a="t:?out:?level">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></__print>
		<createMetaInformationString set="method" line="223" static="1"><f a="out">
	<x path="Bool"/>
	<c path="String"/>
</f></createMetaInformationString>
		<__console get="inline" set="null" line="252" static="1"><f a="c:?t">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></__console>
		<haxe_doc>Utility for debugging XMPP transfer.
	Set the compiler flag: -D xmpp_debug to activate it.
	
	* Terminal targets: Color highlighted
	* Browser targets: Printed to the default debug console
	* Adobe air: Printed to fdb 'trace'</haxe_doc>
		<meta><m n=":require"><e>xmpp_debug</e></m></meta>
	</class>
	<class path="xmpp.ErrorPacket" params="" file="../../xmpp/ErrorPacket.hx">
		<parseInto set="method" line="72" static="1"><f a="p:x:xmlns">
	<c path="xmpp.ErrorPacket"/>
	<c path="Xml"/>
	<c path="String"/>
	<x path="Bool"/>
</f></parseInto>
		<_toXml set="method" line="53"><f a="p:ns">
	<c path="String"/>
	<c path="String"/>
	<c path="Xml"/>
</f></_toXml>
		<app public="1">
			<t path="xmpp.ApplicationErrorCondition"/>
			<haxe_doc>Application-specific error condition</haxe_doc>
		</app>
		<lang public="1">
			<c path="String"/>
			<haxe_doc>Language of the text content XML character data</haxe_doc>
		</lang>
		<text public="1">
			<c path="String"/>
			<haxe_doc>Describes the error in more detail</haxe_doc>
		</text>
		<condition public="1">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</condition>
		<new set="method" line="45"><f a="condition:?text:?lang:?app">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<t path="xmpp.ApplicationErrorCondition"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Abstract base class for xmpp.Error and xmpp.StreamError</haxe_doc>
	</class>
	<class path="xmpp.Error" params="" file="../../xmpp/Error.hx">
		<extends path="xmpp.ErrorPacket"/>
		<XMLNS public="1" set="null" line="30" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="49" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.Error"/>
</f></parse>
		<toXml public="1" set="method" line="42"><f a=""><c path="Xml"/></f></toXml>
		<code public="1"><t path="Null"><x path="Int"/></t></code>
		<type public="1"><e path="xmpp.ErrorType"/></type>
		<new public="1" set="method" line="35"><f a="type:condition:?code:?text:?lang:?app">
	<e path="xmpp.ErrorType"/>
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<t path="xmpp.ApplicationErrorCondition"/>
	<x path="Void"/>
</f></new>
		<haxe_doc></haxe_doc>
	</class>
	<class path="jabber.XMPPError" params="" file="../../jabber/XMPPError.hx">
		<extends path="xmpp.Error"/>
		<toString public="1" set="method" line="37"><f a=""><c path="String"/></f></toString>
		<from public="1" set="null"><c path="String"/></from>
		<new public="1" set="method" line="31"><f a="p">
	<c path="xmpp.Packet"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Used to dispatch and track XMPP protocol errors.</haxe_doc>
	</class>
	<class path="jabber.client.Account" params="" file="../../jabber/client/Account.hx">
		<changePassword public="1" set="method" line="145">
			<f a="node:pass">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change account password.</haxe_doc>
		</changePassword>
		<remove public="1" set="method" line="122">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Delete account from server.</haxe_doc>
		</remove>
		<register public="1" set="method" line="87">
			<f a="reg">
				<c path="xmpp.Register"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Register new account.</haxe_doc>
		</register>
		<requestRegistrationFields public="1" set="method" line="55">
			<f a="jid">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Request required registration fields from server</haxe_doc>
		</requestRegistrationFields>
		<stream public="1" set="null"><c path="jabber.client.Stream"/></stream>
		<onError public="1" set="dynamic" line="44">
			<f a="e">
				<c path="jabber.XMPPError"/>
				<x path="Void"/>
			</f>
			<haxe_doc></haxe_doc>
		</onError>
		<onPasswordChange public="1" set="dynamic" line="41">
			<f a="pass">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Callback for password change success</haxe_doc>
		</onPasswordChange>
		<onRemove public="1" set="dynamic" line="38">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Callback for account remove success</haxe_doc>
		</onRemove>
		<onRegister public="1" set="dynamic" line="35">
			<f a="node">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Callback for account registering success</haxe_doc>
		</onRegister>
		<onFields public="1" set="dynamic" line="32">
			<f a="fields">
				<c path="Array"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Callback for recieved registration fields</haxe_doc>
		</onFields>
		<new public="1" set="method" line="48"><f a="stream">
	<c path="jabber.client.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XEP-0077: In-Band Registration: http://www.xmpp.org/extensions/xep-0077.html</haxe_doc>
	</class>
	<class path="jabber.client.AuthenticationBase" params="" file="../../jabber/client/AuthenticationBase.hx">
		<start public="1" set="method" line="48">
			<f a="password:?resource">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Start the authentication process.</haxe_doc>
		</start>
		<stream public="1" set="null">
			<c path="jabber.client.Stream"/>
			<haxe_doc></haxe_doc>
		</stream>
		<resource public="1" set="null">
			<c path="String"/>
			<haxe_doc>The jid resource to authenticate</haxe_doc>
		</resource>
		<onFail public="1" set="dynamic" line="33">
			<f a="info">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Authenication failed callback</haxe_doc>
		</onFail>
		<onSuccess public="1" set="dynamic" line="30">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Authenication was success full callback</haxe_doc>
		</onSuccess>
		<new set="method" line="41"><f a="s">
	<c path="jabber.client.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Abstract client account authentication class.</haxe_doc>
	</class>
	<class path="jabber.client.Authentication" params="" file="../../jabber/client/Authentication.hx">
		<extends path="jabber.client.AuthenticationBase"/>
		<removeSASLCollectors set="method" line="176"><f a=""><x path="Void"/></f></removeSASLCollectors>
		<handleSession set="method" line="165"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleSession>
		<handleBind set="method" line="141"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleBind>
		<handleStreamOpen set="method" line="130"><f a=""><x path="Void"/></f></handleStreamOpen>
		<handleSASLSuccess set="method" line="119"><f a="p">
	<c path="xmpp.Packet"/>
	<x path="Void"/>
</f></handleSASLSuccess>
		<handleSASLChallenge set="method" line="113"><f a="p">
	<c path="xmpp.Packet"/>
	<x path="Void"/>
</f></handleSASLChallenge>
		<handleSASLFailed set="method" line="105"><f a="p">
	<c path="xmpp.Packet"/>
	<x path="Void"/>
</f></handleSASLFailed>
		<start public="1" set="method" line="76" override="1">
			<f a="password:?resource">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Inits SASL authentication.
		Returns false if no supported SASL mechanism got offered by the server.</haxe_doc>
		</start>
		<c_success><c path="jabber.PacketCollector"/></c_success>
		<c_fail><c path="jabber.PacketCollector"/></c_fail>
		<c_challenge><c path="jabber.PacketCollector"/></c_challenge>
		<onStreamOpenHandler><f a=""><x path="Void"/></f></onStreamOpenHandler>
		<mechanism public="1" set="null">
			<t path="jabber.sasl.Mechanism"/>
			<haxe_doc>Used SASL method</haxe_doc>
		</mechanism>
		<serverMechanisms public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>Available SASL mechanisms offered by server</haxe_doc>
		</serverMechanisms>
		<mechanisms public="1" set="null">
			<c path="Array"><t path="jabber.sasl.Mechanism"/></c>
			<haxe_doc>Clients SASL mechanisms (in prefered order)</haxe_doc>
		</mechanisms>
		<onNegotiated public="1" set="dynamic" line="43">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Callback on SASL negotiation completed</haxe_doc>
		</onNegotiated>
		<new public="1" set="method" line="59"><f a="stream:mechanisms">
	<c path="jabber.client.Stream"/>
	<t path="Iterable"><t path="jabber.sasl.Mechanism"/></t>
	<x path="Void"/>
</f></new>
		<haxe_doc>SASL client authentication.

	Responsible for:
		* Authenticating a client account using SASL
		* Binding the resource to the connection
		* Establishing a session with the server

	RFC3920-SASL http://xmpp.org/rfcs/rfc3920.html#sasl
	RFC3920-BIND http://xmpp.org/rfcs/rfc3920.html#bind</haxe_doc>
	</class>
	<class path="jabber.client.GMailNotify" params="" file="../../jabber/client/GMailNotify.hx">
		<XMLNS public="1" set="null" line="32" static="1"><c path="String"/></XMLNS>
		<handleNotification set="method" line="77"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleNotification>
		<dispose public="1" set="method" line="72">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops collecting/reporting mail notifications.
		This does NOT unsubscribe from getting mail notifications (currently not provided by the service).</haxe_doc>
		</dispose>
		<request public="1" set="method" line="57">
			<f a="?newerThanTime:?newerThanTid:?q">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@param newerThanTime The time of the oldest unread email to retrieve, in milliseconds
		
		@param newerThanTid The highest thread number of messages to return, where higher numbers are more recent email threads.
		The server will return only threads newer than that specified by this attribute.
		If using this attribute, you should also use newer-than-time for best results.
		When querying for the first time, you should omit this value.
		
		@param q Specifies an optional search query string.
		This string uses the same syntax as the search box in Gmail, including supported operators.
		
		The server will also subscribe the client to receive notifications when new mail is received.</haxe_doc>
		</request>
		<c><c path="jabber.PacketCollector"/></c>
		<stream public="1" set="null"><c path="jabber.client.Stream"/></stream>
		<onMail public="1" set="dynamic" line="34"><f a="m">
	<c path="Xml"/>
	<x path="Void"/>
</f></onMail>
		<new public="1" set="method" line="40"><f a="stream">
	<c path="jabber.client.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A custom google extension to XMPP to enable users to query their Gmail account for emails,
	and receive notifications when a new message arrives.

	https://developers.google.com/talk/jep_extensions/gmail</haxe_doc>
	</class>
	<class path="jabber.client.MUCOccupant" params="" file="../../jabber/client/MUChat.hx" module="jabber.client.MUChat">
		<affiliation public="1"><e path="xmpp.muc.Affiliation"/></affiliation>
		<role public="1"><e path="xmpp.muc.Role"/></role>
		<presence public="1"><c path="xmpp.Presence"/></presence>
		<jid public="1"><c path="String"/></jid>
		<nick public="1"><c path="String"/></nick>
		<new public="1" set="method" line="44"><f a=""><x path="Void"/></f></new>
		<haxe_doc></haxe_doc>
	</class>
	<class path="jabber.client.MUChat" params="" file="../../jabber/client/MUChat.hx">
		<destroy set="method" line="453"><f a=""><x path="Void"/></f></destroy>
		<getOccupantName get="inline" set="null" line="449"><f a="j">
	<c path="String"/>
	<c path="String"/>
</f></getOccupantName>
		<sendMyPresence set="method" line="436"><f a="?priority">
	<x path="Int"/>
	<c path="xmpp.Presence"/>
</f></sendMyPresence>
		<handlePresence set="method" line="275"><f a="p">
	<c path="xmpp.Presence"/>
	<x path="Void"/>
</f></handlePresence>
		<handleMessage set="method" line="251"><f a="m">
	<c path="xmpp.Message"/>
	<x path="Void"/>
</f></handleMessage>
		<invite public="1" set="method" line="231">
			<f a="jid:?reason">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends an (mediated) invitation message to the given entity .</haxe_doc>
		</invite>
		<kick public="1" set="method" line="201">
			<f a="nick:?reason">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc></haxe_doc>
		</kick>
		<changeNick public="1" set="method" line="190">
			<f a="t">
				<c path="String"/>
				<c path="xmpp.Presence"/>
			</f>
			<haxe_doc></haxe_doc>
		</changeNick>
		<changeSubject public="1" set="method" line="179">
			<f a="t">
				<c path="String"/>
				<c path="xmpp.Message"/>
			</f>
			<haxe_doc></haxe_doc>
		</changeSubject>
		<speak public="1" set="method" line="169">
			<f a="t:?properties">
				<c path="String"/>
				<c path="Array"><c path="Xml"/></c>
				<c path="xmpp.Message"/>
			</f>
			<haxe_doc>Sends message to all room occupants.</haxe_doc>
		</speak>
		<sendPresence public="1" set="method" line="159">
			<f a="?show:?status:?priority:?type">
				<e path="xmpp.PresenceShow"/>
				<c path="String"/>
				<x path="Int"/>
				<e path="xmpp.PresenceType"/>
				<c path="xmpp.Presence"/>
			</f>
			<haxe_doc></haxe_doc>
		</sendPresence>
		<leave public="1" set="method" line="145">
			<f a="?message">
				<c path="String"/>
				<c path="xmpp.Presence"/>
			</f>
			<haxe_doc>Sends unavailable presence to the room, exits room.</haxe_doc>
		</leave>
		<join public="1" set="method" line="130">
			<f a="nick:?password">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Sends initial presence to room.</haxe_doc>
		</join>
		<getOccupant public="1" set="method" line="121"><f a="nick">
	<c path="String"/>
	<c path="jabber.client.MUCOccupant"/>
</f></getOccupant>
		<get_me set="method" line="104"><f a=""><c path="jabber.client.MUCOccupant"/></f></get_me>
		<c_message><c path="jabber.PacketCollector"/></c_message>
		<c_presence><c path="jabber.PacketCollector"/></c_presence>
		<message><c path="xmpp.Message"/></message>
		<presence><c path="xmpp.Presence"/></presence>
		<stream public="1" set="null"><c path="jabber.client.Stream"/></stream>
		<me public="1" get="accessor" set="null"><c path="jabber.client.MUCOccupant"/></me>
		<subject public="1" set="null"><c path="String"/></subject>
		<occupants public="1" set="null"><c path="Array"><c path="jabber.client.MUCOccupant"/></c></occupants>
		<affiliation public="1" set="null"><e path="xmpp.muc.Affiliation"/></affiliation>
		<role public="1" set="null"><e path="xmpp.muc.Role"/></role>
		<password public="1" set="null"><c path="String"/></password>
		<nick public="1" set="null"><c path="String"/></nick>
		<myjid public="1" set="null"><c path="String"/></myjid>
		<joined public="1" set="null"><x path="Bool"/></joined>
		<room public="1" set="null"><c path="String"/></room>
		<jid public="1" set="null"><c path="String"/></jid>
		<onError public="1" set="dynamic" line="63"><f a="e">
	<c path="jabber.XMPPError"/>
	<x path="Void"/>
</f></onError>
		<onKick public="1" set="dynamic" line="62"><f a="nick">
	<c path="String"/>
	<x path="Void"/>
</f></onKick>
		<onSubject public="1" set="dynamic" line="61"><f a="o:t">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></onSubject>
		<onPresence public="1" set="dynamic" line="60"><f a="o">
	<c path="jabber.client.MUCOccupant"/>
	<x path="Void"/>
</f></onPresence>
		<onMessage public="1" set="dynamic" line="58"><f a="o:m">
	<c path="jabber.client.MUCOccupant"/>
	<c path="xmpp.Message"/>
	<x path="Void"/>
</f></onMessage>
		<onUnlock public="1" set="dynamic" line="57"><f a=""><x path="Void"/></f></onUnlock>
		<onLeave public="1" set="dynamic" line="56"><f a=""><x path="Void"/></f></onLeave>
		<onJoin public="1" set="dynamic" line="55"><f a=""><x path="Void"/></f></onJoin>
		<new public="1" set="method" line="84"><f a="stream:host:roomName">
	<c path="jabber.client.Stream"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Multiuser chatroom.

	http://www.xmpp.org/extensions/xep-0045.html
	http://www.xmpp.org/extensions/xep-0249.html</haxe_doc>
	</class>
	<class path="jabber.client.NonSASLAuthentication" params="" file="../../jabber/client/NonSASLAuthentication.hx">
		<extends path="jabber.client.AuthenticationBase"/>
		<handleResult set="method" line="78"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleResult>
		<handleResponse set="method" line="64"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleResponse>
		<start public="1" set="method" line="48" override="1"><f a="password:?resource">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></start>
		<password public="1" set="null"><c path="String"/></password>
		<username public="1" set="null"><c path="String"/></username>
		<usePlainText public="1" set="null"><x path="Bool"/></usePlainText>
		<active public="1" set="null"><x path="Bool"/></active>
		<new public="1" set="method" line="37"><f a="stream:?usePlainText">
	<c path="jabber.client.Stream"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[Obsolete, superseded in favor of SASL authentication (jabber.client.Authentication)!
	<a href="http://xmpp.org/extensions/xep-0078.html">XEP-0078: Non-SASL Authentication</a>]]></haxe_doc>
	</class>
	<enum path="jabber.client.RosterSubscriptionMode" params="" file="../../jabber/client/RosterSubscriptionMode.hx">
		<rejectAll><haxe_doc>Reject all subscription requests.</haxe_doc></rejectAll>
		<manual><haxe_doc>Ask how to proceed.</haxe_doc></manual>
		<acceptAll a="subscribe">
			<x path="Bool"/>
			<haxe_doc>Accept all subscription and unsubscription requests.</haxe_doc>
		</acceptAll>
		<haxe_doc>Configuration how to handle recieved presence subscriptions</haxe_doc>
	</enum>
	<class path="jabber.client.Roster" params="" file="../../jabber/client/Roster.hx">
		<defaultSubscriptionMode public="1" line="39" static="1"><e path="jabber.client.RosterSubscriptionMode"/></defaultSubscriptionMode>
		<handlePresence set="method" line="316"><f a="p">
	<c path="xmpp.Presence"/>
	<x path="Void"/>
</f></handlePresence>
		<handleIQ set="method" line="270"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleIQ>
		<sendAddItemRequest set="method" line="247"><f a="jid:?groups">
	<c path="String"/>
	<t path="Iterable"><c path="String"/></t>
	<x path="Void"/>
</f></sendAddItemRequest>
		<sendPresence set="method" line="241"><f a="jid:type">
	<c path="String"/>
	<e path="xmpp.PresenceType"/>
	<x path="Void"/>
</f></sendPresence>
		<confirmSubscription public="1" set="method" line="231">
			<f a="jid:?allow:?subscribe">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allow the requesting entity to recieve presence updates from you.</haxe_doc>
		</confirmSubscription>
		<cancelSubscription public="1" set="method" line="223">
			<f a="jid">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Cancel the subscription from entity.
		You will no longer recieve presence updates.</haxe_doc>
		</cancelSubscription>
		<unsubscribe public="1" set="method" line="207">
			<f a="jid:?cancelSubscription">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Unsubscribe from entities presence.
		The entity will no longer recieve presence updates.</haxe_doc>
		</unsubscribe>
		<subscribe public="1" set="method" line="180">
			<f a="jid">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Subscribe to the presence of the entity.
		You will get presence updates from this entity (if confirmed).</haxe_doc>
		</subscribe>
		<removeItem public="1" set="method" line="156">
			<f a="jid">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Remove entry from remote roster</haxe_doc>
		</removeItem>
		<addItem public="1" set="method" line="146">
			<f a="jid:?groups">
				<c path="String"/>
				<t path="Iterable"><c path="String"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Add entry to your roster</haxe_doc>
		</addItem>
		<load public="1" set="method" line="132">
			<f a=""><x path="Void"/></f>
			<haxe_doc></haxe_doc>
		</load>
		<hasItem public="1" get="inline" set="null" line="126">
			<f a="jid">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc></haxe_doc>
		</hasItem>
		<getItem public="1" set="method" line="119">
			<f a="jid">
				<c path="String"/>
				<c path="xmpp.roster.Item"/>
			</f>
			<haxe_doc></haxe_doc>
		</getItem>
		<dispose public="1" set="method" line="110">
			<f a=""><x path="Void"/></f>
			<haxe_doc></haxe_doc>
		</dispose>
		<get_groups set="method" line="91"><f a=""><c path="Array"><c path="String"/></c></f></get_groups>
		<c_message><c path="jabber.PacketCollector"/></c_message>
		<c_presence><c path="jabber.PacketCollector"/></c_presence>
		<groups public="1" get="accessor" set="null"><c path="Array"><c path="String"/></c></groups>
		<items public="1" set="null"><c path="Array"><c path="xmpp.roster.Item"/></c></items>
		<available public="1" set="null"><x path="Bool"/></available>
		<subscriptionMode public="1"><e path="jabber.client.RosterSubscriptionMode"/></subscriptionMode>
		<stream public="1" set="null"><c path="jabber.client.Stream"/></stream>
		<onError public="1" set="dynamic" line="69">
			<f a="e">
				<c path="jabber.XMPPError"/>
				<x path="Void"/>
			</f>
			<haxe_doc>A roster manipulation error occured</haxe_doc>
		</onError>
		<onUnsubscription public="1" set="dynamic" line="66">
			<f a="i">
				<c path="xmpp.roster.Item"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Contact unsubscribed from your presence</haxe_doc>
		</onUnsubscription>
		<onSubscription public="1" set="dynamic" line="63">
			<f a="jid">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Contact subscribed to your presence</haxe_doc>
		</onSubscription>
		<onAsk public="1" set="dynamic" line="60">
			<f a="i">
				<c path="xmpp.roster.Item"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Incoming presence subscription request</haxe_doc>
		</onAsk>
		<onUnsubscribed public="1" set="dynamic" line="57">
			<f a="i">
				<c path="xmpp.roster.Item"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Unsubscribed presence of the contact</haxe_doc>
		</onUnsubscribed>
		<onSubscribed public="1" set="dynamic" line="54">
			<f a="i">
				<c path="xmpp.roster.Item"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Subscribed to the presence of the contact</haxe_doc>
		</onSubscribed>
		<onUpdate public="1" set="dynamic" line="51">
			<f a="i">
				<c path="xmpp.roster.Item"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Item got updated</haxe_doc>
		</onUpdate>
		<onRemove public="1" set="dynamic" line="48">
			<f a="i">
				<c path="xmpp.roster.Item"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Item got removed from your roster</haxe_doc>
		</onRemove>
		<onAdd public="1" set="dynamic" line="45">
			<f a="i">
				<c path="xmpp.roster.Item"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Item got added to the roster</haxe_doc>
		</onAdd>
		<onLoad public="1" set="dynamic" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Roster got loaded</haxe_doc>
		</onLoad>
		<new public="1" set="method" line="80"><f a="stream:?subscriptionMode">
	<c path="jabber.client.Stream"/>
	<e path="jabber.client.RosterSubscriptionMode"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Client roster (serverside saved contact list)</haxe_doc>
	</class>
	<class path="jabber.client.Stream" params="" file="../../jabber/client/Stream.hx">
		<extends path="jabber.Stream"/>
		<PORT public="1" get="inline" set="null" line="35" static="1"><x path="Int"/></PORT>
		<PORT_SECURE public="1" get="inline" set="null" line="38" static="1"><x path="Int"/></PORT_SECURE>
		<defaultPort public="1" line="41" static="1">
			<x path="Int"/>
			<haxe_doc>The default port for socket connections</haxe_doc>
		</defaultPort>
		<defaultPortSecure public="1" line="44" static="1">
			<x path="Int"/>
			<haxe_doc>The default port for secure socket connections</haxe_doc>
		</defaultPortSecure>
		<parseServerStreamFeatures set="method" line="136"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></parseServerStreamFeatures>
		<processStreamInit set="method" line="72" override="1"><f a="t">
	<c path="String"/>
	<x path="Bool"/>
</f></processStreamInit>
		<handleConnect set="method" line="56" override="1"><f a=""><x path="Void"/></f></handleConnect>
		<version><x path="Bool"/></version>
		<new public="1" set="method" line="48"><f a="cnx:?maxBufSize">
	<c path="jabber.StreamConnection"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Client-Server XMPP stream.

	See: http://xmpp.org/rfcs/rfc6120.html#examples-c2s</haxe_doc>
	</class>
	<class path="jabber.client.VCardBase" params="T" file="../../jabber/client/VCardBase.hx">
		<handleUpdate set="method" line="84"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleUpdate>
		<_handleLoad set="method" line="78"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></_handleLoad>
		<handleLoad set="method" line="67"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleLoad>
		<_load set="method" line="61"><f a="x:jid">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></_load>
		<update public="1" set="method" line="55">
			<f a="vc">
				<c path="jabber.client.VCardBase.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Update own vcard.</haxe_doc>
		</update>
		<load public="1" set="method" line="48">
			<f a="?jid">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Requests to load the vcard from the given entity or own no jid is given.</haxe_doc>
		</load>
		<stream public="1" set="null"><c path="jabber.client.Stream"/></stream>
		<onError public="1" set="dynamic" line="37">
			<f a="e">
				<c path="jabber.XMPPError"/>
				<x path="Void"/>
			</f>
			<haxe_doc></haxe_doc>
		</onError>
		<onUpdate public="1" set="dynamic" line="35">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Own vcard updated callback</haxe_doc>
		</onUpdate>
		<onLoad public="1" set="dynamic" line="33">
			<f a="jid:data">
				<c path="String"/>
				<c path="jabber.client.VCardBase.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>VCard loaded callback</haxe_doc>
		</onLoad>
		<new set="method" line="41"><f a="stream">
	<c path="jabber.client.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Abstract base for vcard classes (jabber.client.VCard and jabber.client.VCardTemp)</haxe_doc>
	</class>
	<class path="jabber.client.VCardTemp" params="" file="../../jabber/client/VCardTemp.hx">
		<extends path="jabber.client.VCardBase"><c path="xmpp.VCardTemp"/></extends>
		<_handleLoad set="method" line="42" override="1"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></_handleLoad>
		<load public="1" set="method" line="38" override="1">
			<f a="?jid">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Requests to load the vcard from the given entity or from its own if jid is null.</haxe_doc>
		</load>
		<new public="1" set="method" line="31"><f a="stream">
	<c path="jabber.client.Stream"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XEP-0054: vcard-temp: http://www.xmpp.org/extensions/xep-0054.html

	Depricated but still widely implementd by servers (use jabber.client.VCard)</haxe_doc>
	</class>
	<class path="jabber.lop.Farm" params="" file="../../jabber/lop/Farm.hx">
		<createFormField set="method" line="199" static="1"><f a="name:value:type">
	<c path="String"/>
	<c path="String"/>
	<e path="xmpp.dataform.FieldType"/>
	<c path="xmpp.dataform.Field"/>
</f></createFormField>
		<createFormFieldMulti set="method" line="206" static="1"><f a="name:values">
	<c path="String"/>
	<t path="Iterable"><c path="String"/></t>
	<c path="xmpp.dataform.Field"/>
</f></createFormFieldMulti>
		<getDataForm public="1" set="method" line="179">
			<f a=""><c path="xmpp.DataForm"/></f>
			<haxe_doc>Generate a dataform of this farms settings.</haxe_doc>
		</getDataForm>
		<handleIQ public="1" set="method" line="87">
			<f a="iq">
				<c path="xmpp.IQ"/>
				<x path="Void"/>
			</f>
			<haxe_doc></haxe_doc>
		</handleIQ>
		<perform_multicast public="1"><t path="Null"><x path="Bool"/></t></perform_multicast>
		<accept_connection public="1"><t path="Null"><x path="Bool"/></t></accept_connection>
		<listen_for_connection public="1"><t path="Null"><x path="Bool"/></t></listen_for_connection>
		<open_connection public="1"><t path="Null"><x path="Bool"/></t></open_connection>
		<delete_file public="1"><c path="Array"><c path="String"/></c></delete_file>
		<write_file public="1"><c path="Array"><c path="String"/></c></write_file>
		<read_file public="1"><c path="Array"><c path="String"/></c></read_file>
		<farm_start_time public="1"><c path="String"/></farm_start_time>
		<max_concurrent_vms public="1"><t path="Null"><x path="Int"/></t></max_concurrent_vms>
		<job_queue_capacity public="1"><t path="Null"><x path="Int"/></t></job_queue_capacity>
		<job_timeout public="1"><x path="Float"/></job_timeout>
		<vm_time_to_live public="1"><x path="Float"/></vm_time_to_live>
		<vm_species public="1"><c path="String"/></vm_species>
		<ip public="1"><c path="String"/></ip>
		<password public="1" set="null"><c path="String"/></password>
		<species public="1" set="null"><x path="Map">
	<c path="String"/>
	<f a=":">
		<c path="jabber.JID"/>
		<c path="xmpp.lop.SpawnVM"/>
		<c path="String"/>
	</f>
</x></species>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<onGetBindings public="1" set="dynamic" line="42"><f a="bindings">
	<c path="xmpp.lop.Bindings"/>
	<c path="xmpp.lop.Bindings"/>
</f></onGetBindings>
		<onSetBindings public="1" set="dynamic" line="41"><f a="bindings">
	<c path="xmpp.lop.Bindings"/>
	<x path="Void"/>
</f></onSetBindings>
		<onPing public="1" set="dynamic" line="40"><f a="ping">
	<c path="xmpp.lop.Ping"/>
	<c path="String"/>
</f></onPing>
		<onVMKill public="1" set="dynamic" line="39"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></onVMKill>
		<onJob public="1" set="dynamic" line="38"><f a="job">
	<c path="xmpp.lop.Submit"/>
	<c path="String"/>
</f></onJob>
		<new public="1" set="method" line="63"><f a="stream:?password:?vm_species:?vm_time_to_live:?job_timeout">
	<c path="jabber.Stream"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Manages the spawning of virtual machines.
	The disco 'identity' of a farm MUST be of category="client" and type="bot" (name is up to the implementation).
	
	Linked Process Protocol: http://xmpp.org/extensions/inbox/lop.html</haxe_doc>
	</class>
	<class path="jabber.lop.Villein" params="" file="../../jabber/lop/Villein.hx">
		<handleSetBindings set="method" line="179"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleSetBindings>
		<handleGetBindings set="method" line="167"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleGetBindings>
		<handleTerminate set="method" line="155"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleTerminate>
		<handlePing set="method" line="144"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handlePing>
		<handleJob set="method" line="131"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleJob>
		<handleVMSpawn set="method" line="121"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleVMSpawn>
		<terminateVM public="1" set="method" line="115">
			<f a="vm_id">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc></haxe_doc>
		</terminateVM>
		<setBindings public="1" set="method" line="102">
			<f a="id:list">
				<c path="String"/>
				<t path="Iterable"><t path="xmpp.lop.Binding"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc></haxe_doc>
		</setBindings>
		<getBindings public="1" set="method" line="91">
			<f a="id:names">
				<c path="String"/>
				<t path="Iterable"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc></haxe_doc>
		</getBindings>
		<abortJob public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc></haxe_doc>
		</abortJob>
		<pingJob public="1" set="method" line="75">
			<f a="vm_id:job_id">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc></haxe_doc>
		</pingJob>
		<submitJob public="1" set="method" line="66">
			<f a="id:job">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc></haxe_doc>
		</submitJob>
		<spawnVM public="1" set="method" line="58">
			<f a="species:?password">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc></haxe_doc>
		</spawnVM>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<farm public="1" set="null">
			<c path="String"/>
			<haxe_doc>The jid of the farm</haxe_doc>
		</farm>
		<onVariablesFail public="1" set="dynamic" line="45"><f a="id:e">
	<c path="String"/>
	<c path="xmpp.Error"/>
	<x path="Void"/>
</f></onVariablesFail>
		<onVariables public="1" set="dynamic" line="44"><f a="bindings">
	<c path="xmpp.lop.Bindings"/>
	<x path="Void"/>
</f></onVariables>
		<onBindFail public="1" set="dynamic" line="43"><f a="id:e">
	<c path="String"/>
	<c path="xmpp.Error"/>
	<x path="Void"/>
</f></onBindFail>
		<onBind public="1" set="dynamic" line="42"><f a="bindings">
	<c path="xmpp.lop.Bindings"/>
	<x path="Void"/>
</f></onBind>
		<onTerminateFail public="1" set="dynamic" line="41"><f a="id:e">
	<c path="String"/>
	<c path="xmpp.Error"/>
	<x path="Void"/>
</f></onTerminateFail>
		<onTerminate public="1" set="dynamic" line="40"><f a="vm">
	<c path="String"/>
	<x path="Void"/>
</f></onTerminate>
		<onFail public="1" set="dynamic" line="39"><f a="id:e">
	<c path="String"/>
	<c path="xmpp.Error"/>
	<x path="Void"/>
</f></onFail>
		<onResult public="1" set="dynamic" line="38"><f a="job">
	<c path="xmpp.lop.Submit"/>
	<x path="Void"/>
</f></onResult>
		<onSpawn public="1" set="dynamic" line="37"><f a="s">
	<c path="xmpp.lop.SpawnVM"/>
	<x path="Void"/>
</f></onSpawn>
		<new public="1" set="method" line="51"><f a="stream:farm">
	<c path="jabber.Stream"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[Communicates with a resource provider's farm in order to spawn and compute with virtual machines that leverage provided resources.<br/>
	
	Linked Process Protocol: http://xmpp.org/extensions/inbox/lop.html]]></haxe_doc>
	</class>
	<class path="jabber.net.SocketConnectionBase_fl" params="" file="../../jabber/net/SocketConnectionBase_fl.hx">
		<extends path="jabber.StreamConnection"/>
		<defaultBufSize public="1" line="34" static="1"><x path="Int"/></defaultBufSize>
		<defaultMaxBufSize public="1" line="35" static="1"><x path="Int"/></defaultMaxBufSize>
		<defaultTimeout public="1" line="36" static="1"><x path="Int"/></defaultTimeout>
		<bufsize><x path="Int"/></bufsize>
		<bufpos><x path="Int"/></bufpos>
		<buf><c path="haxe.io.Bytes"/></buf>
		<socket public="1" set="null"><c path="flash.net.Socket"/></socket>
		<timeout public="1" set="null"><x path="Int"/></timeout>
		<maxbufsize public="1" set="null"><x path="Int"/></maxbufsize>
		<port public="1" set="null"><x path="Int"/></port>
		<new set="method" line="47"><f a="host:port:secure:?bufsize:?maxbufsize:?timeout">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="jabber.net.SocketConnection_fl" params="" file="../../jabber/net/SocketConnection_fl.hx">
		<extends path="jabber.net.SocketConnectionBase_fl"/>
		<sockDataHandler set="method" line="99"><f a="e">
	<c path="flash.events.ProgressEvent"/>
	<x path="Void"/>
</f></sockDataHandler>
		<sockErrorHandler set="method" line="94"><f a="e">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></sockErrorHandler>
		<sockDisconnectHandler set="method" line="89"><f a="e">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></sockDisconnectHandler>
		<sockConnectHandler set="method" line="84"><f a="e">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></sockConnectHandler>
		<writeBytes public="1" set="method" line="76" override="1"><f a="t">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></writeBytes>
		<write public="1" set="method" line="68" override="1"><f a="t">
	<c path="String"/>
	<x path="Bool"/>
</f></write>
		<read public="1" set="method" line="59" override="1"><f a="?yes">
	<x path="Bool"/>
	<x path="Bool"/>
</f></read>
		<disconnect public="1" set="method" line="50" override="1"><f a=""><x path="Void"/></f></disconnect>
		<connect public="1" set="method" line="40" override="1"><f a=""><x path="Void"/></f></connect>
		<new public="1" set="method" line="34"><f a="?host:?port:?secure:?bufSize:?maxBufSize:?timeout">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="jabber.remoting.Connection" params="" file="../../jabber/remoting/Connection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" get="inline" set="null" line="103" static="1"><f a="stream:target">
	<c path="jabber.Stream"/>
	<c path="String"/>
	<c path="jabber.remoting.Connection"/>
</f></create>
		<call public="1" set="method" line="66"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" get="inline" set="null" line="62"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__error><f a="">
	<d/>
	<x path="Void"/>
</f></__error>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<target public="1">
			<c path="String"/>
			<haxe_doc>Jid of opposite</haxe_doc>
		</target>
		<new set="method" line="42"><f a="stream:target:path:error">
	<c path="jabber.Stream"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc>Haxe remoting connection to another XMPP entity.
	User ServiceDiscovery to determine if an entity supports haxe-remoting (hxr).

	http://haxe.org/doc/remoting</haxe_doc>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="jabber.remoting.Host" params="" file="../../jabber/remoting/Host.hx">
		<numActive public="1" set="null" static="1"><x path="Int"/></numActive>
		<processRequest public="1" set="method" line="75" static="1"><f a="data:ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="String"/>
</f></processRequest>
		<handleIQ set="method" line="60"><f a="iq">
	<c path="xmpp.IQ"/>
	<x path="Void"/>
</f></handleIQ>
		<close public="1" set="method" line="53"><f a=""><x path="Void"/></f></close>
		<c><c path="jabber.PacketCollector"/></c>
		<stream public="1" set="null"><c path="jabber.Stream"/></stream>
		<ctx public="1"><c path="haxe.remoting.Context"/></ctx>
		<client public="1" set="null">
			<c path="String"/>
			<haxe_doc>JID of current/last processed entity</haxe_doc>
		</client>
		<new public="1" set="method" line="45"><f a="stream:ctx">
	<c path="jabber.Stream"/>
	<c path="haxe.remoting.Context"/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[HaXe remoting host.<br/>
	<a href="http://haxe.org/doc/remoting">http://haxe.org/doc/remoting</a>]]></haxe_doc>
	</class>
	<class path="jabber.sasl.LOGINMechanism" params="" file="../../jabber/sasl/LOGINMechanism.hx">
		<NAME public="1" get="inline" set="null" line="35" static="1"><c path="String"/></NAME>
		<createChallengeResponse public="1" set="method" line="56">
			<f a="c">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</createChallengeResponse>
		<createAuthenticationText public="1" set="method" line="48">
			<f a="username:host:password:resource">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</createAuthenticationText>
		<nChallenges><x path="Int"/></nChallenges>
		<username><c path="String"/></username>
		<password><c path="String"/></password>
		<id public="1" set="null"><c path="String"/></id>
		<new public="1" get="inline" set="null" line="43"><f a=""><x path="Void"/></f></new>
		<haxe_doc>LOGIN SASL Mechanism.
	
	Obsolete clear-text user/password Simple Authentication and Security Layer (SASL) mechanism called the LOGIN mechanism.
	The LOGIN mechanism was intended to be used, in combination with data confidentiality services provided by a lower layer,
	in protocols which lack a simple password authentication command.

	http://tools.ietf.org/id/draft-murchison-sasl-login-00.txt</haxe_doc>
	</class>
	<class path="jabber.sasl.MD5Calculator" params="" file="../../jabber/sasl/MD5Calculator.hx">
		<parseChallenge public="1" set="method" line="35" static="1">
			<f a="challenge">
				<c path="String"/>
				<a>
					<realm><c path="String"/></realm>
					<nonce><c path="String"/></nonce>
				</a>
			</f>
			<haxe_doc>* Parses the initial challenge and returns calculated realm and nonce</haxe_doc>
		</parseChallenge>
		<run public="1" set="method" line="56" static="1">
			<f a="host:serverType:username:realm:pass:nonce">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Caluclate/Create the MD5 challenge response</haxe_doc>
		</run>
		<h get="inline" set="null" line="89" static="1"><f a="t">
	<c path="String"/>
	<c path="String"/>
</f></h>
		<hh get="inline" set="null" line="90" static="1"><f a="t">
	<c path="String"/>
	<c path="String"/>
</f></hh>
		<quote get="inline" set="null" line="91" static="1"><f a="t">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<unquote get="inline" set="null" line="92" static="1"><f a="t">
	<c path="String"/>
	<c path="String"/>
</f></unquote>
		<haxe_doc>Static methods for computing SASL-MD5 credentials.</haxe_doc>
	</class>
	<class path="jabber.sasl.MD5Mechanism" params="" file="../../jabber/sasl/MD5Mechanism.hx">
		<NAME public="1" get="inline" set="null" line="30" static="1"><c path="String"/></NAME>
		<createChallengeResponse public="1" set="method" line="55">
			<f a="challenge">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</createChallengeResponse>
		<createAuthenticationText public="1" set="method" line="46">
			<f a="username:host:pass:resource">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</createAuthenticationText>
		<resource><c path="String"/></resource>
		<pass><c path="String"/></pass>
		<host><c path="String"/></host>
		<username><c path="String"/></username>
		<serverType public="1"><c path="String"/></serverType>
		<id public="1" set="null"><c path="String"/></id>
		<new public="1" set="method" line="40"><f a="?serverType">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Using Digest Authentication as a SASL Mechanism: ftp://ietf.org//rfc/rfc2831.txt
	SASL and DIGEST-MD5 for XMPP: http://web.archive.org/web/20050224191820/http://cataclysm.cx/wip/digest-md5-crash.html</haxe_doc>
	</class>
	<typedef path="jabber.sasl.Mechanism" params="" file="../../jabber/sasl/Mechanism.hx">
		<a>
			<id set="null">
				<c path="String"/>
				<haxe_doc>The id of this mechanism, for example PLAIN, DIGEST-MD5, ...</haxe_doc>
			</id>
			<createChallengeResponse set="method">
				<f a="challenge">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc></haxe_doc>
			</createChallengeResponse>
			<createAuthenticationText set="method">
				<f a="user:host:password:resource">
					<c path="String"/>
					<c path="String"/>
					<c path="String"/>
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc></haxe_doc>
			</createAuthenticationText>
		</a>
		<haxe_doc>SASL mechanism type.</haxe_doc>
	</typedef>
	<class path="jabber.sasl.PlainMechanism" params="" file="../../jabber/sasl/PlainMechanism.hx">
		<NAME public="1" get="inline" set="null" line="32" static="1"><c path="String"/></NAME>
		<createChallengeResponse public="1" get="inline" set="null" line="51">
			<f a="c">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</createChallengeResponse>
		<createAuthenticationText public="1" get="inline" set="null" line="41">
			<f a="username:host:password:resource">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</createAuthenticationText>
		<id public="1" set="null"><c path="String"/></id>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The PLAIN mechanism should not be used without adequate data security protection
	as this mechanism affords no integrity or confidentiality protections itself.
	
	The PLAIN Simple Authentication and Security Layer (SASL) Mechanism: http://www.ietf.org/rfc/rfc4616.txt</haxe_doc>
	</class>
	<class path="jabber.util.Base64" params="" file="../../jabber/util/Base64.hx">
		<CHARS public="1" line="39" static="1"><c path="String"/></CHARS>
		<encode public="1" set="method" line="45" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc></haxe_doc>
		</encode>
		<decode public="1" set="method" line="74" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc></haxe_doc>
		</decode>
		<encodeBytes public="1" set="method" line="101" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc></haxe_doc>
		</encodeBytes>
		<decodeBytes public="1" set="method" line="120" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc></haxe_doc>
		</decodeBytes>
		<random public="1" set="method" line="138" static="1">
			<f a="?len:?chars">
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Create a random (base64 compatible) string of given length.</haxe_doc>
		</random>
		<haxe_doc>Base64 encoding/decoding utility.</haxe_doc>
	</class>
	<class path="jabber.util.DateUtil" params="" file="../../jabber/util/DateUtil.hx"><formatTimePartValue public="1" set="method" line="30" static="1"><f a="v">
	<x path="Int"/>
	<c path="String"/>
</f></formatTimePartValue></class>
	<class path="jabber.util.MD5" params="" file="../../jabber/util/MD5.hx">
		<encode public="1" get="inline" set="null" line="36" static="1">
			<f a="s:?raw">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc></haxe_doc>
		</encode>
		<inst line="74" static="1"><c path="jabber.util.MD5"/></inst>
		<__encode set="method" line="190"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></__encode>
		<doEncode set="method" line="185"><f a="t">
	<c path="String"/>
	<c path="String"/>
</f></doEncode>
		<doEncodeRaw set="method" line="177"><f a="t">
	<c path="String"/>
	<c path="String"/>
</f></doEncodeRaw>
		<bin2str set="method" line="167"><f a="inp">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></bin2str>
		<str2bin set="method" line="155"><f a="inp">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2bin>
		<ii set="method" line="151"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<hh set="method" line="147"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<gg set="method" line="143"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<ff set="method" line="139"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<cmn set="method" line="135"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<rol set="method" line="131"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<str2blks set="method" line="112"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<addme set="method" line="106"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<bitAND set="method" line="100"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<bitXOR set="method" line="94"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitOR set="method" line="88"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<rhex set="method" line="78"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></rhex>
		<new set="method" line="76"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.
	Modified version from the haxe std lib to provide raw encoding as well as support for non official compiler targets.</haxe_doc>
	</class>
	<class path="jabber.util.SHA1" params="" file="../../jabber/util/SHA1.hx"><encode public="1" get="inline" set="null" line="38" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode></class>
	<class path="jabber.util.SystemUtil" params="" file="../../jabber/util/SystemUtil.hx"><systemName public="1" get="inline" set="null" line="31" static="1">
	<f a=""><c path="String"/></f>
	<haxe_doc>Returns the name of the operating system used (crossplatform).</haxe_doc>
</systemName></class>
	<class path="jabber.util.XMLBeautify" params="" file="../../jabber/util/XMLBeautify.hx">
		<it public="1" set="method" line="35" static="1">
			<f a="t">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format given string to something readable.
		Only for debugging, do NOT use in production.</haxe_doc>
		</it>
		<createNode set="method" line="43" static="1"><f a="x:b:depth">
	<c path="Xml"/>
	<c path="StringBuf"/>
	<x path="Int"/>
	<x path="Void"/>
</f></createNode>
		<indent get="inline" set="null" line="77" static="1"><f a="b:n">
	<c path="StringBuf"/>
	<x path="Int"/>
	<x path="Void"/>
</f></indent>
		<haxe_doc>Utility to 'beautify' XML strings (for debugging).</haxe_doc>
	</class>
	<class path="xmpp.Attention" params="" file="../../xmpp/Attention.hx">
		<XMLNS public="1" set="null" line="26" static="1"><c path="String"/></XMLNS>
		<createXml public="1" get="inline" set="null" line="28" static="1"><f a=""><c path="Xml"/></f></createXml>
	</class>
	<class path="xmpp.Auth" params="" file="../../xmpp/Auth.hx">
		<XMLNS public="1" set="null" line="31" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="68" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.Auth"/>
</f></parse>
		<toXml public="1" set="method" line="45"><f a=""><c path="Xml"/></f></toXml>
		<resource public="1"><c path="String"/></resource>
		<digest public="1"><c path="String"/></digest>
		<password public="1"><c path="String"/></password>
		<username public="1"><c path="String"/></username>
		<new public="1" set="method" line="38"><f a="?username:?password:?digest:?resource">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>IQ extension used for inband account authentication.</haxe_doc>
	</class>
	<class path="xmpp.Bind" params="" file="../../xmpp/Bind.hx">
		<XMLNS public="1" set="null" line="32" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="52" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.Bind"/>
</f></parse>
		<toXml public="1" set="method" line="42"><f a=""><c path="Xml"/></f></toXml>
		<jid public="1"><c path="String"/></jid>
		<resource public="1"><c path="String"/></resource>
		<new public="1" set="method" line="37"><f a="?resource:?jid">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[IQ extension used to bind a resource to a stream.
	http://xmpp.org/rfcs/rfc3920.html#bind">RFC3920#bind]]></haxe_doc>
	</class>
	<class path="xmpp.Packet" params="" file="../../xmpp/Packet.hx">
		<PROTOCOL public="1" set="null" line="29" static="1"><c path="String"/></PROTOCOL>
		<parse public="1" set="method" line="82" static="1">
			<f a="x">
				<c path="Xml"/>
				<c path="xmpp.Packet"/>
			</f>
			<haxe_doc>Parses given XML into a XMPP packet object.</haxe_doc>
		</parse>
		<parseAttributes set="method" line="94" static="1">
			<f a="p:x">
				<c path="xmpp.Packet"/>
				<c path="Xml"/>
				<c path="xmpp.Packet"/>
			</f>
			<haxe_doc>Parses/adds basic attributes to the XMPP packet.</haxe_doc>
		</parseAttributes>
		<addAttributes set="method" line="66">
			<f a="x">
				<c path="Xml"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Adds the basic packet attributes to the given XML.</haxe_doc>
		</addAttributes>
		<toString public="1" set="method" line="59">
			<f a=""><c path="String"/></f>
			<haxe_doc>Creates/Returns the string representation of this XMPP packet.</haxe_doc>
		</toString>
		<toXml public="1" set="method" line="52">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates/Returns the XML representation of this XMPP packet.</haxe_doc>
		</toXml>
		<errors public="1"><c path="Array"><c path="xmpp.Error"/></c></errors>
		<properties public="1"><c path="Array"><c path="Xml"/></c></properties>
		<lang public="1"><c path="String"/></lang>
		<id public="1"><c path="String"/></id>
		<from public="1"><c path="String"/></from>
		<to public="1"><c path="String"/></to>
		<_type public="1" set="null">
			<e path="xmpp.PacketType"/>
			<haxe_doc>The top level type of the XMPP packet</haxe_doc>
		</_type>
		<new set="method" line="40"><f a="?to:?from:?id:?lang">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Abstract base for XMPP packets.</haxe_doc>
	</class>
	<class path="xmpp.Caps" params="" file="../../xmpp/Caps.hx">
		<XMLNS public="1" set="null" line="33" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="76" static="1">
			<f a="x">
				<c path="Xml"/>
				<c path="xmpp.Caps"/>
			</f>
			<haxe_doc></haxe_doc>
		</parse>
		<has public="1" set="method" line="83" static="1">
			<f a="p">
				<c path="xmpp.Packet"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the given xmpp packet has a caps property</haxe_doc>
		</has>
		<fromPresence public="1" set="method" line="101" static="1">
			<f a="p">
				<c path="xmpp.Packet"/>
				<c path="xmpp.Caps"/>
			</f>
			<haxe_doc>Extracts the caps information from given presence packet</haxe_doc>
		</fromPresence>
		<createVerfificationString public="1" set="method" line="111" static="1">
			<f a="identities:features:?dataform">
				<t path="Iterable"><t path="xmpp.disco.Identity"/></t>
				<t path="Iterable"><c path="String"/></t>
				<c path="xmpp.DataForm"/>
				<c path="String"/>
			</f>
			<haxe_doc>http://xmpp.org/extensions/xep-0115.html#ver</haxe_doc>
		</createVerfificationString>
		<sortIdentities set="method" line="149" static="1"><f a="a:b">
	<t path="xmpp.disco.Identity"/>
	<t path="xmpp.disco.Identity"/>
	<x path="Int"/>
</f></sortIdentities>
		<sortDataFormFields set="method" line="162" static="1"><f a="a:b">
	<c path="xmpp.dataform.Field"/>
	<c path="xmpp.dataform.Field"/>
	<x path="Int"/>
</f></sortDataFormFields>
		<sortString set="method" line="166" static="1"><f a="a:b">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
</f></sortString>
		<toXml public="1" set="method" line="64"><f a=""><c path="Xml"/></f></toXml>
		<ext public="1">
			<c path="String"/>
			<haxe_doc>A set of nametokens specifying additional feature bundles.
		This attribute is deprecated!</haxe_doc>
		</ext>
		<ver public="1">
			<c path="String"/>
			<haxe_doc>A string that is used to verify the identity and supported features of the entity</haxe_doc>
		</ver>
		<node public="1">
			<c path="String"/>
			<haxe_doc>A URI that uniquely identifies a software application, typically a URL at the website
		of the project or company that produces the software</haxe_doc>
		</node>
		<hash public="1">
			<c path="String"/>
			<haxe_doc>The hashing algorithm used to generate the verification string, fe: sha-1.</haxe_doc>
		</hash>
		<new public="1" set="method" line="57"><f a="hash:node:ver:?ext">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XEP-0085: Entity Capabilities: http://xmpp.org/extensions/xep-0115.html</haxe_doc>
	</class>
	<class path="xmpp.DataForm" params="" file="../../xmpp/DataForm.hx">
		<XMLNS public="1" set="null" line="34" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.DataForm"/>
</f></parse>
		<toXml public="1" set="method" line="49"><f a=""><c path="Xml"/></f></toXml>
		<items public="1"><c path="Array"><c path="xmpp.dataform.Item"/></c></items>
		<reported public="1"><c path="xmpp.dataform.Reported"/></reported>
		<fields public="1"><c path="Array"><c path="xmpp.dataform.Field"/></c></fields>
		<instructions public="1"><c path="String"/></instructions>
		<title public="1"><c path="String"/></title>
		<type public="1"><e path="xmpp.dataform.FormType"/></type>
		<new public="1" set="method" line="43"><f a="?type">
	<e path="xmpp.dataform.FormType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>DataForm packet extension (for iq and message packets).

	XEP-0004: Data Forms: http://xmpp.org/extensions/xep-0004.html</haxe_doc>
	</class>
	<class path="xmpp.DateTime" params="" file="../../xmpp/DateTime.hx">
		<EREG_DATE public="1" line="35" static="1">
			<c path="EReg"/>
			<haxe_doc>UTC date expression.
		CCYY-MM-DDThh:mm:ss[.sss]TZD</haxe_doc>
		</EREG_DATE>
		<EREG_TIME public="1" line="41" static="1">
			<c path="EReg"/>
			<haxe_doc>UTC time expression.
		hh:mm:ss[.sss][TZD]</haxe_doc>
		</EREG_TIME>
		<isValidDate public="1" get="inline" set="null" line="43" static="1"><f a="t">
	<c path="String"/>
	<x path="Bool"/>
</f></isValidDate>
		<isValidTime public="1" get="inline" set="null" line="47" static="1"><f a="t">
	<c path="String"/>
	<x path="Bool"/>
</f></isValidTime>
		<now public="1" get="inline" set="null" line="54" static="1">
			<f a="?offset">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the current time as UTC formatted string</haxe_doc>
		</now>
		<fromDate public="1" get="inline" set="null" line="61" static="1">
			<f a="d:?offset">
				<c path="Date"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a the given date as UTC formatted string</haxe_doc>
		</fromDate>
		<fromTime public="1" get="inline" set="null" line="68" static="1">
			<f a="t:?offset">
				<x path="Float"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a the given date as UTC formatted string</haxe_doc>
		</fromTime>
		<toDate public="1" set="method" line="79" static="1">
			<f a="utc:?tzo">
				<c path="String"/>
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc><![CDATA[Create a Date object from a UTC time string

		//TODO this offset thing will fail!
		// TODO 24+ -> 0
		//untested!]]></haxe_doc>
		</toDate>
		<utc public="1" set="method" line="105" static="1">
			<f a="t:?offset">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Formats a (regular) date string to a XMPP compatible UTC date string (CCYY-MM-DDThh:mm:ss[.sss]TZD)
		For example: 2008-11-01 18:45:47 gets 2008-11-01T18:45:47Z
		Optionally a timezone offset could be attached.</haxe_doc>
		</utc>
		<getParts public="1" set="method" line="152" static="1">
			<f a="utc">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Return the parts of a UTC time string
		//TODO include tzo</haxe_doc>
		</getParts>
		<getTZOValue public="1" set="method" line="170" static="1">
			<f a="tzo">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the given TZO as integer value</haxe_doc>
		</getTZOValue>
		<getTimeValue public="1" set="method" line="177" static="1"><f a="t">
	<c path="String"/>
	<x path="Int"/>
</f></getTimeValue>
		<haxe_doc>Standardization of ISO 8601 profiles and their lexical representation.

	XMPP Date and Time Profiles: http://xmpp.org/extensions/xep-0082.html</haxe_doc>
	</class>
	<class path="xmpp.EntityTime" params="" file="../../xmpp/EntityTime.hx">
		<XMLNS public="1" set="null" line="31" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="78" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.EntityTime"/>
</f></parse>
		<toXml public="1" set="method" line="70"><f a=""><c path="Xml"/></f></toXml>
		<tzo public="1">
			<c path="String"/>
			<haxe_doc>The entity's numeric time zone offset from UTC.
		The format conforms to the Time Zone Definition (TZD) specified in XEP-0082 (http://www.xmpp.org/extensions/xep-0082.html).
		Example: +02:00</haxe_doc>
		</tzo>
		<utc public="1">
			<c path="String"/>
			<haxe_doc>The UTC time according to the responding entity.
		 The format conforms to the dateTime profile specified in XEP-0082 (http://www.xmpp.org/extensions/xep-0082.html)
		 and MUST be expressed in UTC.</haxe_doc>
		</utc>
		<new public="1" set="method" line="48"><f a="?utc:?tzo">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XEP 202 - EntityTime: http://www.xmpp.org/extensions/xep-0202.html</haxe_doc>
	</class>
	<typedef path="xmpp.ApplicationErrorCondition" params="" file="../../xmpp/ErrorPacket.hx" module="xmpp.ErrorPacket"><a>
	<xmlns><c path="String"/></xmlns>
	<condition><c path="String"/></condition>
</a></typedef>
	<enum path="xmpp.ErrorType" params="" file="../../xmpp/ErrorType.hx">
		<auth><haxe_doc>Retry after providing credentials</haxe_doc></auth>
		<cancel><haxe_doc>Do not retry (the error is unrecoverable)</haxe_doc></cancel>
		<continue_><haxe_doc>Proceed (the condition was only a warning)</haxe_doc></continue_>
		<modify><haxe_doc>Retry after changing the data sent</haxe_doc></modify>
		<wait><haxe_doc>Retry after waiting (the error is temporary)</haxe_doc></wait>
	</enum>
	<class path="xmpp.HXR" params="" file="../../xmpp/HXR.hx">
		<XMLNS public="1" set="null" line="29" static="1"><c path="String"/></XMLNS>
		<create public="1" set="method" line="33" static="1">
			<f a="?d">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc></haxe_doc>
		</create>
		<getData public="1" get="inline" set="null" line="42" static="1">
			<f a="x">
				<c path="Xml"/>
				<c path="String"/>
			</f>
			<haxe_doc></haxe_doc>
		</getData>
		<haxe_doc>Haxe/XMPP remoting extension</haxe_doc>
	</class>
	<class path="xmpp.IQ" params="" file="../../xmpp/IQ.hx">
		<extends path="xmpp.Packet"/>
		<parse public="1" set="method" line="82" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.IQ"/>
</f></parse>
		<createQueryXml public="1" set="method" line="105" static="1">
			<f a="ns:?name">
				<c path="String"/>
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc><![CDATA[Creates a '<query xmlns="namspace"/>' XML tag]]></haxe_doc>
		</createQueryXml>
		<createResult public="1" get="inline" set="null" line="114" static="1">
			<f a="iq:?from">
				<c path="xmpp.IQ"/>
				<c path="String"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Creates a result type IQ from the given request</haxe_doc>
		</createResult>
		<createError public="1" set="method" line="121" static="1">
			<f a="iq:?errors:?from">
				<c path="xmpp.IQ"/>
				<c path="Array"><c path="xmpp.Error"/></c>
				<c path="String"/>
				<c path="xmpp.IQ"/>
			</f>
			<haxe_doc>Creates a error type IQ packet from given request</haxe_doc>
		</createError>
		<toXml public="1" set="method" line="74" override="1"><f a=""><c path="Xml"/></f></toXml>
		<x public="1">
			<t path="xmpp.PacketElement"/>
			<haxe_doc>The exclusive child of the IQ packet</haxe_doc>
		</x>
		<type public="1">
			<e path="xmpp.IQType"/>
			<haxe_doc>Either: get/set/result/error</haxe_doc>
		</type>
		<new public="1" set="method" line="66"><f a="?type:?id:?to:?from">
	<e path="xmpp.IQType"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[InfoQuery XMPP packet

	Info/Query, or IQ, is a "request-response" mechanism, similar in some ways to the Hypertext Transfer Protocol [HTTP].
	The semantics of IQ enable an entity to make a request of, and receive a response from, another entity.
	The data content of the request and response is defined by the schema or other structural definition associated with the XML namespace that qualifies the direct child element of the IQ element,
	and the interaction is tracked by the requesting entity through use of the 'id' attribute. Thus, IQ interactions follow a common pattern of structured data exchange such as get/result or set/result (although an error can be returned in reply to a request if appropriate)

	Requesting                  Responding
	  Entity                      Entity
	----------                  ----------
	    |                            |
	    | <iq id='1' type='get'>     |
	    |   [ ... payload ... ]      |
	    | </iq>                      |
	    | -------------------------> |
	    |                            |
	    | <iq id='1' type='result'>  |
	    |   [ ... payload ... ]      |
	    | </iq>                      |
	    | <------------------------- |
	    |                            |
	    | <iq id='2' type='set'>     |
	    |   [ ... payload ... ]      |
	    | </iq>                      |
	    | -------------------------> |
	    |                            |
	    | <iq id='2' type='error'>   |
	    |   [ ... condition ... ]    |
	    | </iq>                      |
	    | <------------------------- |
	    |                            |]]></haxe_doc>
	</class>
	<enum path="xmpp.IQType" params="" file="../../xmpp/IQType.hx">
		<get/>
		<set/>
		<result/>
		<error/>
	</enum>
	<class path="xmpp.LOP" params="" file="../../xmpp/LOP.hx"><XMLNS public="1" set="null" line="25" static="1"><c path="String"/></XMLNS></class>
	<class path="xmpp.LastActivity" params="" file="../../xmpp/LastActivity.hx">
		<XMLNS public="1" set="null" line="29" static="1"><c path="String"/></XMLNS>
		<parse public="1" get="inline" set="null" line="43" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.LastActivity"/>
</f></parse>
		<parseSeconds public="1" get="inline" set="null" line="50" static="1">
			<f a="x">
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Parses/Returns the time value of the given IQ query xml.</haxe_doc>
		</parseSeconds>
		<toXml public="1" set="method" line="37"><f a=""><c path="Xml"/></f></toXml>
		<seconds public="1"><x path="Int"/></seconds>
		<new public="1" set="method" line="33"><f a="?seconds">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XEP-0012: Last Activity: http://xmpp.org/extensions/xep-0012.html</haxe_doc>
	</class>
	<class path="xmpp.MUC" params="" file="../../xmpp/MUC.hx"><XMLNS public="1" set="null" line="25" static="1"><c path="String"/></XMLNS></class>
	<class path="xmpp.MUCAdmin" params="" file="../../xmpp/MUCAdmin.hx">
		<XMLNS public="1" set="null" line="26" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="40" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.MUCAdmin"/>
</f></parse>
		<toXml public="1" set="method" line="34"><f a=""><c path="Xml"/></f></toXml>
		<items public="1"><c path="Array"><c path="xmpp.muc.Item"/></c></items>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="xmpp.MUCOwner" params="" file="../../xmpp/MUCOwner.hx">
		<XMLNS public="1" set="null" line="26" static="1"><c path="String"/></XMLNS>
		<toXml public="1" set="method" line="36"><f a=""><c path="Xml"/></f></toXml>
		<items public="1"><c path="List"><c path="xmpp.muc.Item"/></c></items>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="xmpp.MUCUser" params="" file="../../xmpp/MUCUser.hx">
		<XMLNS public="1" set="null" line="33" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="55" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.MUCUser"/>
</f></parse>
		<toXml public="1" set="method" line="44"><f a=""><c path="Xml"/></f></toXml>
		<status public="1"><c path="xmpp.muc.Status"/></status>
		<password public="1"><c path="String"/></password>
		<item public="1"><c path="xmpp.muc.Item"/></item>
		<invite public="1"><c path="xmpp.muc.Invite"/></invite>
		<destroy public="1"><c path="xmpp.muc.Destroy"/></destroy>
		<decline public="1"><c path="xmpp.muc.Decline"/></decline>
		<new public="1" set="method" line="42"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="xmpp.Message" params="" file="../../xmpp/Message.hx">
		<extends path="xmpp.Packet"/>
		<parse public="1" set="method" line="60" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.Message"/>
</f></parse>
		<toXml public="1" set="method" line="50" override="1"><f a=""><c path="Xml"/></f></toXml>
		<thread public="1">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</thread>
		<subject public="1">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</subject>
		<body public="1">
			<c path="String"/>
			<haxe_doc></haxe_doc>
		</body>
		<type public="1">
			<e path="xmpp.MessageType"/>
			<haxe_doc></haxe_doc>
		</type>
		<new public="1" set="method" line="38"><f a="?to:?body:?subject:?type:?thread:?from">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="xmpp.MessageType"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XMPP message packet.</haxe_doc>
	</class>
	<enum path="xmpp.MessageType" params="" file="../../xmpp/MessageType.hx">
		<normal/>
		<error/>
		<chat/>
		<groupchat/>
		<headline/>
		<haxe_doc></haxe_doc>
	</enum>
	<typedef path="xmpp.PacketElement" params="" file="../../xmpp/PacketElement.hx"><a><toXml set="method"><f a=""><c path="Xml"/></f></toXml></a></typedef>
	<typedef path="xmpp.PacketFilter" params="" file="../../xmpp/PacketFilter.hx"><a><accept set="method">
	<f a="packet">
		<c path="xmpp.Packet"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Returns true if the given XMPP packet passes through this filter.</haxe_doc>
</accept></a></typedef>
	<enum path="xmpp.PacketType" params="" file="../../xmpp/PacketType.hx">
		<iq><haxe_doc></haxe_doc></iq>
		<message><haxe_doc></haxe_doc></message>
		<presence><haxe_doc></haxe_doc></presence>
		<custom><haxe_doc></haxe_doc></custom>
		<haxe_doc>Core XMPP packet types.</haxe_doc>
	</enum>
	<class path="xmpp.PersonalEvent" params="" file="../../xmpp/PersonalEvent.hx">
		<toXml public="1" set="method" line="52"><f a=""><c path="Xml"/></f></toXml>
		<empty public="1" set="method" line="48">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns a empty XML node for disabling the personal event.</haxe_doc>
		</empty>
		<getNode public="1" set="method" line="41">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the (subclass) namespace.</haxe_doc>
		</getNode>
		<xmlns public="1" set="null"><c path="String"/></xmlns>
		<nodeName public="1" set="null"><c path="String"/></nodeName>
		<new set="method" line="33"><f a="nodeName:xmlns">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Abstract base for personal event classes.
	The implementing class HAS TO HAVE a static XMLNS field (required by jabber.PersonalEventListener)!</haxe_doc>
	</class>
	<class path="xmpp.Ping" params="" file="../../xmpp/Ping.hx">
		<XMLNS public="1" set="null" line="28" static="1"><c path="String"/></XMLNS>
		<xml public="1" line="29" static="1"><c path="Xml"/></xml>
		<haxe_doc><![CDATA[<a href="http://www.xmpp.org/extensions/xep-0199.html">XEP 199 - XMPP Ping</a>]]></haxe_doc>
	</class>
	<class path="xmpp.PlainPacket" params="" file="../../xmpp/PlainPacket.hx">
		<extends path="xmpp.Packet"/>
		<toXml public="1" get="inline" set="null" line="40" override="1"><f a=""><c path="Xml"/></f></toXml>
		<src public="1">
			<c path="Xml"/>
			<haxe_doc>Plain XML content of the packet.</haxe_doc>
		</src>
		<new public="1" set="method" line="34"><f a="src">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Plain/Custom XMPP packet.</haxe_doc>
	</class>
	<class path="xmpp.Presence" params="" file="../../xmpp/Presence.hx">
		<extends path="xmpp.Packet"/>
		<MAX_STATUS_SIZE public="1" get="inline" set="null" line="30" static="1"><x path="Int"/></MAX_STATUS_SIZE>
		<parse public="1" set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.Presence"/>
</f></parse>
		<toXml public="1" set="method" line="52" override="1"><f a=""><c path="Xml"/></f></toXml>
		<set_status set="method" line="46"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></set_status>
		<priority public="1"><t path="Null"><x path="Int"/></t></priority>
		<status public="1" set="accessor"><c path="String"/></status>
		<show public="1"><e path="xmpp.PresenceShow"/></show>
		<type public="1"><e path="xmpp.PresenceType"/></type>
		<new public="1" set="method" line="37"><f a="?show:?status:?priority:?type">
	<e path="xmpp.PresenceShow"/>
	<c path="String"/>
	<x path="Int"/>
	<e path="xmpp.PresenceType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>RFC-3921 - Instant Messaging and Presence: http://xmpp.org/rfcs/rfc3921.html
	Exchanging Presence Information: http://www.xmpp.org/rfcs/rfc3921.html#presence</haxe_doc>
	</class>
	<enum path="xmpp.PresenceShow" params="" file="../../xmpp/PresenceShow.hx">
		<chat><haxe_doc>Especially socialable</haxe_doc></chat>
		<away><haxe_doc>Away from device</haxe_doc></away>
		<xa><haxe_doc>Extended Away</haxe_doc></xa>
		<dnd><haxe_doc>Busy</haxe_doc></dnd>
		<haxe_doc>Four elements, which provide insights into a human users availbility
	for and interest in communication.</haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="xmpp.PresenceType" params="" file="../../xmpp/PresenceType.hx">
		<error/>
		<probe/>
		<subscribe/>
		<subscribed/>
		<unavailable/>
		<unsubscribe/>
		<unsubscribed/>
	</enum>
	<class path="xmpp.PrivacyList" params="" file="../../xmpp/PrivacyList.hx">
		<parse public="1" set="method" line="42" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.PrivacyList"/>
</f></parse>
		<toXml public="1" set="method" line="34"><f a=""><c path="Xml"/></f></toXml>
		<items public="1"><c path="Array"><c path="xmpp.privacylist.Item"/></c></items>
		<name public="1"><c path="String"/></name>
		<new public="1" set="method" line="29"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.PrivacyLists" params="" file="../../xmpp/PrivacyLists.hx">
		<XMLNS public="1" set="null" line="28" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="59" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.PrivacyLists"/>
</f></parse>
		<iterator public="1" get="inline" set="null" line="55"><f a=""><t path="Iterator"><c path="xmpp.PrivacyList"/></t></f></iterator>
		<toXml public="1" set="method" line="38"><f a=""><c path="Xml"/></f></toXml>
		<lists public="1"><c path="Array"><c path="xmpp.PrivacyList"/></c></lists>
		<_default public="1"><c path="String"/></_default>
		<active public="1"><c path="String"/></active>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
		<haxe_doc></haxe_doc>
	</class>
	<class path="xmpp.PrivateStorage" params="" file="../../xmpp/PrivateStorage.hx">
		<XMLNS public="1" set="null" line="28" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="49" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.PrivateStorage"/>
</f></parse>
		<toXml public="1" set="method" line="40"><f a=""><c path="Xml"/></f></toXml>
		<data public="1"><c path="Xml"/></data>
		<namespace public="1"><c path="String"/></namespace>
		<name public="1"><c path="String"/></name>
		<new public="1" set="method" line="34"><f a="name:namespace:?data">
	<c path="String"/>
	<c path="String"/>
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.PubSub" params="" file="../../xmpp/PubSub.hx">
		<XMLNS public="1" set="null" line="28" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="90" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.PubSub"/>
</f></parse>
		<toXml public="1" set="method" line="45"><f a=""><c path="Xml"/></f></toXml>
		<unsubscribe public="1"><a>
	<subid><c path="String"/></subid>
	<node><c path="String"/></node>
	<jid><c path="String"/></jid>
</a></unsubscribe>
		<subscriptions public="1"><c path="xmpp.pubsub.Subscriptions"/></subscriptions>
		<subscription public="1"><c path="xmpp.pubsub.Subscription"/></subscription>
		<retract public="1"><c path="xmpp.pubsub.Retract"/></retract>
		<publish public="1"><c path="xmpp.pubsub.Publish"/></publish>
		<items public="1"><c path="xmpp.pubsub.Items"/></items>
		<configure public="1"><c path="xmpp.DataForm"/></configure>
		<create public="1"><c path="String"/></create>
		<affiliations public="1"><c path="xmpp.pubsub.Affiliations"/></affiliations>
		<options public="1"><c path="xmpp.pubsub.Options"/></options>
		<subscribe public="1"><a>
	<node><c path="String"/></node>
	<jid><c path="String"/></jid>
</a></subscribe>
		<new public="1" set="method" line="43"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="xmpp.PubSubEvent" params="" file="../../xmpp/PubSubEvent.hx">
		<XMLNS public="1" set="null" line="26" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="67" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.PubSubEvent"/>
</f></parse>
		<toXml public="1" set="method" line="36"><f a=""><c path="Xml"/></f></toXml>
		<subscription public="1"><c path="xmpp.pubsub.Subscription"/></subscription>
		<purge public="1"><c path="String"/></purge>
		<delete public="1"><c path="String"/></delete>
		<configuration public="1"><a>
	<node><c path="String"/></node>
	<form><c path="xmpp.DataForm"/></form>
</a></configuration>
		<items public="1"><c path="xmpp.pubsub.Items"/></items>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="xmpp.PubSubOwner" params="" file="../../xmpp/PubSubOwner.hx">
		<XMLNS public="1" set="null" line="26" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="76" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.PubSubOwner"/>
</f></parse>
		<toXml public="1" set="method" line="38"><f a=""><c path="Xml"/></f></toXml>
		<_default public="1"><a>
	<form><c path="xmpp.DataForm"/></form>
	<empty><x path="Bool"/></empty>
</a></_default>
		<affiliations public="1"><c path="xmpp.pubsub.Affiliations"/></affiliations>
		<subscriptions public="1"><c path="xmpp.pubsub.Subscriptions"/></subscriptions>
		<configure public="1"><a>
	<node><c path="String"/></node>
	<form><c path="xmpp.DataForm"/></form>
</a></configure>
		<purge public="1"><c path="String"/></purge>
		<delete public="1">
			<c path="String"/>
			<haxe_doc>Set to "" (empty string) to add a empty delete element</haxe_doc>
		</delete>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="xmpp.Register" params="" file="../../xmpp/Register.hx">
		<XMLNS public="1" set="null" line="29" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="96" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.Register"/>
</f></parse>
		<createElement set="method" line="88"><f a="x:id">
	<c path="Xml"/>
	<c path="String"/>
	<c path="Xml"/>
</f></createElement>
		<toXml public="1" set="method" line="61"><f a=""><c path="Xml"/></f></toXml>
		<form public="1"><c path="xmpp.DataForm"/></form>
		<remove public="1"><x path="Bool"/></remove>
		<registered public="1"><x path="Bool"/></registered>
		<key public="1"><c path="String"/></key>
		<text public="1"><c path="String"/></text>
		<misc public="1"><c path="String"/></misc>
		<date public="1"><c path="String"/></date>
		<url public="1"><c path="String"/></url>
		<phone public="1"><c path="String"/></phone>
		<zip public="1"><c path="String"/></zip>
		<state public="1"><c path="String"/></state>
		<city public="1"><c path="String"/></city>
		<address public="1"><c path="String"/></address>
		<last public="1"><c path="String"/></last>
		<first public="1"><c path="String"/></first>
		<nick public="1"><c path="String"/></nick>
		<name public="1"><c path="String"/></name>
		<email public="1"><c path="String"/></email>
		<password public="1"><c path="String"/></password>
		<username public="1"><c path="String"/></username>
		<new public="1" set="method" line="53"><f a="?username:?password:?email:?name">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XEP-0077: In-Band Registration</haxe_doc>
	</class>
	<class path="xmpp.Roster" params="" file="../../xmpp/Roster.hx">
		<extends path="List"><c path="xmpp.roster.Item"/></extends>
		<XMLNS public="1" set="null" line="29" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="45" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.Roster"/>
</f></parse>
		<toXml public="1" set="method" line="38"><f a=""><c path="Xml"/></f></toXml>
		<new public="1" set="method" line="31"><f a="?items">
	<t path="Iterable"><c path="xmpp.roster.Item"/></t>
	<x path="Void"/>
</f></new>
		<haxe_doc>IQ roster extension.</haxe_doc>
	</class>
	<class path="xmpp.SASL" params="" file="../../xmpp/SASL.hx">
		<XMLNS public="1" set="null" line="31" static="1"><c path="String"/></XMLNS>
		<EREG_FAILURE public="1" line="32" static="1"><c path="EReg"/></EREG_FAILURE>
		<createAuth public="1" set="method" line="36" static="1">
			<f a="mech:?text">
				<c path="String"/>
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc></haxe_doc>
		</createAuth>
		<createResponse public="1" set="method" line="47" static="1">
			<f a="t">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc></haxe_doc>
		</createResponse>
		<parseMechanisms public="1" set="method" line="58" static="1">
			<f a="x">
				<c path="Xml"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Parses list of SASL mechanisms.</haxe_doc>
		</parseMechanisms>
		<haxe_doc>Static methods for creation/manipulation of SASL XMPP packets.</haxe_doc>
	</class>
	<class path="xmpp.SoftwareVersion" params="" file="../../xmpp/SoftwareVersion.hx">
		<XMLNS public="1" set="null" line="31" static="1"><c path="String"/></XMLNS>
		<parse public="1" get="inline" set="null" line="56" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.SoftwareVersion"/>
</f></parse>
		<toXml public="1" set="method" line="48"><f a=""><c path="Xml"/></f></toXml>
		<os public="1">
			<c path="String"/>
			<haxe_doc>The operating system of the queried entity</haxe_doc>
		</os>
		<version public="1">
			<c path="String"/>
			<haxe_doc>The specific version of the software</haxe_doc>
		</version>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The natural-language name of the software</haxe_doc>
		</name>
		<new public="1" set="method" line="42"><f a="?name:?version:?os">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>XEP 0092 - Software Version: http://www.xmpp.org/extensions/xep-0092.html</haxe_doc>
	</class>
	<class path="xmpp.Stream" params="" file="../../xmpp/Stream.hx">
		<STREAM public="1" set="null" line="29" static="1"><c path="String"/></STREAM>
		<CLIENT public="1" set="null" line="30" static="1"><c path="String"/></CLIENT>
		<SERVER public="1" set="null" line="31" static="1"><c path="String"/></SERVER>
		<createOpenXml public="1" set="method" line="39" static="1">
			<f a="ns:to:?version:?lang:?header">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Creates the opening XML tag of a XMPP stream.</haxe_doc>
		</createOpenXml>
		<haxe_doc>Static stuff for creation/manipulation of XMPP stream opening/closing tags.</haxe_doc>
	</class>
	<class path="xmpp.UserSearch" params="" file="../../xmpp/UserSearch.hx">
		<XMLNS public="1" set="null" line="28" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="62" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.UserSearch"/>
</f></parse>
		<getFieldValue set="method" line="88" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></getFieldValue>
		<toXml public="1" set="method" line="42"><f a=""><c path="Xml"/></f></toXml>
		<form public="1"><c path="xmpp.DataForm"/></form>
		<items public="1"><c path="Array"><t path="xmpp.UserSearchItem"/></c></items>
		<email public="1"><c path="String"/></email>
		<nick public="1"><c path="String"/></nick>
		<last public="1"><c path="String"/></last>
		<first public="1"><c path="String"/></first>
		<instructions public="1"><c path="String"/></instructions>
		<new public="1" set="method" line="38"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="xmpp.UserSearchItem" params="" file="../../xmpp/UserSearchItem.hx"><a>
	<nick><c path="String"/></nick>
	<last><c path="String"/></last>
	<jid><c path="String"/></jid>
	<first><c path="String"/></first>
	<email><c path="String"/></email>
</a></typedef>
	<class path="xmpp.VCardTemp" params="" file="../../xmpp/VCardTemp.hx">
		<XMLNS public="1" set="null" line="42" static="1"><c path="String"/></XMLNS>
		<PROD_ID public="1" set="null" line="43" static="1"><c path="String"/></PROD_ID>
		<VERSION public="1" set="null" line="44" static="1"><c path="String"/></VERSION>
		<hasPhoto public="1" set="method" line="153" static="1">
			<f a="vc">
				<c path="xmpp.VCardTemp"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the given vcard has a photo attached (all xmpp.vcard.Photo).</haxe_doc>
		</hasPhoto>
		<emptyXml public="1" set="method" line="158" static="1"><f a=""><c path="Xml"/></f></emptyXml>
		<parse public="1" set="method" line="167" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.VCardTemp"/>
</f></parse>
		<parsePhoto set="method" line="306" static="1"><f a="x">
	<c path="Xml"/>
	<t path="xmpp.vcard.Photo"/>
</f></parsePhoto>
		<addXmlField set="method" line="144"><f a="n:x:?name">
	<c path="String"/>
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></addXmlField>
		<toXml public="1" set="method" line="68"><f a=""><c path="Xml"/></f></toXml>
		<desc public="1"><c path="String"/></desc>
		<url public="1"><c path="String"/></url>
		<org public="1"><t path="xmpp.vcard.Org"/></org>
		<role public="1"><c path="String"/></role>
		<title public="1"><c path="String"/></title>
		<geo public="1"><t path="xmpp.vcard.Geo"><x path="Float"/></t></geo>
		<tz public="1"><c path="String"/></tz>
		<jid public="1"><c path="String"/></jid>
		<email public="1"><t path="xmpp.vcard.EMail"/></email>
		<tels public="1"><c path="Array"><t path="xmpp.vcard.Tel"/></c></tels>
		<addresses public="1"><c path="Array"><t path="xmpp.vcard.Address"/></c></addresses>
		<birthday public="1"><c path="String"/></birthday>
		<photo public="1"><t path="xmpp.vcard.Photo"/></photo>
		<nickname public="1"><c path="String"/></nickname>
		<n public="1"><t path="xmpp.vcard.Name"/></n>
		<fn public="1"><c path="String"/></fn>
		<new public="1" set="method" line="63"><f a=""><x path="Void"/></f></new>
		<haxe_doc>XEP-0054: vcard-temp: http://www.xmpp.org/extensions/xep-0054.html
	RFC2426: http://tools.ietf.org/html/rfc2426

	Depricated! Replaced by XEP0292 (see xmpp.VCard).
	This is just a subset of RFC2426!</haxe_doc>
	</class>
	<class path="xmpp.X" params="" file="../../xmpp/X.hx"><create public="1" set="method" line="28" static="1"><f a="ns:?childs">
	<c path="String"/>
	<t path="Iterable"><c path="Xml"/></t>
	<c path="Xml"/>
</f></create></class>
	<class path="xmpp.XMLUtil" params="" file="../../xmpp/XMLUtil.hx">
		<createElement public="1" set="method" line="33" static="1">
			<f a="n:t">
				<c path="String"/>
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>@param n Name of xml element to create
		@param t Node content</haxe_doc>
		</createElement>
		<addElement public="1" get="inline" set="null" line="44" static="1">
			<f a="x:name:content">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>@param x XML element to attach the created element to
		@param n Name of xml node
		@param t Node content</haxe_doc>
		</addElement>
		<addField public="1" set="method" line="56" static="1">
			<f a="x:o:n:?required">
				<c path="Xml"/>
				<d/>
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>@param x XML element to attach the element to
		@param o The target object, provider of value
		@param n Name of XML node
		@param t Node content</haxe_doc>
		</addField>
		<addFields public="1" set="method" line="69" static="1">
			<f a="x:o:?fields">
				<c path="Xml"/>
				<d/>
				<t path="Iterable"><c path="String"/></t>
				<c path="Xml"/>
			</f>
			<haxe_doc>@param x XML element to attach the created element to
		@param o The target object to retrieve the field values from
		@param fields Optional names of fields, gets reflected if null</haxe_doc>
		</addFields>
		<reflectElements public="1" params="T" set="method" line="78" static="1">
			<f a="target:x">
				<c path="reflectElements.T"/>
				<c path="Xml"/>
				<c path="reflectElements.T"/>
			</f>
			<haxe_doc>TODO use?</haxe_doc>
		</reflectElements>
		<ns public="1" set="method" line="90" static="1">
			<f a="x:?ns">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get (if no ns specified) or set the namespace of the given xml element.

		@param x XML element to attach the create element to
		@param ns Optional namespace to set</haxe_doc>
		</ns>
		<setNamespace public="1" get="inline" set="null" line="100" static="1">
			<f a="x:s">
				<c path="Xml"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Hack because flash is unable to set xml namespace (since haxe 2.06) //TODO</haxe_doc>
		</setNamespace>
		<haxe_doc>XML utilities.</haxe_doc>
	</class>
	<class path="xmpp.dataform.Field" params="" file="../../xmpp/dataform/Field.hx">
		<parse public="1" set="method" line="55" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.dataform.Field"/>
</f></parse>
		<parseFields public="1" set="method" line="74" static="1">
			<f a="t:x">
				<a><fields><c path="Array"><c path="xmpp.dataform.Field"/></c></fields></a>
				<c path="Xml"/>
				<a><fields><c path="Array"><c path="xmpp.dataform.Field"/></c></fields></a>
			</f>
			<haxe_doc>Parses all dataform fields into the given dataform field container.</haxe_doc>
		</parseFields>
		<toXml public="1" set="method" line="43"><f a=""><c path="Xml"/></f></toXml>
		<options public="1"><c path="Array"><c path="xmpp.dataform.FieldOption"/></c></options>
		<values public="1"><c path="Array"><c path="String"/></c></values>
		<required public="1"><x path="Bool"/></required>
		<desc public="1"><c path="String"/></desc>
		<variable public="1"><c path="String"/></variable>
		<type public="1"><e path="xmpp.dataform.FieldType"/></type>
		<label public="1"><c path="String"/></label>
		<new public="1" set="method" line="36"><f a="?type">
	<e path="xmpp.dataform.FieldType"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.dataform.FieldOption" params="" file="../../xmpp/dataform/FieldOption.hx">
		<parse public="1" set="method" line="43" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.dataform.FieldOption"/>
</f></parse>
		<toXml public="1" set="method" line="36"><f a=""><c path="Xml"/></f></toXml>
		<value public="1"><c path="String"/></value>
		<label public="1"><c path="String"/></label>
		<new public="1" set="method" line="31"><f a="?label:?value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="xmpp.dataform.FieldType" params="" file="../../xmpp/dataform/FieldType.hx">
		<boolean><haxe_doc>The field enables an entity to gather or provide an either-or choice between two options.
		The default value is "false".</haxe_doc></boolean>
		<fixed><haxe_doc><![CDATA[The field is intended for data description (e.g., human-readable text such as "section" headers) rather than data gathering or provision.
		The <value/> child SHOULD NOT contain newlines (the \n and \r characters);
		instead an application SHOULD generate multiple fixed fields, each with one <value/> child.]]></haxe_doc></fixed>
		<hidden><haxe_doc>The field is not shown to the form-submitting entity, but instead is returned with the form.
		The form-submitting entity SHOULD NOT modify the value of a hidden field, 
		but MAY do so if such behavior is defined for the "using protocol".</haxe_doc></hidden>
		<jid_multi><haxe_doc>The field enables an entity to gather or provide multiple Jabber IDs.
		Each provided JID SHOULD be unique (as determined by comparison that includes application of the Nodeprep, Nameprep, and Resourceprep profiles of Stringprep as specified in XMPP Core),
		and duplicate JIDs MUST be ignored.</haxe_doc></jid_multi>
		<jid_single><haxe_doc>The field enables an entity to gather or provide a single Jabber ID.</haxe_doc></jid_single>
		<list_multi><haxe_doc>The field enables an entity to gather or provide one or more options from among many.
		A form-submitting entity chooses one or more items from among the options presented by the form-processing entity and MUST NOT insert new options.
		The form-submitting entity MUST NOT modify the order of items as received from the form-processing entity,
		since the order of items MAY be significant.</haxe_doc></list_multi>
		<list_single><haxe_doc>The field enables an entity to gather or provide one option from among many.
		A form-submitting entity chooses one item from among the options presented by the form-processing entity and MUST NOT insert new options.</haxe_doc></list_single>
		<text_multi><haxe_doc>The field enables an entity to gather or provide multiple lines of text.</haxe_doc></text_multi>
		<text_private><haxe_doc>The field enables an entity to gather or provide a single line or word of text,
		which shall be obscured in an interface (e.g., with multiple instances of the asterisk character).</haxe_doc></text_private>
		<text_single><haxe_doc>The field enables an entity to gather or provide a single line or word of text, which may be shown in an interface.
		This field type is the default and MUST be assumed if a form-submitting entity receives a field type it does not understand.</haxe_doc></text_single>
	</enum>
	<enum path="xmpp.dataform.FormType" params="" file="../../xmpp/dataform/FormType.hx">
		<cancel><haxe_doc>The form-submitting entity has cancelled submission of data to the form-processing entity.</haxe_doc></cancel>
		<form><haxe_doc>The form-processing entity is asking the form-submitting entity to complete a form.</haxe_doc></form>
		<result><haxe_doc>The form-processing entity is returning data (e.g., search results) to the form-submitting entity,
		or the data is a generic data set.</haxe_doc></result>
		<submit><haxe_doc>The form-submitting entity is submitting data to the form-processing entity.
		The submission MAY include fields that were not provided in the empty form,
		but the form-processing entity MUST ignore any fields that it does not understand.</haxe_doc></submit>
	</enum>
	<class path="xmpp.dataform.Item" params="" file="../../xmpp/dataform/Item.hx">
		<parse public="1" get="inline" set="null" line="43" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.dataform.Item"/>
</f></parse>
		<createXml set="method" line="36"><f a="n">
	<c path="String"/>
	<c path="Xml"/>
</f></createXml>
		<toXml public="1" set="method" line="32"><f a=""><c path="Xml"/></f></toXml>
		<fields public="1"><c path="Array"><c path="xmpp.dataform.Field"/></c></fields>
		<new public="1" set="method" line="28"><f a="?fields">
	<c path="Array"><c path="xmpp.dataform.Field"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.dataform.Reported" params="" file="../../xmpp/dataform/Reported.hx">
		<extends path="xmpp.dataform.Item"/>
		<parse public="1" get="inline" set="null" line="34" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.dataform.Reported"/>
</f></parse>
		<toXml public="1" set="method" line="30" override="1"><f a=""><c path="Xml"/></f></toXml>
		<new public="1" set="method" line="26"><f a="?fields">
	<c path="Array"><c path="xmpp.dataform.Field"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="xmpp.disco.Identity" params="" file="../../xmpp/disco/Identity.hx"><a>
	<type><c path="String"/></type>
	<name><c path="String"/></name>
	<category><c path="String"/></category>
</a></typedef>
	<class path="xmpp.disco.Info" params="" file="../../xmpp/disco/Info.hx">
		<XMLNS public="1" set="null" line="26" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="68" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.disco.Info"/>
</f></parse>
		<toXml public="1" set="method" line="46"><f a=""><c path="Xml"/></f></toXml>
		<x public="1">
			<c path="Xml"/>
			<haxe_doc>Dataform</haxe_doc>
		</x>
		<node public="1">
			<c path="String"/>
			<haxe_doc>Specific node</haxe_doc>
		</node>
		<features public="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>List of features/namespaces</haxe_doc>
		</features>
		<identities public="1">
			<c path="Array"><t path="xmpp.disco.Identity"/></c>
			<haxe_doc></haxe_doc>
		</identities>
		<new public="1" set="method" line="40"><f a="?identities:?features:?node">
	<c path="Array"><t path="xmpp.disco.Identity"/></c>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.disco.Item" params="" file="../../xmpp/disco/Item.hx">
		<parse public="1" set="method" line="44" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.disco.Item"/>
</f></parse>
		<toXml public="1" set="method" line="36"><f a=""><c path="Xml"/></f></toXml>
		<node public="1"><c path="String"/></node>
		<name public="1"><c path="String"/></name>
		<jid public="1"><c path="String"/></jid>
		<new public="1" set="method" line="30"><f a="jid:?name:?node">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.disco.Items" params="" file="../../xmpp/disco/Items.hx">
		<extends path="List"><c path="xmpp.disco.Item"/></extends>
		<XMLNS public="1" set="null" line="26" static="1"><c path="String"/></XMLNS>
		<parse public="1" set="method" line="43" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.disco.Items"/>
</f></parse>
		<toXml public="1" set="method" line="35"><f a=""><c path="Xml"/></f></toXml>
		<node public="1"><c path="String"/></node>
		<new public="1" set="method" line="30"><f a="?node">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.filter.IQFilter" params="" file="../../xmpp/filter/IQFilter.hx">
		<accept public="1" set="method" line="39">
			<f a="p">
				<c path="xmpp.Packet"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</accept>
		<type public="1"><e path="xmpp.IQType"/></type>
		<node public="1"><c path="String"/></node>
		<xmlns public="1"><c path="String"/></xmlns>
		<new public="1" set="method" line="33"><f a="?xmlns:?type:?node">
	<c path="String"/>
	<e path="xmpp.IQType"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Filters IQ packets: namespace/nodename/iqtype</haxe_doc>
	</class>
	<class path="xmpp.filter.MessageFilter" params="" file="../../xmpp/filter/MessageFilter.hx">
		<accept public="1" set="method" line="38">
			<f a="p">
				<c path="xmpp.Packet"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</accept>
		<type public="1"><e path="xmpp.MessageType"/></type>
		<new public="1" set="method" line="33"><f a="?type">
	<e path="xmpp.MessageType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Filters message packets, optional including xmpp.MessageType.</haxe_doc>
	</class>
	<class path="xmpp.filter.PacketFromContainsFilter" params="" file="../../xmpp/filter/PacketFromContainsFilter.hx">
		<accept public="1" set="method" line="42">
			<f a="p">
				<c path="xmpp.Packet"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</accept>
		<set_contains set="method" line="37"><f a="t">
	<c path="String"/>
	<c path="String"/>
</f></set_contains>
		<ereg><c path="EReg"/></ereg>
		<contains public="1" set="accessor"><c path="String"/></contains>
		<new public="1" set="method" line="33"><f a="contains">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Filters XMPP packets where the from attribute contains the given string.</haxe_doc>
	</class>
	<class path="xmpp.filter.PacketFromFilter" params="" file="../../xmpp/filter/PacketFromFilter.hx">
		<accept public="1" get="inline" set="null" line="35"><f a="p">
	<c path="xmpp.Packet"/>
	<x path="Bool"/>
</f></accept>
		<jid public="1"><c path="String"/></jid>
		<new public="1" set="method" line="31"><f a="jid">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Filters XMPP packets with matching 'from' attribute.</haxe_doc>
	</class>
	<class path="xmpp.filter.PacketIDFilter" params="" file="../../xmpp/filter/PacketIDFilter.hx">
		<accept public="1" get="inline" set="null" line="35">
			<f a="p">
				<c path="xmpp.Packet"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</accept>
		<id public="1"><c path="String"/></id>
		<new public="1" set="method" line="31"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Filters XMPP packets with matching id attribute.</haxe_doc>
	</class>
	<class path="xmpp.filter.PacketNameFilter" params="" file="../../xmpp/filter/PacketNameFilter.hx">
		<accept public="1" set="method" line="35">
			<f a="p">
				<c path="xmpp.Packet"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</accept>
		<expr public="1"><c path="EReg"/></expr>
		<new public="1" set="method" line="31"><f a="expr">
	<c path="EReg"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Filters (just) custom XMPP packets with given nodename expression.</haxe_doc>
	</class>
	<class path="xmpp.filter.PacketPropertyFilter" params="" file="../../xmpp/filter/PacketPropertyFilter.hx">
		<accept public="1" set="method" line="36">
			<f a="p">
				<c path="xmpp.Packet"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</accept>
		<name public="1"><c path="String"/></name>
		<ns public="1"><c path="String"/></ns>
		<new public="1" set="method" line="31"><f a="ns:?name">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc></haxe_doc>
	</class>
	<class path="xmpp.filter.PacketTypeFilter" params="" file="../../xmpp/filter/PacketTypeFilter.hx">
		<accept public="1" get="inline" set="null" line="35">
			<f a="p">
				<c path="xmpp.Packet"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</accept>
		<type public="1"><e path="xmpp.PacketType"/></type>
		<new public="1" set="method" line="31"><f a="type">
	<e path="xmpp.PacketType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Filters packets with matching xmpp.PacketType.</haxe_doc>
	</class>
	<typedef path="xmpp.lop.Binding" params="" file="../../xmpp/lop/Binding.hx"><a>
	<value><c path="String"/></value>
	<name><c path="String"/></name>
	<datatype><c path="String"/></datatype>
</a></typedef>
	<class path="xmpp.lop.Bindings" params="" file="../../xmpp/lop/Bindings.hx">
		<extends path="List"><t path="xmpp.lop.Binding"/></extends>
		<parse public="1" set="method" line="49" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.lop.Bindings"/>
</f></parse>
		<toXml public="1" set="method" line="35"><f a=""><c path="Xml"/></f></toXml>
		<vm_id public="1"><c path="String"/></vm_id>
		<new public="1" set="method" line="30"><f a="vm_id">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.lop.Ping" params="" file="../../xmpp/lop/Ping.hx">
		<parse public="1" set="method" line="47" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.lop.Ping"/>
</f></parse>
		<toXml public="1" set="method" line="38"><f a=""><c path="Xml"/></f></toXml>
		<status public="1"><c path="String"/></status>
		<job_id public="1"><c path="String"/></job_id>
		<vm_id public="1"><c path="String"/></vm_id>
		<new public="1" set="method" line="32"><f a="vm_id:?job_id:?status">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.lop.SpawnVM" params="" file="../../xmpp/lop/SpawnVM.hx">
		<parse public="1" set="method" line="47" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.lop.SpawnVM"/>
</f></parse>
		<toXml public="1" set="method" line="38"><f a=""><c path="Xml"/></f></toXml>
		<password public="1"><c path="String"/></password>
		<id public="1"><c path="String"/></id>
		<species public="1"><c path="String"/></species>
		<new public="1" set="method" line="32"><f a="species:?id:?password">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.lop.Submit" params="" file="../../xmpp/lop/Submit.hx">
		<parse public="1" set="method" line="44" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.lop.Submit"/>
</f></parse>
		<toXml public="1" set="method" line="36"><f a=""><c path="Xml"/></f></toXml>
		<code public="1"><c path="String"/></code>
		<id public="1"><c path="String"/></id>
		<new public="1" set="method" line="31"><f a="id:?code">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.lop.Terminate" params="" file="../../xmpp/lop/Terminate.hx">
		<parse public="1" get="inline" set="null" line="41" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.lop.Terminate"/>
</f></parse>
		<toXml public="1" set="method" line="34"><f a=""><c path="Xml"/></f></toXml>
		<vm_id public="1"><c path="String"/></vm_id>
		<new public="1" set="method" line="30"><f a="vm_id">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="xmpp.muc.Affiliation" params="" file="../../xmpp/muc/Affiliation.hx">
		<none/>
		<owner/>
		<admin/>
		<member/>
		<outcast/>
		<haxe_doc>Long-lived association or connection with a room.
	Roles and Affiliations: http://xmpp.org/extensions/xep-0045.html#connections</haxe_doc>
	</enum>
	<class path="xmpp.muc.Decline" params="" file="../../xmpp/muc/Decline.hx">
		<parse public="1" set="method" line="50" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.muc.Decline"/>
</f></parse>
		<toXml public="1" set="method" line="42"><f a=""><c path="Xml"/></f></toXml>
		<nodeName><c path="String"/></nodeName>
		<reason public="1"><c path="String"/></reason>
		<from public="1"><c path="String"/></from>
		<to public="1"><c path="String"/></to>
		<new public="1" set="method" line="35"><f a="?reason:?to:?from">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.muc.Destroy" params="" file="../../xmpp/muc/Destroy.hx">
		<parse public="1" set="method" line="44" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.muc.Destroy"/>
</f></parse>
		<toXml public="1" set="method" line="37"><f a=""><c path="Xml"/></f></toXml>
		<reason public="1"><c path="String"/></reason>
		<jid public="1"><c path="String"/></jid>
		<new public="1" set="method" line="32"><f a="?jid:?reason">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.muc.Invite" params="" file="../../xmpp/muc/Invite.hx">
		<parse public="1" set="method" line="44" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.muc.Invite"/>
</f></parse>
		<toXml public="1" set="method" line="36"><f a=""><c path="Xml"/></f></toXml>
		<reason public="1"><c path="String"/></reason>
		<from public="1"><c path="String"/></from>
		<to public="1"><c path="String"/></to>
		<new public="1" set="method" line="30"><f a="to:?reason:?from">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.muc.Item" params="" file="../../xmpp/muc/Item.hx">
		<parse public="1" set="method" line="67" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.muc.Item"/>
</f></parse>
		<toXml public="1" set="method" line="45"><f a=""><c path="Xml"/></f></toXml>
		<continue_ public="1"><c path="String"/></continue_>
		<reason public="1"><c path="String"/></reason>
		<actor public="1"><c path="String"/></actor>
		<jid public="1"><c path="String"/></jid>
		<nick public="1"><c path="String"/></nick>
		<role public="1"><e path="xmpp.muc.Role"/></role>
		<affiliation public="1"><e path="xmpp.muc.Affiliation"/></affiliation>
		<new public="1" set="method" line="38"><f a="?affiliation:?role:?nick:?jid">
	<e path="xmpp.muc.Affiliation"/>
	<e path="xmpp.muc.Role"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc></haxe_doc>
	</class>
	<enum path="xmpp.muc.Role" params="" file="../../xmpp/muc/Role.hx">
		<none/>
		<visitor/>
		<participant/>
		<moderator/>
		<haxe_doc>Roles and Affiliations: http://xmpp.org/extensions/xep-0045.html#connections</haxe_doc>
	</enum>
	<class path="xmpp.muc.Status" params="" file="../../xmpp/muc/Status.hx">
		<MYSELF public="1" get="inline" set="null" line="26" static="1"><x path="Int"/></MYSELF>
		<ROOMNICK_CHANGED public="1" get="inline" set="null" line="27" static="1"><x path="Int"/></ROOMNICK_CHANGED>
		<WAITS_FOR_UNLOCK public="1" get="inline" set="null" line="28" static="1"><x path="Int"/></WAITS_FOR_UNLOCK>
		<parse public="1" get="inline" set="null" line="42" static="1"><f a="x">
	<a><get set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></get></a>
	<c path="xmpp.muc.Status"/>
</f></parse>
		<toXml public="1" set="method" line="36"><f a=""><c path="Xml"/></f></toXml>
		<code public="1"><x path="Int"/></code>
		<new public="1" set="method" line="32"><f a="code">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="xmpp.privacylist.Action" params="" file="../../xmpp/privacylist/Action.hx">
		<allow/>
		<deny/>
	</enum>
	<class path="xmpp.privacylist.Item" params="" file="../../xmpp/privacylist/Item.hx">
		<parse public="1" set="method" line="47" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.privacylist.Item"/>
</f></parse>
		<toXml public="1" set="method" line="38"><f a=""><c path="Xml"/></f></toXml>
		<order public="1"><x path="Int"/></order>
		<value public="1"><c path="String"/></value>
		<action public="1"><e path="xmpp.privacylist.Action"/></action>
		<type public="1"><e path="xmpp.privacylist.ItemType"/></type>
		<new public="1" set="method" line="31"><f a="action:?type:?value:?order">
	<e path="xmpp.privacylist.Action"/>
	<e path="xmpp.privacylist.ItemType"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="xmpp.privacylist.ItemType" params="" file="../../xmpp/privacylist/ItemType.hx">
		<group/>
		<jid/>
		<subscription/>
	</enum>
	<class path="xmpp.pubsub.Affiliation" params="" file="../../xmpp/pubsub/Affiliation.hx">
		<parse public="1" set="method" line="41" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.pubsub.Affiliation"/>
</f></parse>
		<toXml public="1" set="method" line="34"><f a=""><c path="Xml"/></f></toXml>
		<affiliation public="1"><e path="xmpp.pubsub.AffiliationState"/></affiliation>
		<node public="1"><c path="String"/></node>
		<new public="1" set="method" line="29"><f a="node:affiliation">
	<c path="String"/>
	<e path="xmpp.pubsub.AffiliationState"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="xmpp.pubsub.AffiliationState" params="" file="../../xmpp/pubsub/AffiliationState.hx">
		<none/>
		<owner/>
		<publisher/>
		<member/>
		<outcast/>
		<haxe_doc><![CDATA[<a href="http://xmpp.org/extensions/xep-0060.html#affiliations">Affiliations</a>]]></haxe_doc>
	</enum>
	<class path="xmpp.pubsub.Affiliations" params="" file="../../xmpp/pubsub/Affiliations.hx">
		<extends path="List"><c path="xmpp.pubsub.Affiliation"/></extends>
		<parse public="1" set="method" line="33" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.pubsub.Affiliations"/>
</f></parse>
		<toXml public="1" set="method" line="26"><f a=""><c path="Xml"/></f></toXml>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="xmpp.pubsub.Item" params="" file="../../xmpp/pubsub/Item.hx">
		<parse public="1" set="method" line="45" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.pubsub.Item"/>
</f></parse>
		<toXml public="1" set="method" line="37"><f a=""><c path="Xml"/></f></toXml>
		<payload public="1"><c path="Xml"/></payload>
		<id public="1"><c path="String"/></id>
		<new public="1" set="method" line="31"><f a="?id:?payload">
	<c path="String"/>
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.pubsub.Items" params="" file="../../xmpp/pubsub/Items.hx">
		<extends path="List"><c path="xmpp.pubsub.Item"/></extends>
		<parse public="1" set="method" line="46" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.pubsub.Items"/>
</f></parse>
		<toXml public="1" set="method" line="37"><f a=""><c path="Xml"/></f></toXml>
		<maxItems public="1"><t path="Null"><x path="Int"/></t></maxItems>
		<subid public="1"><c path="String"/></subid>
		<node public="1"><c path="String"/></node>
		<new public="1" set="method" line="30"><f a="?node:?subid:?maxItems">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.pubsub.Options" params="" file="../../xmpp/pubsub/Options.hx">
		<parse public="1" set="method" line="47" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.pubsub.Options"/>
</f></parse>
		<toXml public="1" set="method" line="38"><f a=""><c path="Xml"/></f></toXml>
		<form public="1"><c path="xmpp.DataForm"/></form>
		<subid public="1"><c path="String"/></subid>
		<node public="1"><c path="String"/></node>
		<jid public="1"><c path="String"/></jid>
		<new public="1" set="method" line="31"><f a="?jid:?node:?subid:?form">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="xmpp.DataForm"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.pubsub.Publish" params="" file="../../xmpp/pubsub/Publish.hx">
		<extends path="List"><c path="xmpp.pubsub.Item"/></extends>
		<parse public="1" set="method" line="44" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.pubsub.Publish"/>
</f></parse>
		<toXml public="1" set="method" line="36"><f a=""><c path="Xml"/></f></toXml>
		<node public="1"><c path="String"/></node>
		<new public="1" set="method" line="28"><f a="node:?items">
	<c path="String"/>
	<t path="Iterable"><c path="xmpp.pubsub.Item"/></t>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.pubsub.Retract" params="" file="../../xmpp/pubsub/Retract.hx">
		<extends path="List"><c path="xmpp.pubsub.Item"/></extends>
		<parse public="1" set="method" line="46" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.pubsub.Retract"/>
</f></parse>
		<toXml public="1" set="method" line="37"><f a=""><c path="Xml"/></f></toXml>
		<notify public="1"><x path="Bool"/></notify>
		<node public="1"><c path="String"/></node>
		<new public="1" set="method" line="29"><f a="node:?itemIDs:?notify">
	<c path="String"/>
	<t path="Iterable"><c path="String"/></t>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="xmpp.pubsub.Subscription" params="" file="../../xmpp/pubsub/Subscription.hx">
		<parse public="1" set="method" line="52" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.pubsub.Subscription"/>
</f></parse>
		<toXml public="1" set="method" line="42"><f a=""><c path="Xml"/></f></toXml>
		<subscription public="1"><e path="xmpp.pubsub.SubscriptionState"/></subscription>
		<subid public="1"><c path="String"/></subid>
		<node public="1"><c path="String"/></node>
		<jid public="1"><c path="String"/></jid>
		<new public="1" set="method" line="32"><f a="jid:?node:?subid:?subscription">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="xmpp.pubsub.SubscriptionState"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="xmpp.pubsub.SubscriptionState" params="" file="../../xmpp/pubsub/SubscriptionState.hx">
		<none><haxe_doc>The node MUST NOT send event notifications or payloads to the Entity.</haxe_doc></none>
		<pending><haxe_doc>An entity has requested to subscribe to a node and the request has not yet been approved by a node owner.
		The node MUST NOT send event notifications or payloads to the entity while it is in this state.</haxe_doc></pending>
		<unconfigured><haxe_doc>An entity has subscribed but its subscription options have not yet been configured.
		The node MAY send event notifications or payloads to the entity while it is in this state.
		The service MAY timeout unconfigured subscriptions.</haxe_doc></unconfigured>
		<subscribed><haxe_doc>An entity is subscribed to a node.
		The node MUST send all event notifications (and, if configured, payloads) to the entity while it is in this state
		(subject to subscriber configuration and content filtering).</haxe_doc></subscribed>
		<haxe_doc></haxe_doc>
	</enum>
	<class path="xmpp.pubsub.Subscriptions" params="" file="../../xmpp/pubsub/Subscriptions.hx">
		<extends path="List"><c path="xmpp.pubsub.Subscription"/></extends>
		<parse public="1" set="method" line="40" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.pubsub.Subscriptions"/>
</f></parse>
		<toXml public="1" set="method" line="33"><f a=""><c path="Xml"/></f></toXml>
		<node public="1"><c path="String"/></node>
		<new public="1" set="method" line="28"><f a="?node">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="xmpp.roster.AskType" params="" file="../../xmpp/roster/AskType.hx">
		<subscribe><haxe_doc>Denotes that  a request to subscribe to a entities presence has been made.</haxe_doc></subscribe>
		<unsubscribe><haxe_doc>Denotes that a request to unscubscribe from a users presence has been made.</haxe_doc></unsubscribe>
		<haxe_doc>Roster ask types.</haxe_doc>
	</enum>
	<class path="xmpp.roster.Item" params="" file="../../xmpp/roster/Item.hx">
		<parse public="1" set="method" line="54" static="1"><f a="x">
	<c path="Xml"/>
	<c path="xmpp.roster.Item"/>
</f></parse>
		<toXml public="1" set="method" line="43"><f a=""><c path="Xml"/></f></toXml>
		<groups public="1"><c path="List"><c path="String"/></c></groups>
		<askType public="1"><e path="xmpp.roster.AskType"/></askType>
		<name public="1"><c path="String"/></name>
		<subscription public="1"><e path="xmpp.roster.Subscription"/></subscription>
		<jid public="1" set="null"><c path="String"/></jid>
		<new public="1" set="method" line="34"><f a="jid:?subscription:?name:?askType:?groups">
	<c path="String"/>
	<e path="xmpp.roster.Subscription"/>
	<c path="String"/>
	<e path="xmpp.roster.AskType"/>
	<t path="Iterable"><c path="String"/></t>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="xmpp.roster.Subscription" params="" file="../../xmpp/roster/Subscription.hx">
		<none><haxe_doc>The user and subscriber have no interest in each other's presence.</haxe_doc></none>
		<to><haxe_doc>The user is interested in receiving presence updates from the subscriber.</haxe_doc></to>
		<from><haxe_doc>The subscriber is interested in receiving presence updates from the user.</haxe_doc></from>
		<both><haxe_doc>The user and subscriber have a mutual interest in each other's presence.</haxe_doc></both>
		<remove><haxe_doc>The user wishes to stop receiving presence updates from the subscriber.</haxe_doc></remove>
		<haxe_doc>Roster subscription states.</haxe_doc>
	</enum>
	<typedef path="xmpp.vcard.Address" params="" file="../../xmpp/vcard/Address.hx"><a>
	<work>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</work>
	<street>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</street>
	<region>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</region>
	<pref>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</pref>
	<postal>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</postal>
	<pobox>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</pobox>
	<pcode>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</pcode>
	<parcel>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</parcel>
	<locality>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</locality>
	<home>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</home>
	<extadd>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</extadd>
	<ctry>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</ctry>
</a></typedef>
	<typedef path="xmpp.vcard.EMail" params="" file="../../xmpp/vcard/EMail.hx"><a>
	<x400>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</x400>
	<work>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</work>
	<userid><c path="String"/></userid>
	<pref>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</pref>
	<internet>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</internet>
	<home>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</home>
</a></typedef>
	<typedef path="xmpp.vcard.Geo" params="T" file="../../xmpp/vcard/Geo.hx"><a>
	<lon><c path="xmpp.vcard.Geo.T"/></lon>
	<lat><c path="xmpp.vcard.Geo.T"/></lat>
</a></typedef>
	<typedef path="xmpp.vcard.Name" params="" file="../../xmpp/vcard/Name.hx"><a>
	<suffix><c path="String"/></suffix>
	<prefix><c path="String"/></prefix>
	<middle><c path="String"/></middle>
	<given><c path="String"/></given>
	<family><c path="String"/></family>
</a></typedef>
	<typedef path="xmpp.vcard.Org" params="" file="../../xmpp/vcard/Org.hx"><a>
	<orgunit><c path="String"/></orgunit>
	<orgname><c path="String"/></orgname>
</a></typedef>
	<typedef path="xmpp.vcard.Photo" params="" file="../../xmpp/vcard/Photo.hx"><a>
	<type><c path="String"/></type>
	<binval><c path="String"/></binval>
</a></typedef>
	<typedef path="xmpp.vcard.Tel" params="" file="../../xmpp/vcard/Tel.hx"><a>
	<work>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</work>
	<voice>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</voice>
	<video>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</video>
	<pref>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</pref>
	<pcs>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</pcs>
	<pager>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</pager>
	<number><c path="String"/></number>
	<msg>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</msg>
	<modem>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</modem>
	<isdn>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</isdn>
	<home>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</home>
	<fax>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</fax>
	<cell>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</cell>
	<bbs>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</bbs>
</a></typedef>
</haxe>